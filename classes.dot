digraph "classes" {
rankdir=BT
charset="utf-8"
"astropy.units.tests.test_units.test_invalid_type.A" [color="black", fontcolor="black", label=<{A|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_deprecated_class_with_new_method.A" [color="black", fontcolor="black", label=<{A|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_deprecated_static_and_classmethod.A" [color="black", fontcolor="black", label=<{A|<br ALIGN="LEFT"/>|<I>B</I>()<br ALIGN="LEFT"/><I>C</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_sharedmethod_reuse_on_subclasses.A" [color="black", fontcolor="black", label=<{A|x : int<br ALIGN="LEFT"/>|foo()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_classproperty_docstring.A" [color="black", fontcolor="black", label=<{A|foo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_classproperty_lazy_threadsafe.A" [color="black", fontcolor="black", label=<{A|<br ALIGN="LEFT"/>|foo()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_lazyproperty_threadsafe.A" [color="black", fontcolor="black", label=<{A|calls : int<br ALIGN="LEFT"/>foo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.latex.AASTex" [color="black", fontcolor="black", label=<{AASTex|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.latex.AASTexData" [color="black", fontcolor="black", label=<{AASTexData|data_end : str<br ALIGN="LEFT"/>data_start : str<br ALIGN="LEFT"/>|start_line(lines)<br ALIGN="LEFT"/>write(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.latex.AASTexHeader" [color="black", fontcolor="black", label=<{AASTexHeader|header_start : str<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>|start_line(lines)<br ALIGN="LEFT"/>write(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.latex.AASTexHeaderSplitter" [color="black", fontcolor="black", label=<{AASTexHeaderSplitter|<br ALIGN="LEFT"/>|join(vals: list[str]): str<br ALIGN="LEFT"/>process_line(line: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_transformations.test_static_matrix_combine_paths.AFrame" [color="black", fontcolor="black", label=<{AFrame|default_differential<br ALIGN="LEFT"/>default_representation<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_sharedmethod_reuse_on_subclasses.AMeta" [color="black", fontcolor="black", label=<{AMeta|<br ALIGN="LEFT"/>|foo()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.transformations.affine.AffineTransform" [color="black", fontcolor="black", label=<{AffineTransform|transform_func<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.AffineTransformation2D" [color="black", fontcolor="black", label=<{AffineTransformation2D|input_units<br ALIGN="LEFT"/>inputs : tuple<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>matrix<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>outputs : tuple<br ALIGN="LEFT"/>standard_broadcasting : bool<br ALIGN="LEFT"/>translation<br ALIGN="LEFT"/>|evaluate(x, y, matrix, translation)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.AiryDisk2D" [color="black", fontcolor="black", label=<{AiryDisk2D|amplitude<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>radius<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>y_0<br ALIGN="LEFT"/>|evaluate(x, y, amplitude, x_0, y_0, radius)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.AiryDisk2DKernel" [color="black", fontcolor="black", label=<{AiryDisk2DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.AllType" [color="black", fontcolor="black", label=<{AllType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.altaz.AltAz" [color="black", fontcolor="black", label=<{AltAz|default_differential<br ALIGN="LEFT"/>default_representation<br ALIGN="LEFT"/>frame_specific_representation_info : dict<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>obswl<br ALIGN="LEFT"/>pressure<br ALIGN="LEFT"/>relative_humidity<br ALIGN="LEFT"/>secz<br ALIGN="LEFT"/>temperature<br ALIGN="LEFT"/>zen<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.samp.tests.web_profile_test_helpers.AlwaysApproveWebProfileDialog" [color="black", fontcolor="black", label=<{AlwaysApproveWebProfileDialog|polling : bool<br ALIGN="LEFT"/>|poll()<br ALIGN="LEFT"/>show_dialog()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.angles.core.Angle" [color="black", fontcolor="black", label=<{Angle|dms<br ALIGN="LEFT"/>hms<br ALIGN="LEFT"/>hour<br ALIGN="LEFT"/>signed_dms<br ALIGN="LEFT"/>|is_within_bounds(lower, upper)<br ALIGN="LEFT"/>to_string(unit, decimal: bool, sep: str, precision: int \| None, alwayssign: bool, pad: bool, fields: int, format: str \| None): str<br ALIGN="LEFT"/>wrap_at(wrap_angle, inplace)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.formatter_locator.AngleFormatterLocator" [color="black", fontcolor="black", label=<{AngleFormatterLocator|base_spacing<br ALIGN="LEFT"/>decimal<br ALIGN="LEFT"/>format<br ALIGN="LEFT"/>format_unit<br ALIGN="LEFT"/>number<br ALIGN="LEFT"/>sep<br ALIGN="LEFT"/>show_decimal_unit : bool<br ALIGN="LEFT"/>spacing<br ALIGN="LEFT"/>values<br ALIGN="LEFT"/>|formatter(values, spacing, format)<br ALIGN="LEFT"/>locator(value_min, value_max)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestCopyAndCreation.test_arange_like_quantity_subclass.AngularUnits" [color="black", fontcolor="black", label=<{AngularUnits|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.ArcCosine1D" [color="black", fontcolor="black", label=<{ArcCosine1D|inverse<br ALIGN="LEFT"/>|bounding_box()<br ALIGN="LEFT"/>evaluate(x, amplitude, frequency, phase)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, frequency, phase)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.ArcSine1D" [color="black", fontcolor="black", label=<{ArcSine1D|inverse<br ALIGN="LEFT"/>|bounding_box()<br ALIGN="LEFT"/>evaluate(x, amplitude, frequency, phase)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, frequency, phase)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.ArcTangent1D" [color="black", fontcolor="black", label=<{ArcTangent1D|inverse<br ALIGN="LEFT"/>|evaluate(x, amplitude, frequency, phase)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, frequency, phase)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.Array" [color="black", fontcolor="black", label=<{Array|<br ALIGN="LEFT"/>|parse_scalar(value, config, pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.core.ArrayDistribution" [color="black", fontcolor="black", label=<{ArrayDistribution|distribution<br ALIGN="LEFT"/>|view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.ArraySetup" [color="black", fontcolor="black", label=<{ArraySetup|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_functions.ArraySetup" [color="black", fontcolor="black", label=<{ArraySetup|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.ArrayVarArray" [color="black", fontcolor="black", label=<{ArrayVarArray|<br ALIGN="LEFT"/>|parse(value, config, pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.table_helpers.ArrayWrapper" [color="black", fontcolor="black", label=<{ArrayWrapper|data : ndarray<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.table_helpers.ArrayWrapperInfo" [color="black", fontcolor="black", label=<{ArrayWrapperInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.lupton_rgb.AsinhMapping" [color="black", fontcolor="black", label=<{AsinhMapping|<br ALIGN="LEFT"/>|map_intensity_to_uint8(I)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.stretch.AsinhStretch" [color="black", fontcolor="black", label=<{AsinhStretch|a : float<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.lupton_rgb.AsinhZScaleMapping" [color="black", fontcolor="black", label=<{AsinhZScaleMapping|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.exceptions.AstropyBackwardsIncompatibleChangeWarning" [color="black", fontcolor="red", label=<{AstropyBackwardsIncompatibleChangeWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.AstropyDatetimeLeapSecondWarning" [color="black", fontcolor="red", label=<{AstropyDatetimeLeapSecondWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.exceptions.AstropyDeprecationWarning" [color="black", fontcolor="red", label=<{AstropyDeprecationWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.misc.yaml.AstropyDumper" [color="black", fontcolor="black", label=<{AstropyDumper|<br ALIGN="LEFT"/>|represent_float(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.misc.yaml.AstropyLoader" [color="black", fontcolor="black", label=<{AstropyLoader|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.logger.AstropyLogger" [color="black", fontcolor="black", label=<{AstropyLogger|<br ALIGN="LEFT"/>|disable_color()<br ALIGN="LEFT"/>disable_exception_logging()<br ALIGN="LEFT"/>disable_warnings_logging()<br ALIGN="LEFT"/>enable_color()<br ALIGN="LEFT"/>enable_exception_logging()<br ALIGN="LEFT"/>enable_warnings_logging()<br ALIGN="LEFT"/>exception_logging_enabled()<br ALIGN="LEFT"/>log_to_file(filename, filter_level, filter_origin)<br ALIGN="LEFT"/>log_to_list(filter_level, filter_origin)<br ALIGN="LEFT"/>makeRecord(name, level, pathname, lineno, msg, args, exc_info, func, extra, sinfo)<br ALIGN="LEFT"/>warnings_logging_enabled()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.exceptions.AstropyPendingDeprecationWarning" [color="black", fontcolor="red", label=<{AstropyPendingDeprecationWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.tests.command.AstropyTest" [color="black", fontcolor="black", label=<{AstropyTest|args : NoneType<br ALIGN="LEFT"/>coverage : bool<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>docs_path : NoneType, bytes, str<br ALIGN="LEFT"/>package : NoneType<br ALIGN="LEFT"/>package_name : str<br ALIGN="LEFT"/>parallel : int<br ALIGN="LEFT"/>pastebin : NoneType<br ALIGN="LEFT"/>pdb : bool<br ALIGN="LEFT"/>plugins : NoneType<br ALIGN="LEFT"/>readonly : bool<br ALIGN="LEFT"/>remote_data : str<br ALIGN="LEFT"/>repeat : NoneType<br ALIGN="LEFT"/>skip_docs : bool<br ALIGN="LEFT"/>temp_root : NoneType<br ALIGN="LEFT"/>test_path : NoneType<br ALIGN="LEFT"/>testing_path<br ALIGN="LEFT"/>tmp_dir : bytes, str<br ALIGN="LEFT"/>user_options : list<br ALIGN="LEFT"/>verbose_install : bool<br ALIGN="LEFT"/>verbose_results : bool<br ALIGN="LEFT"/>|<I>finalize_options</I>()<br ALIGN="LEFT"/>generate_testing_command()<br ALIGN="LEFT"/>initialize_options()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.time.time_support.AstropyTimeFormatter" [color="black", fontcolor="black", label=<{AstropyTimeFormatter|<br ALIGN="LEFT"/>|format_ticks(values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.time.time_support.AstropyTimeLocator" [color="black", fontcolor="black", label=<{AstropyTimeLocator|<br ALIGN="LEFT"/>|tick_values(vmin, vmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.exceptions.AstropyUserWarning" [color="black", fontcolor="red", label=<{AstropyUserWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.exceptions.AstropyWarning" [color="black", fontcolor="red", label=<{AstropyWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.interval.AsymmetricPercentileInterval" [color="black", fontcolor="black", label=<{AsymmetricPercentileInterval|lower_percentile : NoneType, float<br ALIGN="LEFT"/>n_samples : NoneType<br ALIGN="LEFT"/>upper_percentile : NoneType, float<br ALIGN="LEFT"/>|get_limits(values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.attributes.Attribute" [color="black", fontcolor="black", label=<{Attribute|default : NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>secondary_attribute : str<br ALIGN="LEFT"/>|convert_input(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.axislabels.AxisLabels" [color="black", fontcolor="black", label=<{AxisLabels|<br ALIGN="LEFT"/>|draw(renderer, bboxes, ticklabels_bbox, coord_ticklabels_bbox, ticks_locs, visible_ticks)<br ALIGN="LEFT"/>get_minpad(axis)<br ALIGN="LEFT"/>get_visibility_rule()<br ALIGN="LEFT"/>get_visible_axes()<br ALIGN="LEFT"/>set_minpad(minpad)<br ALIGN="LEFT"/>set_visibility_rule(value)<br ALIGN="LEFT"/>set_visible_axes(visible_axes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_deprecated_class_with_new_method.B" [color="black", fontcolor="black", label=<{B|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_sharedmethod_reuse_on_subclasses.B" [color="black", fontcolor="black", label=<{B|x : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_classproperty_docstring.B" [color="black", fontcolor="black", label=<{B|foo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_transformations.test_static_matrix_combine_paths.BFrame" [color="black", fontcolor="black", label=<{BFrame|default_differential<br ALIGN="LEFT"/>default_representation<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.bst.BST" [color="black", fontcolor="black", label=<{BST|NodeClass<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>root : NoneType<br ALIGN="LEFT"/>size : int<br ALIGN="LEFT"/>unique : bool<br ALIGN="LEFT"/>|add(key, data)<br ALIGN="LEFT"/>find(key)<br ALIGN="LEFT"/>find_node(key)<br ALIGN="LEFT"/>is_valid()<br ALIGN="LEFT"/>items()<br ALIGN="LEFT"/>range(lower, upper, bounds)<br ALIGN="LEFT"/>range_nodes(lower, upper, bounds)<br ALIGN="LEFT"/>remove(key, data)<br ALIGN="LEFT"/>replace_rows(row_map)<br ALIGN="LEFT"/>same_prefix(val)<br ALIGN="LEFT"/>shift_left(row)<br ALIGN="LEFT"/>shift_right(row)<br ALIGN="LEFT"/>sort()<br ALIGN="LEFT"/>sorted_data()<br ALIGN="LEFT"/>traverse(order)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.tests.test_nddata.BadNDDataSubclass" [color="black", fontcolor="black", label=<{BadNDDataSubclass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.ecliptic.BarycentricMeanEcliptic" [color="black", fontcolor="black", label=<{BarycentricMeanEcliptic|equinox<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.ecliptic.BarycentricTrueEcliptic" [color="black", fontcolor="black", label=<{BarycentricTrueEcliptic|equinox<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.format.base.Base" [color="black", fontcolor="black", label=<{Base|name : ClassVar[str]<br ALIGN="LEFT"/>registry : ClassVar[dict[str, type[Base]]]<br ALIGN="LEFT"/>|format_exponential_notation(val: UnitScale \| np.number, format_spec: str): str<br ALIGN="LEFT"/><I>parse</I>(s: str): UnitBase<br ALIGN="LEFT"/>to_string(unit: UnitBase): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.transformations.affine.BaseAffineTransform" [color="black", fontcolor="black", label=<{BaseAffineTransform|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.representation.geodetic.BaseBodycentricRepresentation" [color="black", fontcolor="black", label=<{BaseBodycentricRepresentation|attr_classes : dict<br ALIGN="LEFT"/>|from_cartesian(cart)<br ALIGN="LEFT"/>to_cartesian()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_checksum.BaseChecksumTests" [color="black", fontcolor="black", label=<{BaseChecksumTests|<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>teardown_method()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.column.BaseColumn" [color="black", fontcolor="black", label=<{BaseColumn|data<br ALIGN="LEFT"/>descr<br ALIGN="LEFT"/>format<br ALIGN="LEFT"/>groups<br ALIGN="LEFT"/>indices : list<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>meta<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>parent_table<br ALIGN="LEFT"/>quantity<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|attrs_equal(col)<br ALIGN="LEFT"/>convert_unit_to(new_unit, equivalencies)<br ALIGN="LEFT"/>copy(order, data, copy_data)<br ALIGN="LEFT"/>group_by(keys)<br ALIGN="LEFT"/>iter_str_vals()<br ALIGN="LEFT"/>more(max_lines, show_name, show_unit)<br ALIGN="LEFT"/>pformat(max_lines, show_name, show_unit, show_dtype, html)<br ALIGN="LEFT"/>pprint(max_lines, show_name, show_unit, show_dtype)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>to(unit, equivalencies)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.data_info.BaseColumnInfo" [color="black", fontcolor="black", label=<{BaseColumnInfo|attr_names<br ALIGN="LEFT"/>indices<br ALIGN="LEFT"/>parent_table<br ALIGN="LEFT"/>|adjust_indices(index, value, col_len)<br ALIGN="LEFT"/><I>get_sortable_arrays</I>()<br ALIGN="LEFT"/>iter_str_vals()<br ALIGN="LEFT"/>merge_cols_attributes(cols, metadata_conflicts, name, attrs)<br ALIGN="LEFT"/>slice_indices(col_slice, item, col_len)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.baseframe.BaseCoordinateFrame" [color="black", fontcolor="black", label=<{BaseCoordinateFrame|cache<br ALIGN="LEFT"/>cartesian<br ALIGN="LEFT"/>cylindrical<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>default_differential : NoneType<br ALIGN="LEFT"/>default_representation : NoneType<br ALIGN="LEFT"/>differential_type<br ALIGN="LEFT"/>frame_attributes : dict<br ALIGN="LEFT"/>frame_specific_representation_info : dict<br ALIGN="LEFT"/>has_data<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>masked<br ALIGN="LEFT"/>proper_motion<br ALIGN="LEFT"/>radial_velocity<br ALIGN="LEFT"/>representation_component_names<br ALIGN="LEFT"/>representation_component_units<br ALIGN="LEFT"/>representation_info<br ALIGN="LEFT"/>representation_type : property<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>spherical<br ALIGN="LEFT"/>sphericalcoslat<br ALIGN="LEFT"/>velocity<br ALIGN="LEFT"/>|get_frame_attr_defaults()<br ALIGN="LEFT"/>get_mask()<br ALIGN="LEFT"/>get_representation_cls(which)<br ALIGN="LEFT"/>get_representation_component_names(which)<br ALIGN="LEFT"/>get_representation_component_units(which)<br ALIGN="LEFT"/>insert(obj, values, axis)<br ALIGN="LEFT"/>is_equivalent_frame(other)<br ALIGN="LEFT"/>is_frame_attr_default(attrnm)<br ALIGN="LEFT"/>is_transformable_to(new_frame)<br ALIGN="LEFT"/>position_angle(other: BaseCoordinateFrame \| SkyCoord): Angle<br ALIGN="LEFT"/>realize_frame(data)<br ALIGN="LEFT"/>replicate(copy)<br ALIGN="LEFT"/>replicate_without_data(copy)<br ALIGN="LEFT"/>represent_as(base, s, in_frame_units)<br ALIGN="LEFT"/>separation(other: BaseCoordinateFrame \| SkyCoord): Angle<br ALIGN="LEFT"/>separation_3d(other)<br ALIGN="LEFT"/>set_representation_cls(base, s)<br ALIGN="LEFT"/>to_table(): QTable<br ALIGN="LEFT"/>transform_to(new_frame)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.core.BaseData" [color="black", fontcolor="black", label=<{BaseData|cols : list<br ALIGN="LEFT"/>comment : NoneType<br ALIGN="LEFT"/>data_lines : list<br ALIGN="LEFT"/>end_line : NoneType<br ALIGN="LEFT"/>fill_exclude_names : NoneType<br ALIGN="LEFT"/>fill_include_names : NoneType<br ALIGN="LEFT"/>fill_values : list<br ALIGN="LEFT"/>formats : dict<br ALIGN="LEFT"/>header<br ALIGN="LEFT"/>splitter<br ALIGN="LEFT"/>splitter_class : ClassVar[type[BaseSplitter]]<br ALIGN="LEFT"/>start_line : NoneType<br ALIGN="LEFT"/>table_name : str<br ALIGN="LEFT"/>write_spacer_lines : list<br ALIGN="LEFT"/>|get_data_lines(lines: list[str]): None<br ALIGN="LEFT"/>get_str_vals()<br ALIGN="LEFT"/>masks(cols)<br ALIGN="LEFT"/>process_lines(lines: list[str]): list[str]<br ALIGN="LEFT"/>str_vals()<br ALIGN="LEFT"/>write(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.base.BaseDifferential" [color="black", fontcolor="black", label=<{BaseDifferential|<br ALIGN="LEFT"/>|from_cartesian(other, base)<br ALIGN="LEFT"/>from_representation(representation, base)<br ALIGN="LEFT"/>norm(base)<br ALIGN="LEFT"/>represent_as(other_class, base)<br ALIGN="LEFT"/>to_cartesian(base)<br ALIGN="LEFT"/>transform(matrix, base, transformed_base)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.ecliptic.BaseEclipticFrame" [color="black", fontcolor="black", label=<{BaseEclipticFrame|default_differential<br ALIGN="LEFT"/>default_representation<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.formatter_locator.BaseFormatterLocator" [color="black", fontcolor="black", label=<{BaseFormatterLocator|format : NoneType<br ALIGN="LEFT"/>format_unit<br ALIGN="LEFT"/>number<br ALIGN="LEFT"/>spacing<br ALIGN="LEFT"/>values<br ALIGN="LEFT"/>|minor_locator(spacing, frequency, value_min, value_max)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.frame.BaseFrame" [color="black", fontcolor="black", label=<{BaseFrame|origin<br ALIGN="LEFT"/>parent_axes<br ALIGN="LEFT"/>patch<br ALIGN="LEFT"/>spine_class<br ALIGN="LEFT"/>transform<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>get_color()<br ALIGN="LEFT"/>get_linewidth()<br ALIGN="LEFT"/>sample(n_samples)<br ALIGN="LEFT"/>set_color(color)<br ALIGN="LEFT"/>set_linewidth(linewidth)<br ALIGN="LEFT"/>update_spines()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.geodetic.BaseGeodeticRepresentation" [color="black", fontcolor="black", label=<{BaseGeodeticRepresentation|attr_classes : dict<br ALIGN="LEFT"/>|from_cartesian(cart)<br ALIGN="LEFT"/>to_cartesian()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.groups.BaseGroups" [color="black", fontcolor="black", label=<{BaseGroups|parent<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.core.BaseHeader" [color="black", fontcolor="black", label=<{BaseHeader|auto_format : str<br ALIGN="LEFT"/>colnames<br ALIGN="LEFT"/>cols : list<br ALIGN="LEFT"/>comment : NoneType<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>names : NoneType<br ALIGN="LEFT"/>splitter<br ALIGN="LEFT"/>splitter_class : ClassVar[type[BaseSplitter]]<br ALIGN="LEFT"/>start_line : NoneType<br ALIGN="LEFT"/>table_meta<br ALIGN="LEFT"/>write_comment : bool<br ALIGN="LEFT"/>write_spacer_lines : list<br ALIGN="LEFT"/>|check_column_names(names: list[str], strict_names: bool, guessing: bool): None<br ALIGN="LEFT"/>get_col_type(col)<br ALIGN="LEFT"/>get_cols(lines)<br ALIGN="LEFT"/>get_type_map_key(col)<br ALIGN="LEFT"/>process_lines(lines)<br ALIGN="LEFT"/>remove_columns(names: list[str]): None<br ALIGN="LEFT"/>rename_column(name: str, new_name: str): None<br ALIGN="LEFT"/>update_meta(lines, meta)<br ALIGN="LEFT"/>write(lines: list[str]): None<br ALIGN="LEFT"/>write_comments(lines, meta)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.high_level_api.BaseHighLevelWCS" [color="black", fontcolor="black", label=<{BaseHighLevelWCS|low_level_wcs<br ALIGN="LEFT"/>|array_index_to_world()<br ALIGN="LEFT"/><I>pixel_to_world</I>()<br ALIGN="LEFT"/>world_to_array_index()<br ALIGN="LEFT"/><I>world_to_pixel</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_images.BaseImageTests" [color="black", fontcolor="black", label=<{BaseImageTests|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.BaseInitFrom" [color="black", fontcolor="black", label=<{BaseInitFrom|<br ALIGN="LEFT"/>|test_basic_init(table_type)<br ALIGN="LEFT"/>test_names_cols_mismatch(table_type)<br ALIGN="LEFT"/>test_names_dtype_mismatch(table_type)<br ALIGN="LEFT"/>test_set_dtype(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.BaseInitFromDictLike" [color="black", fontcolor="black", label=<{BaseInitFromDictLike|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.BaseInitFromListLike" [color="black", fontcolor="black", label=<{BaseInitFromListLike|<br ALIGN="LEFT"/>|test_names_cols_mismatch(table_type)<br ALIGN="LEFT"/>test_names_copy_false(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.core.BaseInputter" [color="black", fontcolor="black", label=<{BaseInputter|encoding : NoneType<br ALIGN="LEFT"/>process_lines<br ALIGN="LEFT"/>|get_lines(table, newline)<br ALIGN="LEFT"/>process_lines(lines: list[str]): list[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.interval.BaseInterval" [color="black", fontcolor="black", label=<{BaseInterval|<br ALIGN="LEFT"/>|<I>get_limits</I>(values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.low_level_api.BaseLowLevelWCS" [color="black", fontcolor="black", label=<{BaseLowLevelWCS|array_shape<br ALIGN="LEFT"/>axis_correlation_matrix<br ALIGN="LEFT"/>pixel_axis_names<br ALIGN="LEFT"/>pixel_bounds<br ALIGN="LEFT"/>pixel_n_dim<br ALIGN="LEFT"/>pixel_shape<br ALIGN="LEFT"/>serialized_classes<br ALIGN="LEFT"/>world_axis_names<br ALIGN="LEFT"/>world_axis_object_classes<br ALIGN="LEFT"/>world_axis_object_components<br ALIGN="LEFT"/>world_axis_physical_types<br ALIGN="LEFT"/>world_axis_units<br ALIGN="LEFT"/>world_n_dim<br ALIGN="LEFT"/>|array_index_to_world_values()<br ALIGN="LEFT"/><I>pixel_to_world_values</I>()<br ALIGN="LEFT"/>world_to_array_index_values()<br ALIGN="LEFT"/><I>world_to_pixel_values</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.core.BaseOutputter" [color="black", fontcolor="black", label=<{BaseOutputter|converters : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.timeseries.periodograms.base.BasePeriodogram" [color="black", fontcolor="black", label=<{BasePeriodogram|<br ALIGN="LEFT"/>|from_timeseries(timeseries, signal_column_name, uncertainty)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [color="black", fontcolor="black", label=<{BaseRADecFrame|default_differential<br ALIGN="LEFT"/>default_representation<br ALIGN="LEFT"/>frame_specific_representation_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.BaseReader" [color="black", fontcolor="black", label=<{BaseReader|cols : list<br ALIGN="LEFT"/>comment_lines<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>data_class<br ALIGN="LEFT"/>encoding : NoneType<br ALIGN="LEFT"/>exclude_names : NoneType<br ALIGN="LEFT"/>guessing : bool<br ALIGN="LEFT"/>header<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>include_names : NoneType<br ALIGN="LEFT"/>inputter<br ALIGN="LEFT"/>inputter_class<br ALIGN="LEFT"/>lines<br ALIGN="LEFT"/>max_ndim : ClassVar[int \| None]<br ALIGN="LEFT"/>meta : dict<br ALIGN="LEFT"/>names : NoneType<br ALIGN="LEFT"/>outputter<br ALIGN="LEFT"/>outputter_class<br ALIGN="LEFT"/>strict_names : bool<br ALIGN="LEFT"/>|inconsistent_handler(str_vals: list[str], ncols: int): list[str]<br ALIGN="LEFT"/>read(table)<br ALIGN="LEFT"/>update_table_data(table)<br ALIGN="LEFT"/>write(table: Table): list[str]<br ALIGN="LEFT"/>write_header(lines, meta)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.base.BaseRepresentation" [color="black", fontcolor="black", label=<{BaseRepresentation|differentials<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>|cross(other)<br ALIGN="LEFT"/>dot(other)<br ALIGN="LEFT"/>from_representation(representation)<br ALIGN="LEFT"/>mean()<br ALIGN="LEFT"/>norm()<br ALIGN="LEFT"/>represent_as(other_class, differential_class)<br ALIGN="LEFT"/><I>scale_factors</I>()<br ALIGN="LEFT"/>shape(shape)<br ALIGN="LEFT"/>sum()<br ALIGN="LEFT"/>transform(matrix)<br ALIGN="LEFT"/><I>unit_vectors</I>()<br ALIGN="LEFT"/>with_differentials(differentials)<br ALIGN="LEFT"/>without_differentials()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.base.BaseRepresentationOrDifferential" [color="black", fontcolor="black", label=<{BaseRepresentationOrDifferential|components<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>masked<br ALIGN="LEFT"/>name : ClassVar[str]<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|<I>from_cartesian</I>(other)<br ALIGN="LEFT"/>get_mask()<br ALIGN="LEFT"/>get_name()<br ALIGN="LEFT"/><I>to_cartesian</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.base.BaseRepresentationOrDifferentialInfo" [color="black", fontcolor="black", label=<{BaseRepresentationOrDifferentialInfo|attrs_from_parent : set<br ALIGN="LEFT"/>mask_val<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|default_format(val)<br ALIGN="LEFT"/>new_like(reps, length, metadata_conflicts, name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.spherical.BaseSphericalCosLatDifferential" [color="black", fontcolor="black", label=<{BaseSphericalCosLatDifferential|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.representation.spherical.BaseSphericalDifferential" [color="black", fontcolor="black", label=<{BaseSphericalDifferential|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.BaseSplitter" [color="black", fontcolor="black", label=<{BaseSplitter|delimiter : str \| None<br ALIGN="LEFT"/>|join(vals: list[str]): str<br ALIGN="LEFT"/>process_line(line: str): str<br ALIGN="LEFT"/>process_val(val: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.stretch.BaseStretch" [color="black", fontcolor="black", label=<{BaseStretch|inverse<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_item_access.BaseTestItems" [color="black", fontcolor="black", label=<{BaseTestItems|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_quantities_parameters.BaseTestModel" [color="black", fontcolor="black", label=<{BaseTestModel|<br ALIGN="LEFT"/>|evaluate(x, a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.timeseries.core.BaseTimeSeries" [color="black", fontcolor="black", label=<{BaseTimeSeries|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.transform.BaseTransform" [color="black", fontcolor="black", label=<{BaseTransform|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.wrappers.base.BaseWCSWrapper" [color="black", fontcolor="black", label=<{BaseWCSWrapper|axis_correlation_matrix<br ALIGN="LEFT"/>pixel_axis_names<br ALIGN="LEFT"/>pixel_bounds<br ALIGN="LEFT"/>pixel_n_dim<br ALIGN="LEFT"/>pixel_shape<br ALIGN="LEFT"/>serialized_classes<br ALIGN="LEFT"/>world_axis_names<br ALIGN="LEFT"/>world_axis_object_classes<br ALIGN="LEFT"/>world_axis_object_components<br ALIGN="LEFT"/>world_axis_physical_types<br ALIGN="LEFT"/>world_axis_units<br ALIGN="LEFT"/>world_n_dim<br ALIGN="LEFT"/>|<I>pixel_to_world_values</I>()<br ALIGN="LEFT"/><I>world_to_pixel_values</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.basic.Basic" [color="black", fontcolor="black", label=<{Basic|data_class<br ALIGN="LEFT"/>guessing : bool<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>outputter<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.BasicData" [color="black", fontcolor="black", label=<{BasicData|comment : str<br ALIGN="LEFT"/>splitter<br ALIGN="LEFT"/>start_line : int<br ALIGN="LEFT"/>write_comment : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_annotations.test_enum_annotation.BasicEnum" [color="black", fontcolor="black", label=<{BasicEnum|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.BasicHeader" [color="black", fontcolor="black", label=<{BasicHeader|comment : str<br ALIGN="LEFT"/>splitter<br ALIGN="LEFT"/>start_line : int<br ALIGN="LEFT"/>write_comment : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.BasicTestSetup" [color="black", fontcolor="black", label=<{BasicTestSetup|q<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.BasicTestSetup" [color="black", fontcolor="black", label=<{BasicTestSetup|<br ALIGN="LEFT"/>|check(func)<br ALIGN="LEFT"/>check2(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.table.BinTableHDU" [color="black", fontcolor="black", label=<{BinTableHDU|columns : NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>ver : int<br ALIGN="LEFT"/>|dump(datafile, cdfile, hfile, overwrite)<br ALIGN="LEFT"/>load(datafile, cdfile, hfile, replace, header)<br ALIGN="LEFT"/>match_header(header)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.timeseries.binned.BinnedTimeSeries" [color="black", fontcolor="black", label=<{BinnedTimeSeries|time_bin_center<br ALIGN="LEFT"/>time_bin_end<br ALIGN="LEFT"/>time_bin_size<br ALIGN="LEFT"/>time_bin_start<br ALIGN="LEFT"/>|read(filename, time_bin_start_column, time_bin_end_column, time_bin_size_column, time_bin_size_unit, time_format, time_scale, format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.Bit" [color="black", fontcolor="black", label=<{Bit|array_type<br ALIGN="LEFT"/>binary_one : bytes<br ALIGN="LEFT"/>binary_zero : bytes<br ALIGN="LEFT"/>default : bool<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>vararray_type<br ALIGN="LEFT"/>|binoutput(value, mask)<br ALIGN="LEFT"/>binparse(read)<br ALIGN="LEFT"/>output(value, mask)<br ALIGN="LEFT"/>parse(value, config, pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.BitArray" [color="black", fontcolor="black", label=<{BitArray|vararray_type<br ALIGN="LEFT"/>|binoutput(value, mask)<br ALIGN="LEFT"/>binparse(read)<br ALIGN="LEFT"/>output(value, mask)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.bitmask.BitFlag" [color="black", fontcolor="black", label=<{BitFlag|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.bitmask.BitFlagNameMap" [color="black", fontcolor="black", label=<{BitFlagNameMap|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.bitmask.BitFlagNameMeta" [color="black", fontcolor="black", label=<{BitFlagNameMeta|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.physical_models.BlackBody" [color="black", fontcolor="black", label=<{BlackBody|bolometric_flux<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>input_units_equivalencies : dict<br ALIGN="LEFT"/>lambda_max<br ALIGN="LEFT"/>nu_max<br ALIGN="LEFT"/>scale<br ALIGN="LEFT"/>temperature<br ALIGN="LEFT"/>|evaluate(x, temperature, scale)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_sky_coord.test_custom_frame_skycoord.BlahBleeBlopFrame" [color="black", fontcolor="black", label=<{BlahBleeBlopFrame|default_representation<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.BoolType" [color="black", fontcolor="black", label=<{BoolType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.converters.Boolean" [color="black", fontcolor="black", label=<{Boolean|array_type<br ALIGN="LEFT"/>binary_false : bytes<br ALIGN="LEFT"/>binary_question_mark : bytes<br ALIGN="LEFT"/>binary_true : bytes<br ALIGN="LEFT"/>default : bool<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>vararray_type<br ALIGN="LEFT"/>|binoutput(value, mask)<br ALIGN="LEFT"/>binparse(read)<br ALIGN="LEFT"/>binparse_value(value)<br ALIGN="LEFT"/>output(value, mask)<br ALIGN="LEFT"/>parse(value, config, pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.BooleanArray" [color="black", fontcolor="black", label=<{BooleanArray|vararray_type<br ALIGN="LEFT"/>|binoutput(value, mask)<br ALIGN="LEFT"/>binparse(read)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_transformations.test_frame_override_component_with_attribute.BorkedFrame" [color="black", fontcolor="black", label=<{BorkedFrame|dec<br ALIGN="LEFT"/>ra<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_bounding_box.Test_BoundingDomain.setup_method.BoundingDomain" [color="black", fontcolor="black", label=<{BoundingDomain|<br ALIGN="LEFT"/>|fix_inputs(model, fix_inputs)<br ALIGN="LEFT"/>prepare_inputs(input_shape, inputs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.angles.errors.BoundsError" [color="black", fontcolor="red", label=<{BoundsError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Box1D" [color="black", fontcolor="black", label=<{Box1D|amplitude<br ALIGN="LEFT"/>bounding_box<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>return_units<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>|evaluate(x, amplitude, x_0, width)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.Box1DKernel" [color="black", fontcolor="black", label=<{Box1DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Box2D" [color="black", fontcolor="black", label=<{Box2D|amplitude<br ALIGN="LEFT"/>bounding_box<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>x_width<br ALIGN="LEFT"/>y_0<br ALIGN="LEFT"/>y_width<br ALIGN="LEFT"/>|evaluate(x, y, amplitude, x_0, y_0, x_width, y_width)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.Box2DKernel" [color="black", fontcolor="black", label=<{Box2DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.timeseries.periodograms.bls.core.BoxLeastSquares" [color="black", fontcolor="black", label=<{BoxLeastSquares|dy : int<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|autoperiod(duration, minimum_period, maximum_period, minimum_n_transit, frequency_factor)<br ALIGN="LEFT"/>autopower(duration, objective, method, oversample, minimum_n_transit, minimum_period, maximum_period, frequency_factor)<br ALIGN="LEFT"/>compute_stats(period, duration, transit_time)<br ALIGN="LEFT"/>model(t_model, period, duration, transit_time)<br ALIGN="LEFT"/>power(period, duration, objective, method, oversample)<br ALIGN="LEFT"/>transit_mask(t, period, duration, transit_time)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.timeseries.periodograms.bls.core.BoxLeastSquaresResults" [color="black", fontcolor="black", label=<{BoxLeastSquaresResults|transit_time<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.powerlaws.BrokenPowerLaw1D" [color="black", fontcolor="black", label=<{BrokenPowerLaw1D|alpha_1<br ALIGN="LEFT"/>alpha_2<br ALIGN="LEFT"/>amplitude<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>x_break<br ALIGN="LEFT"/>|evaluate(x, amplitude, x_break, alpha_1, alpha_2)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, x_break, alpha_1, alpha_2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.Builder" [color="black", fontcolor="black", label=<{Builder|<br ALIGN="LEFT"/>|build(o)<br ALIGN="LEFT"/>build_Add(o)<br ALIGN="LEFT"/>build_Const(o)<br ALIGN="LEFT"/>build_Dict(o)<br ALIGN="LEFT"/>build_Getattr(o)<br ALIGN="LEFT"/>build_List(o)<br ALIGN="LEFT"/>build_Name(o)<br ALIGN="LEFT"/>build_Tuple(o)<br ALIGN="LEFT"/>build_UnaryAdd(o)<br ALIGN="LEFT"/>build_UnarySub(o)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.ccddata.CCDData" [color="black", fontcolor="black", label=<{CCDData|add<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>divide<br ALIGN="LEFT"/>header<br ALIGN="LEFT"/>known_invalid_fits_unit_strings : dict<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>meta : dict<br ALIGN="LEFT"/>multiply<br ALIGN="LEFT"/>psf<br ALIGN="LEFT"/>subtract<br ALIGN="LEFT"/>uncertainty<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>wcs<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/>to_hdu(hdu_mask, hdu_uncertainty, hdu_flags, wcs_relax, key_uncertainty_type, as_image_hdu, hdu_psf)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.tests.test_decorators.CCDData" [color="black", fontcolor="black", label=<{CCDData|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.format.cds.CDS" [color="black", fontcolor="black", label=<{CDS|<br ALIGN="LEFT"/>|parse(s: str, debug: bool): UnitBase<br ALIGN="LEFT"/>to_string(unit: UnitBase, fraction: bool \| Literal['inline', 'multiline']): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.cirs.CIRS" [color="black", fontcolor="black", label=<{CIRS|location<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.constants.codata2010.CODATA2010" [color="black", fontcolor="black", label=<{CODATA2010|default_reference : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.constants.codata2014.CODATA2014" [color="black", fontcolor="black", label=<{CODATA2014|default_reference : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.constants.codata2018.CODATA2018" [color="black", fontcolor="black", label=<{CODATA2018|default_reference : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.data.CacheDamaged" [color="black", fontcolor="red", label=<{CacheDamaged|bad_files : NoneType, list<br ALIGN="LEFT"/>bad_urls : NoneType, list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.data.CacheMissingWarning" [color="black", fontcolor="red", label=<{CacheMissingWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.card.Card" [color="black", fontcolor="black", label=<{Card|comment<br ALIGN="LEFT"/>field_specifier<br ALIGN="LEFT"/>image<br ALIGN="LEFT"/>is_blank<br ALIGN="LEFT"/>keyword<br ALIGN="LEFT"/>length : int<br ALIGN="LEFT"/>rawkeyword<br ALIGN="LEFT"/>rawvalue<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|fromstring(image)<br ALIGN="LEFT"/>normalize_keyword(keyword)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianDifferential" [color="black", fontcolor="black", label=<{CartesianDifferential|base_representation<br ALIGN="LEFT"/>d_xyz<br ALIGN="LEFT"/>|from_cartesian(other, base)<br ALIGN="LEFT"/>get_d_xyz(xyz_axis)<br ALIGN="LEFT"/>to_cartesian(base)<br ALIGN="LEFT"/>transform(matrix, base, transformed_base)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" [color="black", fontcolor="black", label=<{CartesianRepresentation|attr_classes : dict<br ALIGN="LEFT"/>differentials : str<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>xyz<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|cross(other)<br ALIGN="LEFT"/>dot(other)<br ALIGN="LEFT"/>from_cartesian(other)<br ALIGN="LEFT"/>get_xyz(xyz_axis)<br ALIGN="LEFT"/>mean()<br ALIGN="LEFT"/>norm()<br ALIGN="LEFT"/>scale_factors()<br ALIGN="LEFT"/>sum()<br ALIGN="LEFT"/>to_cartesian()<br ALIGN="LEFT"/>transform(matrix)<br ALIGN="LEFT"/>unit_vectors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.attributes.CartesianRepresentationAttribute" [color="black", fontcolor="black", label=<{CartesianRepresentationAttribute|unit : NoneType<br ALIGN="LEFT"/>|convert_input(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.tests.safeio.CatchZeroByteWriter" [color="black", fontcolor="black", label=<{CatchZeroByteWriter|<br ALIGN="LEFT"/>|write(buffer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.cds.Cds" [color="black", fontcolor="black", label=<{Cds|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>|read(table)<br ALIGN="LEFT"/><I>write</I>(table)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.cds.CdsData" [color="black", fontcolor="black", label=<{CdsData|header<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>start_line<br ALIGN="LEFT"/>table_name : str<br ALIGN="LEFT"/>|process_lines(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.cds.CdsHeader" [color="black", fontcolor="black", label=<{CdsHeader|col_type_map : dict<br ALIGN="LEFT"/>cols : list<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>names<br ALIGN="LEFT"/>readme : NoneType<br ALIGN="LEFT"/>|get_cols(lines)<br ALIGN="LEFT"/>get_type_map_key(col)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.conftest.Celestial2DLowLevelWCS" [color="black", fontcolor="black", label=<{Celestial2DLowLevelWCS|pixel_bounds<br ALIGN="LEFT"/>pixel_n_dim<br ALIGN="LEFT"/>pixel_shape<br ALIGN="LEFT"/>world_axis_names<br ALIGN="LEFT"/>world_axis_object_classes<br ALIGN="LEFT"/>world_axis_object_components<br ALIGN="LEFT"/>world_axis_physical_types<br ALIGN="LEFT"/>world_axis_units<br ALIGN="LEFT"/>world_n_dim<br ALIGN="LEFT"/>|pixel_to_world_values(px, py)<br ALIGN="LEFT"/>world_to_pixel_values(wx, wy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.calculation.CelestialError" [color="black", fontcolor="red", label=<{CelestialError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.converters.Char" [color="black", fontcolor="black", label=<{Char|arraysize : int, str<br ALIGN="LEFT"/>binoutput<br ALIGN="LEFT"/>binparse<br ALIGN="LEFT"/>default : bytes<br ALIGN="LEFT"/>field_name<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>|output(value, mask)<br ALIGN="LEFT"/>parse(value, config, pos)<br ALIGN="LEFT"/>supports_empty_values(config)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.polynomial.Chebyshev1D" [color="black", fontcolor="black", label=<{Chebyshev1D|c0 : int, list<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>parameters : list, ndarray, tuple<br ALIGN="LEFT"/>|clenshaw(x, coeffs)<br ALIGN="LEFT"/>evaluate(x)<br ALIGN="LEFT"/>fit_deriv(x)<br ALIGN="LEFT"/>prepare_inputs(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.polynomial.Chebyshev2D" [color="black", fontcolor="black", label=<{Chebyshev2D|parameters : list<br ALIGN="LEFT"/>|fit_deriv(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.CheckSignatureCompatibilityBase" [color="black", fontcolor="black", label=<{CheckSignatureCompatibilityBase|<br ALIGN="LEFT"/>|get_param_group(parameters, kinds: list): list[str]<br ALIGN="LEFT"/>have_catchall_argument(parameters, kind): bool<br ALIGN="LEFT"/>test_all_arguments_reexposed(target, helper)<br ALIGN="LEFT"/>test_known_arguments(target, helper)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.TestUnifiedInputRegistry.test_inherited_read_registration.Child1" [color="black", fontcolor="black", label=<{Child1|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.TestUnifiedOutputRegistry.test_inherited_write_registration.Child1" [color="black", fontcolor="black", label=<{Child1|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.TestUnifiedInputRegistry.test_inherited_read_registration.Child2" [color="black", fontcolor="black", label=<{Child2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.TestUnifiedOutputRegistry.test_inherited_write_registration.Child2" [color="black", fontcolor="black", label=<{Child2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_utils.test_vectorize_redshift_method.Class" [color="black", fontcolor="black", label=<{Class|<br ALIGN="LEFT"/>|method(z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_utils.test_all_cls_vars.ClassA" [color="black", fontcolor="black", label=<{ClassA|a : int<br ALIGN="LEFT"/>b : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_utils.test_all_cls_vars.ClassB" [color="black", fontcolor="black", label=<{ClassB|c : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_models.test_metaclass_kwargs.ClassModel" [color="black", fontcolor="black", label=<{ClassModel|<br ALIGN="LEFT"/>|<I>evaluate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_models.test_submetaclass_kwargs.ClassModel" [color="black", fontcolor="black", label=<{ClassModel|<br ALIGN="LEFT"/>|<I>evaluate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.column.ColDefs" [color="black", fontcolor="black", label=<{ColDefs|columns : list<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>formats<br ALIGN="LEFT"/>names<br ALIGN="LEFT"/>|add_col(column)<br ALIGN="LEFT"/>change_attrib(col_name, attrib, new_value)<br ALIGN="LEFT"/>change_name(col_name, new_name)<br ALIGN="LEFT"/>change_unit(col_name, new_unit)<br ALIGN="LEFT"/>del_col(col_name)<br ALIGN="LEFT"/>info(attrib, output)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.column.Column" [color="black", fontcolor="black", label=<{Column|convert_unit_to<br ALIGN="LEFT"/>copy<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>more<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>pformat<br ALIGN="LEFT"/>pprint<br ALIGN="LEFT"/>quantity<br ALIGN="LEFT"/>to<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|insert(obj, values, axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_info.test_data_info_subclass.Column" [color="black", fontcolor="black", label=<{Column|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.column.Column" [color="black", fontcolor="black", label=<{Column|array<br ALIGN="LEFT"/>ascii<br ALIGN="LEFT"/>bscale<br ALIGN="LEFT"/>bzero<br ALIGN="LEFT"/>dim<br ALIGN="LEFT"/>disp<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>format<br ALIGN="LEFT"/>null<br ALIGN="LEFT"/>start<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|coord_inc(coord_inc)<br ALIGN="LEFT"/>coord_ref_point(coord_ref_point)<br ALIGN="LEFT"/>coord_ref_value(coord_ref_value)<br ALIGN="LEFT"/>coord_type(coord_type)<br ALIGN="LEFT"/>coord_unit(coord_unit)<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>name(name)<br ALIGN="LEFT"/>time_ref_pos(time_ref_pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.core.Column" [color="black", fontcolor="black", label=<{Column|colspan : int<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>end : int<br ALIGN="LEFT"/>fill_values : dict<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>null : str<br ALIGN="LEFT"/>raw_type<br ALIGN="LEFT"/>shape : list<br ALIGN="LEFT"/>start : int<br ALIGN="LEFT"/>str_vals : list<br ALIGN="LEFT"/>subtype : NoneType<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>unit : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.column.ColumnAttribute" [color="black", fontcolor="black", label=<{ColumnAttribute|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.meta.ColumnDict" [color="black", fontcolor="black", label=<{ColumnDict|<br ALIGN="LEFT"/>|items()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.groups.ColumnGroups" [color="black", fontcolor="black", label=<{ColumnGroups|indices<br ALIGN="LEFT"/>keys<br ALIGN="LEFT"/>parent_column<br ALIGN="LEFT"/>parent_table<br ALIGN="LEFT"/>|aggregate(func)<br ALIGN="LEFT"/>filter(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.column.ColumnInfo" [color="black", fontcolor="black", label=<{ColumnInfo|attr_names<br ALIGN="LEFT"/>attrs_from_parent<br ALIGN="LEFT"/>|get_sortable_arrays()<br ALIGN="LEFT"/>new_like(cols, length, metadata_conflicts, name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.meta.ColumnOrderList" [color="black", fontcolor="black", label=<{ColumnOrderList|<br ALIGN="LEFT"/>|sort()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.basic.CommentedHeader" [color="black", fontcolor="black", label=<{CommentedHeader|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>|read(table)<br ALIGN="LEFT"/>write_header(lines, meta)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.basic.CommentedHeaderHeader" [color="black", fontcolor="black", label=<{CommentedHeaderHeader|<br ALIGN="LEFT"/>|process_lines(lines)<br ALIGN="LEFT"/>write(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.timeseries.tests.test_common.CommonTimeSeriesTests" [color="black", fontcolor="black", label=<{CommonTimeSeriesTests|<br ALIGN="LEFT"/>|test_add_column()<br ALIGN="LEFT"/>test_add_row()<br ALIGN="LEFT"/>test_column_indexing()<br ALIGN="LEFT"/>test_column_slicing_notime()<br ALIGN="LEFT"/>test_join()<br ALIGN="LEFT"/>test_replace_column()<br ALIGN="LEFT"/>test_required_after_stacking()<br ALIGN="LEFT"/>test_row_indexing()<br ALIGN="LEFT"/>test_row_slicing()<br ALIGN="LEFT"/>test_set_unit()<br ALIGN="LEFT"/>test_stacking()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed.compressed.CompImageHDU" [color="black", fontcolor="black", label=<{CompImageHDU|compressed_data<br ALIGN="LEFT"/>compression_type<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>dither_seed : int<br ALIGN="LEFT"/>hcomp_scale : int<br ALIGN="LEFT"/>hcomp_smooth : int<br ALIGN="LEFT"/>header : NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>quantize_level : float<br ALIGN="LEFT"/>quantize_method : int<br ALIGN="LEFT"/>section<br ALIGN="LEFT"/>tile_shape : NoneType, tuple<br ALIGN="LEFT"/>|fileinfo()<br ALIGN="LEFT"/>match_header(header)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed.header.CompImageHeader" [color="black", fontcolor="black", label=<{CompImageHeader|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed.section.CompImageSection" [color="black", fontcolor="black", label=<{CompImageSection|dtype<br ALIGN="LEFT"/>hdu<br ALIGN="LEFT"/>ndim<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.funcs.test_comparison.ComparisonFunctionTestBase" [color="black", fontcolor="black", label=<{ComparisonFunctionTestBase|<br ALIGN="LEFT"/>|converted(to_format, format)<br ALIGN="LEFT"/>cosmo()<br ALIGN="LEFT"/>cosmo_eqvxflat(cosmo)<br ALIGN="LEFT"/>format(request)<br ALIGN="LEFT"/>pert_converted(pert_cosmo, format)<br ALIGN="LEFT"/>pert_cosmo(cosmo)<br ALIGN="LEFT"/>pert_cosmo_eqvxflat(pert_cosmo)<br ALIGN="LEFT"/>xfail_cant_autoidentify(format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.Complex" [color="black", fontcolor="black", label=<{Complex|array_type<br ALIGN="LEFT"/>default<br ALIGN="LEFT"/>vararray_type<br ALIGN="LEFT"/>|output(value, mask)<br ALIGN="LEFT"/>parse(value, config, pos)<br ALIGN="LEFT"/>parse_parts(parts, config, pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.ComplexArray" [color="black", fontcolor="black", label=<{ComplexArray|vararray_type<br ALIGN="LEFT"/>|parse(value, config, pos)<br ALIGN="LEFT"/>parse_parts(parts, config, pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.ComplexArrayVarArray" [color="black", fontcolor="black", label=<{ComplexArrayVarArray|<br ALIGN="LEFT"/>|parse(value, config, pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.ComplexVarArray" [color="black", fontcolor="black", label=<{ComplexVarArray|<br ALIGN="LEFT"/>|parse(value, config, pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.stretch.CompositeStretch" [color="black", fontcolor="black", label=<{CompositeStretch|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.transform.CompositeTransform" [color="black", fontcolor="black", label=<{CompositeTransform|inverse<br ALIGN="LEFT"/>transform_1<br ALIGN="LEFT"/>transform_2<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.transformations.composite.CompositeTransform" [color="black", fontcolor="black", label=<{CompositeTransform|transforms : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.core.CompositeUnit" [color="black", fontcolor="black", label=<{CompositeUnit|bases<br ALIGN="LEFT"/>powers<br ALIGN="LEFT"/>scale<br ALIGN="LEFT"/>|decompose(bases: Collection[UnitBase]): CompositeUnit<br ALIGN="LEFT"/>is_unity(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.bounding_box.CompoundBoundingBox" [color="black", fontcolor="black", label=<{CompoundBoundingBox|bounding_boxes<br ALIGN="LEFT"/>create_selector<br ALIGN="LEFT"/>named_selector_tuple<br ALIGN="LEFT"/>selector_args<br ALIGN="LEFT"/>slice_args : tuple<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/>fix_inputs(model, fixed_inputs: dict): Self<br ALIGN="LEFT"/>prepare_inputs(input_shape, inputs): tuple[Any, Any, Any]<br ALIGN="LEFT"/>validate(model, bounding_box: dict, selector_args, create_selector, ignored: list \| None, order: str, _preserve_ignore: bool): Self<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.core.CompoundModel" [color="black", fontcolor="black", label=<{CompoundModel|bounding_box<br ALIGN="LEFT"/>col_fit_deriv<br ALIGN="LEFT"/>eqcons<br ALIGN="LEFT"/>fit_deriv<br ALIGN="LEFT"/>fittable<br ALIGN="LEFT"/>has_user_bounding_box<br ALIGN="LEFT"/>ineqcons<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>input_units_allow_dimensionless<br ALIGN="LEFT"/>input_units_equivalencies<br ALIGN="LEFT"/>input_units_strict<br ALIGN="LEFT"/>inputs : tuple<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>isleaf<br ALIGN="LEFT"/>left<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>n_inputs<br ALIGN="LEFT"/>n_left_params<br ALIGN="LEFT"/>n_outputs<br ALIGN="LEFT"/>n_submodels<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>op<br ALIGN="LEFT"/>outputs<br ALIGN="LEFT"/>param_names<br ALIGN="LEFT"/>return_units<br ALIGN="LEFT"/>right<br ALIGN="LEFT"/>submodel_names<br ALIGN="LEFT"/>|evaluate()<br ALIGN="LEFT"/>inputs_map()<br ALIGN="LEFT"/>outputs_map()<br ALIGN="LEFT"/>rename(name)<br ALIGN="LEFT"/>render(out, coords)<br ALIGN="LEFT"/>replace_submodel(name, model)<br ALIGN="LEFT"/>traverse_postorder(include_operator)<br ALIGN="LEFT"/>with_units_from_data()<br ALIGN="LEFT"/>without_units_for_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.logger.Conf" [color="black", fontcolor="black", label=<{Conf|log_exceptions<br ALIGN="LEFT"/>log_file_encoding<br ALIGN="LEFT"/>log_file_format<br ALIGN="LEFT"/>log_file_level<br ALIGN="LEFT"/>log_file_path<br ALIGN="LEFT"/>log_level<br ALIGN="LEFT"/>log_to_file<br ALIGN="LEFT"/>log_warnings<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.Conf" [color="black", fontcolor="black", label=<{Conf|max_lines<br ALIGN="LEFT"/>max_width<br ALIGN="LEFT"/>unicode_output<br ALIGN="LEFT"/>use_color<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.Conf" [color="black", fontcolor="black", label=<{Conf|warn_setting_unit_directly<br ALIGN="LEFT"/>warn_unsupported_correlated<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.quantity.Conf" [color="black", fontcolor="black", label=<{Conf|latex_array_threshold<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.Conf" [color="black", fontcolor="black", label=<{Conf|contour_grid_samples<br ALIGN="LEFT"/>coordinate_range_samples<br ALIGN="LEFT"/>frame_boundary_samples<br ALIGN="LEFT"/>grid_samples<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.data.Conf" [color="black", fontcolor="black", label=<{Conf|allow_internet<br ALIGN="LEFT"/>compute_hash_block_size<br ALIGN="LEFT"/>dataurl<br ALIGN="LEFT"/>dataurl_mirror<br ALIGN="LEFT"/>default_http_user_agent<br ALIGN="LEFT"/>delete_temporary_downloads_at_exit<br ALIGN="LEFT"/>download_block_size<br ALIGN="LEFT"/>remote_timeout<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.iers.iers.Conf" [color="black", fontcolor="black", label=<{Conf|auto_download<br ALIGN="LEFT"/>auto_max_age<br ALIGN="LEFT"/>iers_auto_url<br ALIGN="LEFT"/>iers_auto_url_mirror<br ALIGN="LEFT"/>iers_degraded_accuracy<br ALIGN="LEFT"/>iers_leap_second_auto_url<br ALIGN="LEFT"/>ietf_leap_second_auto_url<br ALIGN="LEFT"/>remote_timeout<br ALIGN="LEFT"/>system_leap_second_file<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.config.tests.test_configs.test_configitem.Conf" [color="black", fontcolor="black", label=<{Conf|tstnm<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.config.tests.test_configs.test_configitem_types.Conf" [color="black", fontcolor="black", label=<{Conf|tstnm1<br ALIGN="LEFT"/>tstnm2<br ALIGN="LEFT"/>tstnm3<br ALIGN="LEFT"/>tstnm4<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.config.tests.test_configs.test_configitem_options.Conf" [color="black", fontcolor="black", label=<{Conf|tstnmo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.config.tests.test_configs.test_configitem_setters.Conf" [color="black", fontcolor="black", label=<{Conf|tstnm12<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.config.tests.test_configs.test_configitem_unicode.Conf" [color="black", fontcolor="black", label=<{Conf|tstunicode<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.samp.Conf" [color="black", fontcolor="black", label=<{Conf|n_retries<br ALIGN="LEFT"/>use_internet<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.Conf" [color="black", fontcolor="black", label=<{Conf|masked_array_type<br ALIGN="LEFT"/>use_fast_parser<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.jsviewer.Conf" [color="black", fontcolor="black", label=<{Conf|css_urls<br ALIGN="LEFT"/>datatables_url<br ALIGN="LEFT"/>jquery_url<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.Conf" [color="black", fontcolor="black", label=<{Conf|auto_colname<br ALIGN="LEFT"/>default_notebook_table_class<br ALIGN="LEFT"/>replace_inplace<br ALIGN="LEFT"/>replace_warnings<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.Conf" [color="black", fontcolor="black", label=<{Conf|enable_record_valued_keyword_cards<br ALIGN="LEFT"/>enable_uint<br ALIGN="LEFT"/>extension_name_case_sensitive<br ALIGN="LEFT"/>lazy_load_hdus<br ALIGN="LEFT"/>strip_header_whitespace<br ALIGN="LEFT"/>use_memmap<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.Conf" [color="black", fontcolor="black", label=<{Conf|guess_limit_lines<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.Conf" [color="black", fontcolor="black", label=<{Conf|max_warnings<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.Conf" [color="black", fontcolor="black", label=<{Conf|verify<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.config.configuration.ConfigItem" [color="black", fontcolor="black", label=<{ConfigItem|aliases : list<br ALIGN="LEFT"/>cfgtype : NoneType<br ALIGN="LEFT"/>defaultvalue : str<br ALIGN="LEFT"/>description : NoneType, str<br ALIGN="LEFT"/>module : NoneType, module<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>rootname : str<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|reload()<br ALIGN="LEFT"/>set(value)<br ALIGN="LEFT"/>set_temp(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.config.configuration.ConfigNamespace" [color="black", fontcolor="black", label=<{ConfigNamespace|keys<br ALIGN="LEFT"/>|help(name: str \| None): None<br ALIGN="LEFT"/>items(): Generator[tuple[str, ConfigItem], None, None]<br ALIGN="LEFT"/>reload(attr)<br ALIGN="LEFT"/>reset(attr: str \| None): None<br ALIGN="LEFT"/>set_temp(attr, value)<br ALIGN="LEFT"/>values(): Generator[ConfigItem, None, None]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.ConfigObj" [color="black", fontcolor="black", label=<{ConfigObj|BOM : bool<br ALIGN="LEFT"/>configspec : NoneType<br ALIGN="LEFT"/>create_empty<br ALIGN="LEFT"/>default_encoding<br ALIGN="LEFT"/>encoding<br ALIGN="LEFT"/>extra_values : list<br ALIGN="LEFT"/>file_error<br ALIGN="LEFT"/>filename : NoneType<br ALIGN="LEFT"/>final_comment : list<br ALIGN="LEFT"/>indent_type : str<br ALIGN="LEFT"/>initial_comment : list<br ALIGN="LEFT"/>interpolation : bool<br ALIGN="LEFT"/>list_values : bool<br ALIGN="LEFT"/>newlines : NoneType, str<br ALIGN="LEFT"/>raise_errors<br ALIGN="LEFT"/>stringify<br ALIGN="LEFT"/>unrepr<br ALIGN="LEFT"/>write_empty_values<br ALIGN="LEFT"/>|reload()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>validate(validator, preserve_errors, copy, section)<br ALIGN="LEFT"/>write(outfile, section)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.ConfigObjError" [color="black", fontcolor="red", label=<{ConfigObjError|config<br ALIGN="LEFT"/>errors : list<br ALIGN="LEFT"/>line : str<br ALIGN="LEFT"/>line_number : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.ConfigParserInterpolation" [color="black", fontcolor="black", label=<{ConfigParserInterpolation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.ConfigspecError" [color="black", fontcolor="red", label=<{ConfigspecError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.config.configuration.ConfigurationChangedWarning" [color="black", fontcolor="red", label=<{ConfigurationChangedWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.config.configuration.ConfigurationDefaultMissingError" [color="black", fontcolor="red", label=<{ConfigurationDefaultMissingError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.config.configuration.ConfigurationDefaultMissingWarning" [color="black", fontcolor="red", label=<{ConfigurationDefaultMissingWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Conic" [color="black", fontcolor="black", label=<{Conic|delta<br ALIGN="LEFT"/>sigma<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.format.console.Console" [color="black", fontcolor="black", label=<{Console|<br ALIGN="LEFT"/>|to_string(unit: UnitBase, fraction: bool \| Literal['inline', 'multiline']): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Const1D" [color="black", fontcolor="black", label=<{Const1D|amplitude<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>|evaluate(x, amplitude)<br ALIGN="LEFT"/>fit_deriv(x, amplitude)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Const2D" [color="black", fontcolor="black", label=<{Const2D|amplitude<br ALIGN="LEFT"/>bounding_box : tuple<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>|evaluate(x, y, amplitude)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.constants.constant.Constant" [color="black", fontcolor="black", label=<{Constant|abbrev<br ALIGN="LEFT"/>cgs<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>reference<br ALIGN="LEFT"/>si<br ALIGN="LEFT"/>system<br ALIGN="LEFT"/>uncertainty<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.constants.constant.ConstantMeta" [color="black", fontcolor="black", label=<{ConstantMeta|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.ContinuationLinesInputter" [color="black", fontcolor="black", label=<{ContinuationLinesInputter|continuation_char : str<br ALIGN="LEFT"/>no_continue : NoneType<br ALIGN="LEFT"/>replace_char : str<br ALIGN="LEFT"/>|process_lines(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.stretch.ContrastBiasStretch" [color="black", fontcolor="black", label=<{ContrastBiasStretch|bias<br ALIGN="LEFT"/>contrast<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.errors.ConvertError" [color="black", fontcolor="red", label=<{ConvertError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.meta._get_variable_length_array_shape.ConvertError" [color="black", fontcolor="red", label=<{ConvertError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.converters.Converter" [color="black", fontcolor="black", label=<{Converter|<br ALIGN="LEFT"/>|<I>binoutput</I>(value, mask)<br ALIGN="LEFT"/><I>binparse</I>(read)<br ALIGN="LEFT"/><I>output</I>(value, mask)<br ALIGN="LEFT"/><I>parse</I>(value, config, pos)<br ALIGN="LEFT"/>parse_scalar(value, config, pos)<br ALIGN="LEFT"/>supports_empty_values(config)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.convolution.Convolution" [color="black", fontcolor="black", label=<{Convolution|bounding_box<br ALIGN="LEFT"/>|clear_cache()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tree.CooSys" [color="black", fontcolor="black", label=<{CooSys|ID<br ALIGN="LEFT"/>epoch<br ALIGN="LEFT"/>equinox<br ALIGN="LEFT"/>refposition : NoneType<br ALIGN="LEFT"/>system<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.attributes.CoordinateAttribute" [color="black", fontcolor="black", label=<{CoordinateAttribute|<br ALIGN="LEFT"/>|convert_input(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.baseframe.CoordinateFrameInfo" [color="black", fontcolor="black", label=<{CoordinateFrameInfo|attrs_from_parent : set<br ALIGN="LEFT"/>mask_val<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|default_format(val)<br ALIGN="LEFT"/>new_like(coords, length, metadata_conflicts, name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.coordinate_helpers.CoordinateHelper" [color="black", fontcolor="black", label=<{CoordinateHelper|axislabels<br ALIGN="LEFT"/>coord_index<br ALIGN="LEFT"/>coord_type<br ALIGN="LEFT"/>coord_unit<br ALIGN="LEFT"/>coord_wrap<br ALIGN="LEFT"/>default_label<br ALIGN="LEFT"/>dpi_transform<br ALIGN="LEFT"/>formatter<br ALIGN="LEFT"/>frame<br ALIGN="LEFT"/>locator<br ALIGN="LEFT"/>offset_transform<br ALIGN="LEFT"/>parent_axes<br ALIGN="LEFT"/>parent_map<br ALIGN="LEFT"/>ticklabels<br ALIGN="LEFT"/>ticks<br ALIGN="LEFT"/>transform<br ALIGN="LEFT"/>|add_tickable_gridline(name, constant)<br ALIGN="LEFT"/>display_minor_ticks(display_minor_ticks)<br ALIGN="LEFT"/>format_coord(value, format)<br ALIGN="LEFT"/>get_auto_axislabel()<br ALIGN="LEFT"/>get_axislabel()<br ALIGN="LEFT"/>get_axislabel_position()<br ALIGN="LEFT"/>get_axislabel_visibility_rule(rule)<br ALIGN="LEFT"/>get_format_unit()<br ALIGN="LEFT"/>get_minor_frequency()<br ALIGN="LEFT"/>get_ticklabel_position()<br ALIGN="LEFT"/>get_ticks_position()<br ALIGN="LEFT"/>grid(draw_grid, grid_type)<br ALIGN="LEFT"/>set_auto_axislabel(auto_label)<br ALIGN="LEFT"/>set_axislabel(text, minpad)<br ALIGN="LEFT"/>set_axislabel_position(position)<br ALIGN="LEFT"/>set_axislabel_visibility_rule(rule)<br ALIGN="LEFT"/>set_coord_type(coord_type, coord_wrap)<br ALIGN="LEFT"/>set_format_unit(unit, decimal, show_decimal_unit)<br ALIGN="LEFT"/>set_major_formatter(formatter)<br ALIGN="LEFT"/>set_minor_frequency(frequency)<br ALIGN="LEFT"/>set_separator(separator)<br ALIGN="LEFT"/>set_ticklabel(color, size, pad, exclude_overlapping)<br ALIGN="LEFT"/>set_ticklabel_position(position)<br ALIGN="LEFT"/>set_ticklabel_visible(visible)<br ALIGN="LEFT"/>set_ticks(values, spacing, number, size, width, color, alpha, direction, exclude_overlapping)<br ALIGN="LEFT"/>set_ticks_position(position)<br ALIGN="LEFT"/>set_ticks_visible(visible)<br ALIGN="LEFT"/>tick_params(which)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.transforms.CoordinateTransform" [color="black", fontcolor="black", label=<{CoordinateTransform|has_inverse : bool<br ALIGN="LEFT"/>input_system<br ALIGN="LEFT"/>output_system<br ALIGN="LEFT"/>same_frames<br ALIGN="LEFT"/>transform_non_affine<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform(input_coords)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.transformations.base.CoordinateTransform" [color="black", fontcolor="black", label=<{CoordinateTransform|fromsys<br ALIGN="LEFT"/>overlapping_frame_attr_names : list<br ALIGN="LEFT"/>priority : float<br ALIGN="LEFT"/>tosys<br ALIGN="LEFT"/>|register(graph)<br ALIGN="LEFT"/>unregister(graph)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.coordinates_map.CoordinatesMap" [color="black", fontcolor="black", label=<{CoordinatesMap|frame<br ALIGN="LEFT"/>|get_coord_range()<br ALIGN="LEFT"/>grid(draw_grid, grid_type)<br ALIGN="LEFT"/><I>set_visible</I>(visibility)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Cosine1D" [color="black", fontcolor="black", label=<{Cosine1D|inverse<br ALIGN="LEFT"/>|evaluate(x, amplitude, frequency, phase)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, frequency, phase)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.core.Cosmology" [color="black", fontcolor="black", label=<{Cosmology|from_format<br ALIGN="LEFT"/>is_flat<br ALIGN="LEFT"/>meta<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>parameters<br ALIGN="LEFT"/>read<br ALIGN="LEFT"/>to_format<br ALIGN="LEFT"/>write<br ALIGN="LEFT"/>|clone()<br ALIGN="LEFT"/>is_equivalent(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.core.CosmologyError" [color="black", fontcolor="red", label=<{CosmologyError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.io.connect.CosmologyFromFormat" [color="black", fontcolor="black", label=<{CosmologyFromFormat|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.io.connect.CosmologyRead" [color="black", fontcolor="black", label=<{CosmologyRead|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_core.CosmologyTest" [color="black", fontcolor="black", label=<{CosmologyTest|cls_args<br ALIGN="LEFT"/>|ba()<br ALIGN="LEFT"/>cosmo(cosmo_cls)<br ALIGN="LEFT"/>cosmo_cls()<br ALIGN="LEFT"/><I>setup_class</I>()<br ALIGN="LEFT"/><I>teardown_class</I>()<br ALIGN="LEFT"/>test_astropy_table(cosmo, table_cls, in_meta)<br ALIGN="LEFT"/><I>test_clone_change_param</I>(cosmo)<br ALIGN="LEFT"/>test_clone_fail_positional_arg(cosmo)<br ALIGN="LEFT"/>test_clone_fail_unexpected_arg(cosmo)<br ALIGN="LEFT"/>test_clone_identical(cosmo)<br ALIGN="LEFT"/>test_clone_meta(cosmo)<br ALIGN="LEFT"/>test_clone_name(cosmo)<br ALIGN="LEFT"/>test_equality(cosmo)<br ALIGN="LEFT"/>test_immutability(cosmo)<br ALIGN="LEFT"/>test_init(cosmo_cls)<br ALIGN="LEFT"/>test_init_subclass(cosmo_cls)<br ALIGN="LEFT"/>test_is_equivalent(cosmo)<br ALIGN="LEFT"/><I>test_is_flat</I>(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_name(cosmo)<br ALIGN="LEFT"/>test_name_immutable(cosmo)<br ALIGN="LEFT"/>test_name_on_cls(cosmo_cls)<br ALIGN="LEFT"/>test_pickle_class(cosmo_cls, pickle_protocol)<br ALIGN="LEFT"/>test_pickle_instance(cosmo, pickle_protocol)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.io.connect.CosmologyToFormat" [color="black", fontcolor="black", label=<{CosmologyToFormat|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.base.IODirectTestBase.setup.CosmologyWithKwargs" [color="black", fontcolor="black", label=<{CosmologyWithKwargs|Tcmb0<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.io.connect.CosmologyWrite" [color="black", fontcolor="black", label=<{CosmologyWrite|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.fitting.Covariance" [color="black", fontcolor="black", label=<{Covariance|cov_matrix<br ALIGN="LEFT"/>param_names<br ALIGN="LEFT"/>|pprint(max_lines, round_val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.basic.Csv" [color="black", fontcolor="black", label=<{Csv|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>|inconsistent_handler(str_vals, ncols)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.basic.CsvData" [color="black", fontcolor="black", label=<{CsvData|comment : NoneType<br ALIGN="LEFT"/>fill_values : list<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>write_comment : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.CsvHeader" [color="black", fontcolor="black", label=<{CsvHeader|comment : NoneType<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>write_comment : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.CsvSplitter" [color="black", fontcolor="black", label=<{CsvSplitter|delimiter : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.CsvWriter" [color="black", fontcolor="black", label=<{CsvWriter|csvfile : NoneType<br ALIGN="LEFT"/>quote_empty<br ALIGN="LEFT"/>quotechar2<br ALIGN="LEFT"/>replace_sentinel : Final[str]<br ALIGN="LEFT"/>temp_out : StringIO<br ALIGN="LEFT"/>writer<br ALIGN="LEFT"/>|writerow(values)<br ALIGN="LEFT"/>writerows(values_list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.transforms.CurvedTransform" [color="black", fontcolor="black", label=<{CurvedTransform|input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>transform_path_non_affine<br ALIGN="LEFT"/>|<I>inverted</I>()<br ALIGN="LEFT"/><I>transform</I>(input)<br ALIGN="LEFT"/>transform_path(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_custom_formats.test_custom_time_format_set_jds_exception.Custom" [color="black", fontcolor="black", label=<{Custom|name<br ALIGN="LEFT"/>|set_jds(val, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_custom_formats.test_custom_time_format_val_type_exception.Custom" [color="black", fontcolor="black", label=<{Custom|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.tests.test_custom_formats.test_custom_time_format_value_exception.Custom" [color="black", fontcolor="black", label=<{Custom|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_custom_formats.test_custom_time_format_fine.Custom" [color="black", fontcolor="black", label=<{Custom|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_custom_formats.test_custom_time_format_forgot_property.Custom" [color="black", fontcolor="black", label=<{Custom|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|set_jds(val, val2)<br ALIGN="LEFT"/>value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_custom_formats.test_custom_time_format_problematic_name.Custom" [color="black", fontcolor="black", label=<{Custom|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_custom_formats.test_custom_format_cannot_make_bogus_jd1.Custom" [color="black", fontcolor="black", label=<{Custom|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_custom_formats.test_custom_format_scalar_jd1_jd2_okay.Custom" [color="black", fontcolor="black", label=<{Custom|jd1 : float<br ALIGN="LEFT"/>jd2 : float<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_custom_formats.test_custom_format_can_return_any_scalar.Custom" [color="black", fontcolor="black", label=<{Custom|jd1 : float<br ALIGN="LEFT"/>jd2 : float<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_custom_formats.test_custom_format_can_return_any_iterable.Custom" [color="black", fontcolor="black", label=<{Custom|jd1 : float<br ALIGN="LEFT"/>jd2 : float<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.tests.test_logger.test_warnings_logging_with_custom_class.CustomAstropyWarningClass" [color="black", fontcolor="red", label=<{CustomAstropyWarningClass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.ecliptic.CustomBarycentricEcliptic" [color="black", fontcolor="black", label=<{CustomBarycentricEcliptic|obliquity<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_quantities_parameters.test_log_getter.CustomBlackBody" [color="black", fontcolor="black", label=<{CustomBlackBody|scale<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.tests.test_utils.test_custom_wcs_to_from_frame.CustomFrame" [color="black", fontcolor="black", label=<{CustomFrame|obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_quantities_parameters.test_sqrt_getter.CustomGaussian1D" [color="black", fontcolor="black", label=<{CustomGaussian1D|mean<br ALIGN="LEFT"/>stddev<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations.setup_class.CustomGeodetic" [color="black", fontcolor="black", label=<{CustomGeodetic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_quantities_fitting.CustomInputNamesModel" [color="black", fontcolor="black", label=<{CustomInputNamesModel|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>inputs : tuple<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>outputs : tuple<br ALIGN="LEFT"/>|evaluate(inn, a, b)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.CustomKernel" [color="black", fontcolor="black", label=<{CustomKernel|array<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.tests.test_high_level_wcs_wrapper.CustomLowLevelWCS" [color="black", fontcolor="black", label=<{CustomLowLevelWCS|pixel_n_dim<br ALIGN="LEFT"/>world_axis_object_classes<br ALIGN="LEFT"/>world_axis_object_components<br ALIGN="LEFT"/>world_axis_physical_types<br ALIGN="LEFT"/>world_axis_units<br ALIGN="LEFT"/>world_n_dim<br ALIGN="LEFT"/>|pixel_to_world_values()<br ALIGN="LEFT"/>world_to_pixel_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_custom_formats.test_mjd_longdouble_preserves_precision.CustomMJD" [color="black", fontcolor="black", label=<{CustomMJD|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations.setup_class.CustomSphericBodycentric" [color="black", fontcolor="black", label=<{CustomSphericBodycentric|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations.setup_class.CustomSphericGeodetic" [color="black", fontcolor="black", label=<{CustomSphericGeodetic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_misc.test_grid_type_contours_transform.CustomTransform" [color="black", fontcolor="black", label=<{CustomTransform|<br ALIGN="LEFT"/>|transform(values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.utils.Cutout2D" [color="black", fontcolor="black", label=<{Cutout2D|bbox_cutout<br ALIGN="LEFT"/>bbox_original<br ALIGN="LEFT"/>center_cutout<br ALIGN="LEFT"/>center_original<br ALIGN="LEFT"/>data : ndarray<br ALIGN="LEFT"/>input_position_cutout<br ALIGN="LEFT"/>input_position_original : tuple<br ALIGN="LEFT"/>origin_cutout<br ALIGN="LEFT"/>origin_original<br ALIGN="LEFT"/>position_cutout<br ALIGN="LEFT"/>position_original<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>shape_input : ndarray<br ALIGN="LEFT"/>slices_cutout : tuple<br ALIGN="LEFT"/>slices_original : tuple<br ALIGN="LEFT"/>wcs : NoneType<br ALIGN="LEFT"/>xmax_cutout<br ALIGN="LEFT"/>xmax_original<br ALIGN="LEFT"/>xmin_cutout<br ALIGN="LEFT"/>xmin_original<br ALIGN="LEFT"/>ymax_cutout<br ALIGN="LEFT"/>ymax_original<br ALIGN="LEFT"/>ymin_cutout<br ALIGN="LEFT"/>ymin_original<br ALIGN="LEFT"/>|plot_on_original(ax, fill)<br ALIGN="LEFT"/>to_cutout_position(original_position)<br ALIGN="LEFT"/>to_original_position(cutout_position)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.projections.Cylindrical" [color="black", fontcolor="black", label=<{Cylindrical|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.representation.cylindrical.CylindricalDifferential" [color="black", fontcolor="black", label=<{CylindricalDifferential|base_representation<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.representation.cylindrical.CylindricalRepresentation" [color="black", fontcolor="black", label=<{CylindricalRepresentation|attr_classes : dict<br ALIGN="LEFT"/>phi<br ALIGN="LEFT"/>rho<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|from_cartesian(cart)<br ALIGN="LEFT"/>represent_as(other_class, differential_class)<br ALIGN="LEFT"/>scale_factors()<br ALIGN="LEFT"/>to_cartesian()<br ALIGN="LEFT"/>unit_vectors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.daophot.Daophot" [color="black", fontcolor="black", label=<{Daophot|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>inputter_class<br ALIGN="LEFT"/>table_width : int<br ALIGN="LEFT"/>|<I>write</I>(table)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.daophot.DaophotData" [color="black", fontcolor="black", label=<{DaophotData|comment : str<br ALIGN="LEFT"/>is_multiline : bool<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>start_line : int<br ALIGN="LEFT"/>|get_data_lines(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.daophot.DaophotHeader" [color="black", fontcolor="black", label=<{DaophotHeader|aperture_values : tuple<br ALIGN="LEFT"/>col_widths<br ALIGN="LEFT"/>comment : str<br ALIGN="LEFT"/>meta<br ALIGN="LEFT"/>names<br ALIGN="LEFT"/>re_format<br ALIGN="LEFT"/>re_header_keyword<br ALIGN="LEFT"/>|extract_keyword_line(line)<br ALIGN="LEFT"/>get_cols(lines)<br ALIGN="LEFT"/>parse_col_defs(grouped_lines_dict)<br ALIGN="LEFT"/>update_meta(lines, meta)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.daophot.DaophotInputter" [color="black", fontcolor="black", label=<{DaophotInputter|continuation_char : str<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>multiline_char : str<br ALIGN="LEFT"/>re_multiline<br ALIGN="LEFT"/>replace_char : str<br ALIGN="LEFT"/>|process_lines(lines)<br ALIGN="LEFT"/>search_multiline(lines, depth)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.mixins.dask.DaskColumn" [color="black", fontcolor="black", label=<{DaskColumn|info<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/>insert(obj, values, axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.mixins.dask.DaskInfo" [color="black", fontcolor="black", label=<{DaskInfo|<br ALIGN="LEFT"/>|default_format(val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.data_info.DataInfo" [color="black", fontcolor="black", label=<{DataInfo|attr_names : set<br ALIGN="LEFT"/>attrs_from_parent : set<br ALIGN="LEFT"/>info_summary_attributes : staticmethod<br ALIGN="LEFT"/>info_summary_stats : staticmethod<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.data_info.DataInfoMeta" [color="black", fontcolor="black", label=<{DataInfoMeta|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.function.logarithmic.Decibel" [color="black", fontcolor="black", label=<{Decibel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.function.logarithmic.DecibelUnit" [color="black", fontcolor="black", label=<{DecibelUnit|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.DefaultSplitter" [color="black", fontcolor="black", label=<{DefaultSplitter|cols : list<br ALIGN="LEFT"/>csv_writer : NoneType<br ALIGN="LEFT"/>csv_writer_out : StringIO<br ALIGN="LEFT"/>delimiter : str<br ALIGN="LEFT"/>doublequote : bool<br ALIGN="LEFT"/>escapechar : NoneType<br ALIGN="LEFT"/>process_line<br ALIGN="LEFT"/>quotechar : str<br ALIGN="LEFT"/>quoting : int<br ALIGN="LEFT"/>skipinitialspace : bool<br ALIGN="LEFT"/>|join(vals)<br ALIGN="LEFT"/>process_line(line)<br ALIGN="LEFT"/>process_val(val: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.column.Delayed" [color="black", fontcolor="black", label=<{Delayed|field : NoneType<br ALIGN="LEFT"/>hdu<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_bitmask.test_basic_map.DetectorMap" [color="black", fontcolor="black", label=<{DetectorMap|READOUT_ERR : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_bitmask.test_map_not_bit_flag.DetectorMap" [color="black", fontcolor="black", label=<{DetectorMap|DEAD<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_bitmask.test_map_redefine_flag.DetectorMap1" [color="black", fontcolor="black", label=<{DetectorMap1|CR : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_bitmask.test_map_redefine_flag.DetectorMap2" [color="black", fontcolor="black", label=<{DetectorMap2|SHADE : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.function.logarithmic.Dex" [color="black", fontcolor="black", label=<{Dex|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.function.logarithmic.DexUnit" [color="black", fontcolor="black", label=<{DexUnit|<br ALIGN="LEFT"/>|to_string(format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.DictLike" [color="black", fontcolor="black", label=<{DictLike|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.attributes.DifferentialAttribute" [color="black", fontcolor="black", label=<{DifferentialAttribute|allowed_classes : tuple<br ALIGN="LEFT"/>|convert_input(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Disk2D" [color="black", fontcolor="black", label=<{Disk2D|R_0<br ALIGN="LEFT"/>amplitude<br ALIGN="LEFT"/>bounding_box<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>y_0<br ALIGN="LEFT"/>|evaluate(x, y, amplitude, x_0, y_0, R_0)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.distances.Distance" [color="black", fontcolor="black", label=<{Distance|distmod<br ALIGN="LEFT"/>parallax<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|compute_z(cosmology)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_transform_coord_meta.DistanceToLonLat" [color="black", fontcolor="black", label=<{DistanceToLonLat|R : float<br ALIGN="LEFT"/>has_inverse : bool<br ALIGN="LEFT"/>transform_non_affine<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform(xy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.core.Distribution" [color="black", fontcolor="black", label=<{Distribution|distribution<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>n_samples<br ALIGN="LEFT"/>|astype(dtype)<br ALIGN="LEFT"/>pdf_histogram()<br ALIGN="LEFT"/>pdf_mad(out)<br ALIGN="LEFT"/>pdf_mean(dtype, out)<br ALIGN="LEFT"/>pdf_median(out)<br ALIGN="LEFT"/>pdf_percentiles(percentile)<br ALIGN="LEFT"/>pdf_smad(out)<br ALIGN="LEFT"/>pdf_std(dtype, out, ddof)<br ALIGN="LEFT"/>pdf_var(dtype, out, ddof)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.fitting.DogBoxLSQFitter" [color="black", fontcolor="black", label=<{DogBoxLSQFitter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.converters.Double" [color="black", fontcolor="black", label=<{Double|format : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.converters.DoubleComplex" [color="black", fontcolor="black", label=<{DoubleComplex|format : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.tests.test_high_level_api.DoubleLowLevelWCS" [color="black", fontcolor="black", label=<{DoubleLowLevelWCS|<br ALIGN="LEFT"/>|pixel_to_world_values()<br ALIGN="LEFT"/>world_to_pixel_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.physical_models.Drude1D" [color="black", fontcolor="black", label=<{Drude1D|amplitude<br ALIGN="LEFT"/>fwhm<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>return_units<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>|bounding_box(factor)<br ALIGN="LEFT"/>evaluate(x, amplitude, x_0, fwhm)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, x_0, fwhm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.DuckQuantity1" [color="black", fontcolor="black", label=<{DuckQuantity1|data<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.DuckQuantity2" [color="black", fontcolor="black", label=<{DuckQuantity2|unit<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.DuckQuantity3" [color="black", fontcolor="black", label=<{DuckQuantity3|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.DuckQuantity4" [color="black", fontcolor="black", label=<{DuckQuantity4|unit<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_deprecated_attribute.DummyClass" [color="black", fontcolor="black", label=<{DummyClass|alternative<br ALIGN="LEFT"/>bar<br ALIGN="LEFT"/>foo<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>other : list<br ALIGN="LEFT"/>pending<br ALIGN="LEFT"/>pending_custom<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_diff.DummyNonstandardExtHDU" [color="black", fontcolor="black", label=<{DummyNonstandardExtHDU|size<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.DuplicateError" [color="black", fontcolor="red", label=<{DuplicateError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.exceptions.DuplicateRepresentationWarning" [color="black", fontcolor="red", label=<{DuplicateRepresentationWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.transformations.affine.DynamicMatrixTransform" [color="black", fontcolor="black", label=<{DynamicMatrixTransform|matrix_func<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E01" [color="black", fontcolor="red", label=<{E01|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E02" [color="black", fontcolor="red", label=<{E02|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E03" [color="black", fontcolor="red", label=<{E03|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E04" [color="black", fontcolor="red", label=<{E04|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E05" [color="black", fontcolor="red", label=<{E05|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E06" [color="black", fontcolor="red", label=<{E06|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E08" [color="black", fontcolor="red", label=<{E08|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E09" [color="black", fontcolor="red", label=<{E09|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E10" [color="black", fontcolor="red", label=<{E10|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E11" [color="black", fontcolor="red", label=<{E11|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E12" [color="black", fontcolor="red", label=<{E12|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E13" [color="black", fontcolor="red", label=<{E13|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E14" [color="black", fontcolor="red", label=<{E14|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E15" [color="black", fontcolor="red", label=<{E15|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E16" [color="black", fontcolor="red", label=<{E16|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E17" [color="black", fontcolor="red", label=<{E17|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E18" [color="black", fontcolor="red", label=<{E18|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E19" [color="black", fontcolor="red", label=<{E19|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E20" [color="black", fontcolor="red", label=<{E20|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E21" [color="black", fontcolor="red", label=<{E21|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E22" [color="black", fontcolor="red", label=<{E22|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E23" [color="black", fontcolor="red", label=<{E23|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E24" [color="black", fontcolor="red", label=<{E24|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E25" [color="black", fontcolor="red", label=<{E25|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.E26" [color="black", fontcolor="red", label=<{E26|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.constants.codata2010.EMCODATA2010" [color="black", fontcolor="black", label=<{EMCODATA2010|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.constants.codata2014.EMCODATA2014" [color="black", fontcolor="black", label=<{EMCODATA2014|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.constants.codata2018.EMCODATA2018" [color="black", fontcolor="black", label=<{EMCODATA2018|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.constants.constant.EMConstant" [color="black", fontcolor="black", label=<{EMConstant|cgs<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.iers.tests.test_leap_second.ERFALeapSecondsSafe" [color="black", fontcolor="black", label=<{ERFALeapSecondsSafe|erfa_expires<br ALIGN="LEFT"/>erfa_ls<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>teardown_method()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.earth.EarthLocation" [color="black", fontcolor="black", label=<{EarthLocation|ellipsoid<br ALIGN="LEFT"/>geocentric<br ALIGN="LEFT"/>geodetic<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>itrs<br ALIGN="LEFT"/>lat<br ALIGN="LEFT"/>lon<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|from_geocentric(x, y, z, unit)<br ALIGN="LEFT"/>from_geodetic(lon, lat, height, ellipsoid)<br ALIGN="LEFT"/>get_gcrs(obstime)<br ALIGN="LEFT"/>get_gcrs_posvel(obstime)<br ALIGN="LEFT"/>get_itrs(obstime, location)<br ALIGN="LEFT"/>get_site_names()<br ALIGN="LEFT"/>gravitational_redshift(obstime, bodies, masses)<br ALIGN="LEFT"/>of_address(address, get_height, google_api_key)<br ALIGN="LEFT"/>of_site(site_name)<br ALIGN="LEFT"/>to_geocentric()<br ALIGN="LEFT"/>to_geodetic(ellipsoid)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_sites.test_non_EarthLocation.EarthLocation2" [color="black", fontcolor="black", label=<{EarthLocation2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.attributes.EarthLocationAttribute" [color="black", fontcolor="black", label=<{EarthLocationAttribute|<br ALIGN="LEFT"/>|convert_input(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.earth.EarthLocationInfo" [color="black", fontcolor="black", label=<{EarthLocationInfo|<br ALIGN="LEFT"/>|new_like(cols, length, metadata_conflicts, name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.ecsv.Ecsv" [color="black", fontcolor="black", label=<{Ecsv|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>max_ndim : NoneType<br ALIGN="LEFT"/>outputter_class<br ALIGN="LEFT"/>|update_table_data(table)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.ecsv.EcsvData" [color="black", fontcolor="black", label=<{EcsvData|<br ALIGN="LEFT"/>|str_vals()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.ecsv.EcsvHeader" [color="black", fontcolor="black", label=<{EcsvHeader|names<br ALIGN="LEFT"/>table_meta<br ALIGN="LEFT"/>|get_cols(lines)<br ALIGN="LEFT"/>process_lines(lines)<br ALIGN="LEFT"/><I>update_meta</I>(lines, meta)<br ALIGN="LEFT"/>write(lines)<br ALIGN="LEFT"/><I>write_comments</I>(lines, meta)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.ecsv.EcsvOutputter" [color="black", fontcolor="black", label=<{EcsvOutputter|default_converters : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree.Element" [color="black", fontcolor="black", label=<{Element|<br ALIGN="LEFT"/>|<I>parse</I>(iterator, config)<br ALIGN="LEFT"/><I>to_xml</I>(w)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Ellipse2D" [color="black", fontcolor="black", label=<{Ellipse2D|a<br ALIGN="LEFT"/>amplitude<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>bounding_box<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>theta<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>y_0<br ALIGN="LEFT"/>|evaluate(x, y, amplitude, x_0, y_0, a, b, theta)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_models.test_custom_model_bounding_box.Ellipsoid3D" [color="black", fontcolor="black", label=<{Ellipsoid3D|bounding_box<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_core.test_render_model_3d.Ellipsoid3D" [color="black", fontcolor="black", label=<{Ellipsoid3D|bounding_box<br ALIGN="LEFT"/>x0<br ALIGN="LEFT"/>y0<br ALIGN="LEFT"/>z0<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.frame.EllipticalFrame" [color="black", fontcolor="black", label=<{EllipticalFrame|spine_names : str<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>update_spines()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.EmptyData" [color="black", fontcolor="black", label=<{EmptyData|read : classmethod<br ALIGN="LEFT"/>write<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.bst.Epsilon" [color="black", fontcolor="black", label=<{Epsilon|val<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.equivalencies.Equivalency" [color="black", fontcolor="black", label=<{Equivalency|kwargs : list<br ALIGN="LEFT"/>name : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.core.UnitBase.EquivalentUnitsList" [color="black", fontcolor="black", label=<{EquivalentUnitsList|HEADING_NAMES : Final[tuple[str, str, str]]<br ALIGN="LEFT"/>NO_EQUIV_UNITS_MSG : Final[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.erfa_astrom.ErfaAstrom" [color="black", fontcolor="black", label=<{ErfaAstrom|<br ALIGN="LEFT"/>|apco(frame_or_coord)<br ALIGN="LEFT"/>apcs(frame_or_coord)<br ALIGN="LEFT"/>apio(frame_or_coord)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.erfa_astrom.ErfaAstromInterpolator" [color="black", fontcolor="black", label=<{ErfaAstromInterpolator|mjd_resolution<br ALIGN="LEFT"/>|apco(frame_or_coord)<br ALIGN="LEFT"/>apcs(frame_or_coord)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.rotations.EulerAngleRotation" [color="black", fontcolor="black", label=<{EulerAngleRotation|axes : list<br ALIGN="LEFT"/>axes_order<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>phi<br ALIGN="LEFT"/>psi<br ALIGN="LEFT"/>theta<br ALIGN="LEFT"/>|evaluate(alpha, delta, phi, theta, psi)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.stats.bayesian_blocks.Events" [color="black", fontcolor="black", label=<{Events|<br ALIGN="LEFT"/>|fitness(N_k: NDArray[float], T_k: NDArray[float]): NDArray[float]<br ALIGN="LEFT"/>validate_input(t: ArrayLike, x: ArrayLike \| None, sigma: float \| ArrayLike \| None): tuple[NDArray[float], NDArray[float], NDArray[float]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.parameter.test_parameter.TestParameter.test_make_from_Parameter.Example" [color="black", fontcolor="black", label=<{Example|is_flat<br ALIGN="LEFT"/>param<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.parameter.test_parameter.TestParameter.setup_class.Example1" [color="black", fontcolor="black", label=<{Example1|is_flat<br ALIGN="LEFT"/>param<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.parameter.test_parameter.TestParameter.setup_class.Example2" [color="black", fontcolor="black", label=<{Example2|param<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.tests.test_metadata.ExampleData" [color="black", fontcolor="black", label=<{ExampleData|meta<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.tests.test_metadata.test_metadata_default_factory.ExampleData" [color="black", fontcolor="black", label=<{ExampleData|meta<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.tests.test_metadata.ExampleDataclass" [color="black", fontcolor="black", label=<{ExampleDataclass|meta<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.tests.test_metadata.ExampleFrozenDataclass" [color="black", fontcolor="black", label=<{ExampleFrozenDataclass|meta<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Exponential1D" [color="black", fontcolor="black", label=<{Exponential1D|amplitude<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>tau<br ALIGN="LEFT"/>|evaluate(x, amplitude, tau)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, tau)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.powerlaws.ExponentialCutoffPowerLaw1D" [color="black", fontcolor="black", label=<{ExponentialCutoffPowerLaw1D|alpha<br ALIGN="LEFT"/>amplitude<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>x_cutoff<br ALIGN="LEFT"/>|evaluate(x, amplitude, x_0, alpha, x_cutoff)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, x_0, alpha, x_cutoff)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.base.ExtensionHDU" [color="black", fontcolor="black", label=<{ExtensionHDU|<br ALIGN="LEFT"/>|<I>match_header</I>(header)<br ALIGN="LEFT"/>writeto(name, output_verify, overwrite, checksum)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.scripts.fitsheader.ExtensionNotFoundException" [color="black", fontcolor="red", label=<{ExtensionNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.format.fits.FITS" [color="black", fontcolor="black", label=<{FITS|<br ALIGN="LEFT"/>|parse(s: str, debug: bool): UnitBase<br ALIGN="LEFT"/>to_string(unit: UnitBase, fraction: bool \| Literal['inline', 'multiline']): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.diff.FITSDiff" [color="black", fontcolor="black", label=<{FITSDiff|a<br ALIGN="LEFT"/>atol : float<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>diff_hdu_count : tuple<br ALIGN="LEFT"/>diff_hdus : list<br ALIGN="LEFT"/>filenamea : bytes, str<br ALIGN="LEFT"/>filenameb : bytes, str<br ALIGN="LEFT"/>ignore_blank_cards : bool<br ALIGN="LEFT"/>ignore_blanks : bool<br ALIGN="LEFT"/>ignore_comments<br ALIGN="LEFT"/>ignore_fields<br ALIGN="LEFT"/>ignore_hdu_patterns : set<br ALIGN="LEFT"/>ignore_hdus<br ALIGN="LEFT"/>ignore_keywords<br ALIGN="LEFT"/>numdiffs : int<br ALIGN="LEFT"/>rtol : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcs.FITSFixedWarning" [color="black", fontcolor="red", label=<{FITSFixedWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.table.FITSTableDumpDialect" [color="black", fontcolor="black", label=<{FITSTableDumpDialect|delimiter : str<br ALIGN="LEFT"/>lineterminator : str<br ALIGN="LEFT"/>quotechar : str<br ALIGN="LEFT"/>quoting : int<br ALIGN="LEFT"/>skipinitialspace : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.fitswcs.FITSWCSAPIMixin" [color="black", fontcolor="black", label=<{FITSWCSAPIMixin|array_shape<br ALIGN="LEFT"/>axis_correlation_matrix<br ALIGN="LEFT"/>pixel_bounds<br ALIGN="LEFT"/>pixel_n_dim<br ALIGN="LEFT"/>pixel_shape<br ALIGN="LEFT"/>serialized_classes<br ALIGN="LEFT"/>world_axis_names<br ALIGN="LEFT"/>world_axis_object_classes<br ALIGN="LEFT"/>world_axis_object_components<br ALIGN="LEFT"/>world_axis_physical_types<br ALIGN="LEFT"/>world_axis_units<br ALIGN="LEFT"/>world_n_dim<br ALIGN="LEFT"/>|pixel_to_world_values()<br ALIGN="LEFT"/>world_to_pixel_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.fitsrec.FITS_rec" [color="black", fontcolor="black", label=<{FITS_rec|columns<br ALIGN="LEFT"/>formats<br ALIGN="LEFT"/>names<br ALIGN="LEFT"/>|copy(order)<br ALIGN="LEFT"/>field(key)<br ALIGN="LEFT"/>from_columns(columns, nrows, fill, character_as_bytes)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.fitsrec.FITS_record" [color="black", fontcolor="black", label=<{FITS_record|array<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>end<br ALIGN="LEFT"/>row : int<br ALIGN="LEFT"/>start<br ALIGN="LEFT"/>step<br ALIGN="LEFT"/>|field(field)<br ALIGN="LEFT"/>setfield(field, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.fk4.FK4" [color="black", fontcolor="black", label=<{FK4|equinox<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.fk4.FK4NoETerms" [color="black", fontcolor="black", label=<{FK4NoETerms|equinox<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.fk5.FK5" [color="black", fontcolor="black", label=<{FK5|data<br ALIGN="LEFT"/>equinox<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.base.FLRW" [color="black", fontcolor="black", label=<{FLRW|H0<br ALIGN="LEFT"/>Neff<br ALIGN="LEFT"/>Ob0<br ALIGN="LEFT"/>Ode0<br ALIGN="LEFT"/>Odm0<br ALIGN="LEFT"/>Ogamma0<br ALIGN="LEFT"/>Ok0<br ALIGN="LEFT"/>Om0<br ALIGN="LEFT"/>Onu0<br ALIGN="LEFT"/>Otot0<br ALIGN="LEFT"/>Tcmb0<br ALIGN="LEFT"/>Tnu0<br ALIGN="LEFT"/>critical_density0<br ALIGN="LEFT"/>h<br ALIGN="LEFT"/>has_massive_nu<br ALIGN="LEFT"/>hubble_distance<br ALIGN="LEFT"/>hubble_time<br ALIGN="LEFT"/>is_flat<br ALIGN="LEFT"/>m_nu<br ALIGN="LEFT"/>|H(z)<br ALIGN="LEFT"/>Ode(z)<br ALIGN="LEFT"/>Odm(z)<br ALIGN="LEFT"/>Ogamma(z)<br ALIGN="LEFT"/>Ok(z)<br ALIGN="LEFT"/>Om(z)<br ALIGN="LEFT"/>Onu(z)<br ALIGN="LEFT"/>Otot(z)<br ALIGN="LEFT"/>Tnu(z)<br ALIGN="LEFT"/>abs_distance_integrand(z)<br ALIGN="LEFT"/>absorption_distance()<br ALIGN="LEFT"/>age(z)<br ALIGN="LEFT"/>angular_diameter_distance(z)<br ALIGN="LEFT"/>angular_diameter_distance_z1z2(z1, z2)<br ALIGN="LEFT"/>arcsec_per_kpc_comoving(z)<br ALIGN="LEFT"/>arcsec_per_kpc_proper(z)<br ALIGN="LEFT"/>comoving_distance(z)<br ALIGN="LEFT"/>comoving_transverse_distance(z)<br ALIGN="LEFT"/>comoving_volume(z)<br ALIGN="LEFT"/>de_density_scale(z)<br ALIGN="LEFT"/>differential_comoving_volume(z)<br ALIGN="LEFT"/>distmod(z)<br ALIGN="LEFT"/>efunc(z)<br ALIGN="LEFT"/>inv_efunc(z)<br ALIGN="LEFT"/>kpc_comoving_per_arcmin(z)<br ALIGN="LEFT"/>kpc_proper_per_arcmin(z)<br ALIGN="LEFT"/>lookback_distance(z)<br ALIGN="LEFT"/>lookback_time(z)<br ALIGN="LEFT"/>lookback_time_integrand(z)<br ALIGN="LEFT"/>luminosity_distance(z)<br ALIGN="LEFT"/>nu_relative_density(z)<br ALIGN="LEFT"/><I>w</I>(z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_base.FLRWTest" [color="black", fontcolor="black", label=<{FLRWTest|abstract_w : bool<br ALIGN="LEFT"/>cls_kwargs : dict<br ALIGN="LEFT"/>|nonflatcosmo()<br ALIGN="LEFT"/><I>setup_class</I>()<br ALIGN="LEFT"/>test_Odm0(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_Ogamma0(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_Ok0(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_Onu0(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_Otot(cosmo, z)<br ALIGN="LEFT"/>test_Otot0(cosmo)<br ALIGN="LEFT"/>test_Tnu0(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_clone_change_param(cosmo)<br ALIGN="LEFT"/>test_comoving_distance_example(cosmo_cls, args, kwargs, expected)<br ALIGN="LEFT"/>test_critical_density0(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_distance_broadcast(cosmo, method)<br ALIGN="LEFT"/>test_efunc_vs_invefunc(cosmo)<br ALIGN="LEFT"/>test_h(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_has_massive_nu(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_hubble_distance(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_hubble_time(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_init(cosmo_cls)<br ALIGN="LEFT"/>test_init_Tcmb0_zeroing(cosmo_cls, ba)<br ALIGN="LEFT"/>test_is_equivalent(cosmo)<br ALIGN="LEFT"/>test_is_flat(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_luminosity_distance_pandas(cosmo)<br ALIGN="LEFT"/>test_redshift_method_bad_input(cosmo, method, z, exc)<br ALIGN="LEFT"/>test_scale_factor(cosmo, z)<br ALIGN="LEFT"/>test_scale_factor0(cosmo)<br ALIGN="LEFT"/><I>test_w</I>(cosmo, z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.misc.tests.test_hdf5.test_read_wrong_fileobj.FakeFile" [color="black", fontcolor="black", label=<{FakeFile|<br ALIGN="LEFT"/>|<I>read</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.misc.tests.test_parquet.test_read_wrong_fileobj.FakeFile" [color="black", fontcolor="black", label=<{FakeFile|<br ALIGN="LEFT"/>|<I>not_read</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.misc.tests.test_parquet.test_identify_wrong_fileobj.FakeFile" [color="black", fontcolor="black", label=<{FakeFile|<br ALIGN="LEFT"/>|<I>not_read</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.tests.test_utils.test_celestial_frame_to_wcs.FakeFrame" [color="black", fontcolor="black", label=<{FakeFrame|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_sky_coord.test_frame_attr_changes.FakeFrame" [color="black", fontcolor="black", label=<{FakeFrame|fakeattr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_header.TestHeaderFunctions.test_update.FakeHeader" [color="black", fontcolor="black", label=<{FakeHeader|<br ALIGN="LEFT"/>|keys()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_images.nondegree_frame.FakeICRS" [color="black", fontcolor="black", label=<{FakeICRS|frame_specific_representation_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_converting_units.FakeICRS" [color="black", fontcolor="black", label=<{FakeICRS|frame_specific_representation_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.tests.test_logger.test_import_error_in_warning_logging.FakeModule" [color="black", fontcolor="black", label=<{FakeModule|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_nddata.FakeNumpyArray" [color="black", fontcolor="black", label=<{FakeNumpyArray|dtype<br ALIGN="LEFT"/>|<I>shape</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.tests.test_data.test_compressed_stream.FakeStream" [color="black", fontcolor="black", label=<{FakeStream|data : bytes<br ALIGN="LEFT"/>|read(nbytes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.tests.test_console.FakeTTY" [color="black", fontcolor="black", label=<{FakeTTY|<br ALIGN="LEFT"/>|isatty()<br ALIGN="LEFT"/>write(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_transformations.test_shortest_path.FakeTransform" [color="black", fontcolor="black", label=<{FakeTransform|priority<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_nduncertainty.FakeUncertainty" [color="black", fontcolor="black", label=<{FakeUncertainty|uncertainty_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.tests.test_utils.test_pixel_to_pixel_correlation_matrix_nonsquare.FakeWCS" [color="black", fontcolor="black", label=<{FakeWCS|axis_correlation_matrix : list<br ALIGN="LEFT"/>low_level_wcs<br ALIGN="LEFT"/>pixel_n_dim : int<br ALIGN="LEFT"/>world_axis_object_classes : dict<br ALIGN="LEFT"/>world_axis_object_components : list<br ALIGN="LEFT"/>world_n_dim : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.column.FalseArray" [color="black", fontcolor="black", label=<{FalseArray|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.fastbasic.FastBasic" [color="black", fontcolor="black", label=<{FastBasic|comment : str<br ALIGN="LEFT"/>data_start<br ALIGN="LEFT"/>delimiter<br ALIGN="LEFT"/>engine<br ALIGN="LEFT"/>fill_extra_cols : bool<br ALIGN="LEFT"/>guessing : bool<br ALIGN="LEFT"/>header_start<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>outputter<br ALIGN="LEFT"/>quotechar : str<br ALIGN="LEFT"/>return_header_chars<br ALIGN="LEFT"/>strict_names : bool<br ALIGN="LEFT"/>strip_whitespace_fields : bool<br ALIGN="LEFT"/>strip_whitespace_lines : bool<br ALIGN="LEFT"/>write_comment<br ALIGN="LEFT"/>|check_header()<br ALIGN="LEFT"/>make_table(data, comments)<br ALIGN="LEFT"/>read(table)<br ALIGN="LEFT"/>write(table, output)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.fastbasic.FastCommentedHeader" [color="black", fontcolor="black", label=<{FastCommentedHeader|data_start : int<br ALIGN="LEFT"/>|make_table(data, comments)<br ALIGN="LEFT"/>write(table, output)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.fastbasic.FastCsv" [color="black", fontcolor="black", label=<{FastCsv|fill_extra_cols : bool<br ALIGN="LEFT"/>|write(table, output)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.fastbasic.FastNoHeader" [color="black", fontcolor="black", label=<{FastNoHeader|<br ALIGN="LEFT"/>|write(table, output)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.core.FastOptionsError" [color="black", fontcolor="red", label=<{FastOptionsError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.fastbasic.FastRdb" [color="black", fontcolor="black", label=<{FastRdb|strip_whitespace_fields : bool<br ALIGN="LEFT"/>strip_whitespace_lines : bool<br ALIGN="LEFT"/>|write(table, output)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.fastbasic.FastTab" [color="black", fontcolor="black", label=<{FastTab|strip_whitespace_fields : bool<br ALIGN="LEFT"/>strip_whitespace_lines : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree.Field" [color="black", fontcolor="black", label=<{Field|ID<br ALIGN="LEFT"/>arraysize<br ALIGN="LEFT"/>converter<br ALIGN="LEFT"/>datatype<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>links<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>precision<br ALIGN="LEFT"/>ref<br ALIGN="LEFT"/>title : NoneType, str<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>ucd : NoneType<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>utype : NoneType<br ALIGN="LEFT"/>values<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>xtype : NoneType<br ALIGN="LEFT"/>|from_table_column(votable, column)<br ALIGN="LEFT"/>parse(iterator, config)<br ALIGN="LEFT"/>to_table_column(column)<br ALIGN="LEFT"/>to_xml(w)<br ALIGN="LEFT"/>uniqify_names(fields)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tree.FieldRef" [color="black", fontcolor="black", label=<{FieldRef|ref<br ALIGN="LEFT"/>ucd : NoneType<br ALIGN="LEFT"/>utype : NoneType<br ALIGN="LEFT"/>|get_ref()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.logger.FilterOrigin" [color="black", fontcolor="black", label=<{FilterOrigin|origin<br ALIGN="LEFT"/>|filter(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.irafutil.FitcoordsRecord" [color="black", fontcolor="black", label=<{FitcoordsRecord|coeff<br ALIGN="LEFT"/>modelname<br ALIGN="LEFT"/>xbounds : list<br ALIGN="LEFT"/>xorder<br ALIGN="LEFT"/>ybounds : list<br ALIGN="LEFT"/>yorder<br ALIGN="LEFT"/>|get_coeff()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.stats.bayesian_blocks.FitnessFunc" [color="black", fontcolor="black", label=<{FitnessFunc|gamma : float \| None<br ALIGN="LEFT"/>ncp_prior : float \| None<br ALIGN="LEFT"/>p0 : float<br ALIGN="LEFT"/>|compute_ncp_prior(N: int): float<br ALIGN="LEFT"/>fit(t: ArrayLike, x: ArrayLike \| None, sigma: ArrayLike \| float \| None): NDArray[float]<br ALIGN="LEFT"/><I>fitness</I>()<br ALIGN="LEFT"/>p0_prior(N: int): float<br ALIGN="LEFT"/>validate_input(t: ArrayLike, x: ArrayLike \| None, sigma: float \| ArrayLike \| None): tuple[NDArray[float], NDArray[float], NDArray[float]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.nonstandard.FitsHDU" [color="black", fontcolor="black", label=<{FitsHDU|hdulist<br ALIGN="LEFT"/>|fromfile(filename, compress)<br ALIGN="LEFT"/>fromhdulist(hdulist, compress)<br ALIGN="LEFT"/>match_header(header)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.conftest.FitsTestCase" [color="black", fontcolor="black", label=<{FitsTestCase|data_dir<br ALIGN="LEFT"/>home_is_data : bool<br ALIGN="LEFT"/>home_is_temp : bool<br ALIGN="LEFT"/>temp_dir : bytes, str<br ALIGN="LEFT"/>temp_files_used : set<br ALIGN="LEFT"/>use_pathlib : bool<br ALIGN="LEFT"/>|copy_file(filename)<br ALIGN="LEFT"/>data(filename)<br ALIGN="LEFT"/>set_home_as_data()<br ALIGN="LEFT"/>set_home_as_temp()<br ALIGN="LEFT"/>set_paths_via_pathlib(use_pathlib)<br ALIGN="LEFT"/>setup_method()<br ALIGN="LEFT"/>teardown_method()<br ALIGN="LEFT"/>temp(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.core.Fittable1DModel" [color="black", fontcolor="black", label=<{Fittable1DModel|n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_models.Fittable1DModelTester" [color="black", fontcolor="black", label=<{Fittable1DModelTester|M : int<br ALIGN="LEFT"/>N : int<br ALIGN="LEFT"/>eval_error : float<br ALIGN="LEFT"/>fit_error : float<br ALIGN="LEFT"/>x : float<br ALIGN="LEFT"/>x1<br ALIGN="LEFT"/>x2<br ALIGN="LEFT"/>y : float<br ALIGN="LEFT"/>y1<br ALIGN="LEFT"/>y2<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_bounding_box1D(model_class, test_parameters)<br ALIGN="LEFT"/>test_bounding_box1D_peak(model_class, test_parameters)<br ALIGN="LEFT"/>test_deriv_1D(model_class, test_parameters, fitter)<br ALIGN="LEFT"/>test_eval1D(model_class, test_parameters)<br ALIGN="LEFT"/>test_fitter1D(model_class, test_parameters, fitter)<br ALIGN="LEFT"/>test_input1D(model_class, test_parameters)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.core.Fittable2DModel" [color="black", fontcolor="black", label=<{Fittable2DModel|n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_models.Fittable2DModelTester" [color="black", fontcolor="black", label=<{Fittable2DModelTester|M : int<br ALIGN="LEFT"/>N : int<br ALIGN="LEFT"/>eval_error : float<br ALIGN="LEFT"/>fit_error : float<br ALIGN="LEFT"/>x : float<br ALIGN="LEFT"/>x1<br ALIGN="LEFT"/>x2<br ALIGN="LEFT"/>y : float<br ALIGN="LEFT"/>y1<br ALIGN="LEFT"/>y2<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_bounding_box2D(model_class, test_parameters)<br ALIGN="LEFT"/>test_bounding_box2D_peak(model_class, test_parameters)<br ALIGN="LEFT"/>test_deriv_2D(model_class, test_parameters, fitter)<br ALIGN="LEFT"/>test_eval2D(model_class, test_parameters)<br ALIGN="LEFT"/>test_fitter2D(model_class, test_parameters, fitter)<br ALIGN="LEFT"/>test_input2D(model_class, test_parameters)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.core.FittableModel" [color="black", fontcolor="black", label=<{FittableModel|col_fit_deriv : bool<br ALIGN="LEFT"/>fit_deriv : NoneType<br ALIGN="LEFT"/>fittable : bool<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.fitting.Fitter" [color="black", fontcolor="black", label=<{Fitter|supported_constraints : list<br ALIGN="LEFT"/>|objective_function(fps)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.fitting.FittingWithOutlierRemoval" [color="black", fontcolor="black", label=<{FittingWithOutlierRemoval|fit_info : dict<br ALIGN="LEFT"/>fitter<br ALIGN="LEFT"/>niter : int<br ALIGN="LEFT"/>outlier_func<br ALIGN="LEFT"/>outlier_kwargs : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.tests.command.FixRemoteDataOption" [color="black", fontcolor="black", label=<{FixRemoteDataOption|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidth" [color="black", fontcolor="black", label=<{FixedWidth|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthData" [color="black", fontcolor="black", label=<{FixedWidthData|header_rows : NoneType, list<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>start_line : NoneType<br ALIGN="LEFT"/>|write(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthHeader" [color="black", fontcolor="black", label=<{FixedWidthHeader|col_ends : NoneType<br ALIGN="LEFT"/>col_starts : NoneType, list<br ALIGN="LEFT"/>header_rows : NoneType, list<br ALIGN="LEFT"/>names<br ALIGN="LEFT"/>position_line : NoneType<br ALIGN="LEFT"/>set_of_position_line_characters : set<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>|get_cols(lines)<br ALIGN="LEFT"/>get_fixedwidth_params(line)<br ALIGN="LEFT"/>get_line(lines, index)<br ALIGN="LEFT"/><I>write</I>(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthHeaderSplitter" [color="black", fontcolor="black", label=<{FixedWidthHeaderSplitter|delimiter : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthNoHeader" [color="black", fontcolor="black", label=<{FixedWidthNoHeader|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthNoHeaderData" [color="black", fontcolor="black", label=<{FixedWidthNoHeaderData|start_line : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthNoHeaderHeader" [color="black", fontcolor="black", label=<{FixedWidthNoHeaderHeader|start_line : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthSplitter" [color="black", fontcolor="black", label=<{FixedWidthSplitter|bookend : bool<br ALIGN="LEFT"/>delimiter : str<br ALIGN="LEFT"/>delimiter_pad : str<br ALIGN="LEFT"/>|join(vals, widths)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthTwoLine" [color="black", fontcolor="black", label=<{FixedWidthTwoLine|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthTwoLineData" [color="black", fontcolor="black", label=<{FixedWidthTwoLineData|splitter_class<br ALIGN="LEFT"/>start_line<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthTwoLineDataSplitter" [color="black", fontcolor="black", label=<{FixedWidthTwoLineDataSplitter|delimiter : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthTwoLineHeader" [color="black", fontcolor="black", label=<{FixedWidthTwoLineHeader|position_char : str<br ALIGN="LEFT"/>position_line : NoneType<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.flag_collection.FlagCollection" [color="black", fontcolor="black", label=<{FlagCollection|shape<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.core.FlatCosmologyMixin" [color="black", fontcolor="black", label=<{FlatCosmologyMixin|is_flat<br ALIGN="LEFT"/>nonflat<br ALIGN="LEFT"/>|clone(): Self<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_core.FlatCosmologyMixinTest" [color="black", fontcolor="black", label=<{FlatCosmologyMixinTest|<br ALIGN="LEFT"/>|<I>test_clone_to_nonflat_change_param</I>(cosmo)<br ALIGN="LEFT"/>test_clone_to_nonflat_equivalent(cosmo)<br ALIGN="LEFT"/>test_is_equivalent(cosmo)<br ALIGN="LEFT"/>test_is_flat(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_nonflat(cosmo)<br ALIGN="LEFT"/>test_nonflat_class_(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_subclassing(cosmo_cls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.base.FlatFLRWMixin" [color="black", fontcolor="black", label=<{FlatFLRWMixin|Ode0<br ALIGN="LEFT"/>Otot0<br ALIGN="LEFT"/>nonflat<br ALIGN="LEFT"/>|Otot(z)<br ALIGN="LEFT"/>clone(): Self<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_base.FlatFLRWMixinTest" [color="black", fontcolor="black", label=<{FlatFLRWMixinTest|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_Ok0(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_Otot(cosmo, z)<br ALIGN="LEFT"/>test_Otot0(cosmo)<br ALIGN="LEFT"/>test_clone_to_nonflat_change_param(cosmo)<br ALIGN="LEFT"/>test_init(cosmo_cls)<br ALIGN="LEFT"/>test_init_subclass(cosmo_cls)<br ALIGN="LEFT"/>test_is_equivalent(cosmo, nonflatcosmo)<br ALIGN="LEFT"/>test_redshift_method_bad_input(cosmo, method, z, exc)<br ALIGN="LEFT"/>test_repr(cosmo_cls, cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.lambdacdm.FlatLambdaCDM" [color="black", fontcolor="black", label=<{FlatLambdaCDM|<br ALIGN="LEFT"/>|efunc(z)<br ALIGN="LEFT"/>inv_efunc(z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_core.test__nonflatclass__multiple_nonflat_inheritance.FlatSubCosmology" [color="black", fontcolor="black", label=<{FlatSubCosmology|nonflat<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.w0wacdm.Flatw0waCDM" [color="black", fontcolor="black", label=<{Flatw0waCDM|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.w0wzcdm.Flatw0wzCDM" [color="black", fontcolor="black", label=<{Flatw0wzCDM|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.w0cdm.FlatwCDM" [color="black", fontcolor="black", label=<{FlatwCDM|<br ALIGN="LEFT"/>|efunc(z)<br ALIGN="LEFT"/>inv_efunc(z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.wpwazpcdm.FlatwpwaCDM" [color="black", fontcolor="black", label=<{FlatwpwaCDM|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.converters.Float" [color="black", fontcolor="black", label=<{Float|format : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.converters.FloatComplex" [color="black", fontcolor="black", label=<{FloatComplex|format : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_distance.test_distance_parallax_angle_like.FloatMas" [color="black", fontcolor="black", label=<{FloatMas|unit<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.FloatType" [color="black", fontcolor="black", label=<{FloatType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.converters.FloatingPoint" [color="black", fontcolor="black", label=<{FloatingPoint|default<br ALIGN="LEFT"/>filter_array<br ALIGN="LEFT"/>nan : ndarray<br ALIGN="LEFT"/>output_format<br ALIGN="LEFT"/>parse<br ALIGN="LEFT"/>|binoutput(value, mask)<br ALIGN="LEFT"/>output(value, mask)<br ALIGN="LEFT"/>supports_empty_values(config)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_format.FormatStringPair" [color="black", fontcolor="black", label=<{FormatStringPair|format : str<br ALIGN="LEFT"/>string : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame1" [color="black", fontcolor="black", label=<{Frame1|attr1<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame2" [color="black", fontcolor="black", label=<{Frame2|attr2<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame3" [color="black", fontcolor="black", label=<{Frame3|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame4" [color="black", fontcolor="black", label=<{Frame4|attr1<br ALIGN="LEFT"/>attr2<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame5" [color="black", fontcolor="black", label=<{Frame5|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_exceptions.FrameDescription" [color="black", fontcolor="black", label=<{FrameDescription|description : str<br ALIGN="LEFT"/>frame<br ALIGN="LEFT"/>pytest_id : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_equivalent_frame_coordinateattribute.FrameWithCoordinateAttribute" [color="black", fontcolor="black", label=<{FrameWithCoordinateAttribute|coord_attr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_coordinateattribute_transformation.FrameWithCoordinateAttribute" [color="black", fontcolor="black", label=<{FrameWithCoordinateAttribute|coord_attr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_equivalent_frame_locationattribute.FrameWithLocationAttribute" [color="black", fontcolor="black", label=<{FrameWithLocationAttribute|loc_attr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.quantity_helper.function_helpers.FunctionAssigner" [color="black", fontcolor="black", label=<{FunctionAssigner|assignments<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.function.mixin.FunctionMixin" [color="black", fontcolor="black", label=<{FunctionMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.function.core.FunctionQuantity" [color="black", fontcolor="black", label=<{FunctionQuantity|cgs<br ALIGN="LEFT"/>physical<br ALIGN="LEFT"/>si<br ALIGN="LEFT"/>|clip(a_min, a_max, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>decompose(bases: Collection[UnitBase]): Self<br ALIGN="LEFT"/>max(axis, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.transformations.function.FunctionTransform" [color="black", fontcolor="black", label=<{FunctionTransform|func<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.transformations.function.FunctionTransformWithFiniteDifference" [color="black", fontcolor="black", label=<{FunctionTransformWithFiniteDifference|finite_difference_dt<br ALIGN="LEFT"/>finite_difference_frameattr_name<br ALIGN="LEFT"/>symmetric_finite_difference : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.function.core.FunctionUnitBase" [color="black", fontcolor="black", label=<{FunctionUnitBase|cgs<br ALIGN="LEFT"/>equivalencies<br ALIGN="LEFT"/>function_unit<br ALIGN="LEFT"/>physical_type<br ALIGN="LEFT"/>physical_unit<br ALIGN="LEFT"/>si<br ALIGN="LEFT"/>|decompose(bases: Collection[UnitBase]): Self<br ALIGN="LEFT"/><I>from_physical</I>(x)<br ALIGN="LEFT"/>is_equivalent(other, equivalencies)<br ALIGN="LEFT"/>is_unity()<br ALIGN="LEFT"/>to(other, value, equivalencies)<br ALIGN="LEFT"/><I>to_physical</I>(x)<br ALIGN="LEFT"/>to_string(format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.gcrs.GCRS" [color="black", fontcolor="black", label=<{GCRS|obsgeoloc<br ALIGN="LEFT"/>obsgeovel<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>representation_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.representation.geodetic.GRS80GeodeticRepresentation" [color="black", fontcolor="black", label=<{GRS80GeodeticRepresentation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.galactic.Galactic" [color="black", fontcolor="black", label=<{Galactic|default_differential<br ALIGN="LEFT"/>default_representation<br ALIGN="LEFT"/>frame_specific_representation_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_finite_difference_velocities.test_faux_fk5_galactic.Galactic2" [color="black", fontcolor="black", label=<{Galactic2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.lsr.GalacticLSR" [color="black", fontcolor="black", label=<{GalacticLSR|default_differential<br ALIGN="LEFT"/>default_representation<br ALIGN="LEFT"/>frame_specific_representation_info : dict<br ALIGN="LEFT"/>v_bary<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.galactocentric.Galactocentric" [color="black", fontcolor="black", label=<{Galactocentric|default_differential<br ALIGN="LEFT"/>default_representation<br ALIGN="LEFT"/>frame_attribute_references<br ALIGN="LEFT"/>galcen_coord<br ALIGN="LEFT"/>galcen_distance<br ALIGN="LEFT"/>galcen_v_sun<br ALIGN="LEFT"/>roll<br ALIGN="LEFT"/>z_sun<br ALIGN="LEFT"/>|get_roll0()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Gaussian1D" [color="black", fontcolor="black", label=<{Gaussian1D|amplitude<br ALIGN="LEFT"/>bounding_box : tuple<br ALIGN="LEFT"/>fwhm<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>mean<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>parameters : list<br ALIGN="LEFT"/>stddev<br ALIGN="LEFT"/>|bounding_box(factor)<br ALIGN="LEFT"/>evaluate(x, amplitude, mean, stddev)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, mean, stddev)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.Gaussian1DKernel" [color="black", fontcolor="black", label=<{Gaussian1DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Gaussian2D" [color="black", fontcolor="black", label=<{Gaussian2D|amplitude<br ALIGN="LEFT"/>bounding_box : tuple<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>inputs : tuple<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>outputs : tuple<br ALIGN="LEFT"/>theta<br ALIGN="LEFT"/>x_fwhm<br ALIGN="LEFT"/>x_mean<br ALIGN="LEFT"/>x_stddev<br ALIGN="LEFT"/>y_fwhm<br ALIGN="LEFT"/>y_mean<br ALIGN="LEFT"/>y_stddev<br ALIGN="LEFT"/>|bounding_box(factor)<br ALIGN="LEFT"/>evaluate(x, y, amplitude, x_mean, y_mean, x_stddev, y_stddev, theta)<br ALIGN="LEFT"/>fit_deriv(x, y, amplitude, x_mean, y_mean, x_stddev, y_stddev, theta)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.Gaussian2DKernel" [color="black", fontcolor="black", label=<{Gaussian2DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.GeneralSersic2D" [color="black", fontcolor="black", label=<{GeneralSersic2D|amplitude<br ALIGN="LEFT"/>c<br ALIGN="LEFT"/>ellip<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>r_eff<br ALIGN="LEFT"/>theta<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>y_0<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.format.generic.Generic" [color="black", fontcolor="black", label=<{Generic|<br ALIGN="LEFT"/>|format_exponential_notation(val: UnitScale \| np.number, format_spec: str): str<br ALIGN="LEFT"/>parse(s: str, debug: bool): UnitBase<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.baseframe.GenericFrame" [color="black", fontcolor="black", label=<{GenericFrame|frame_attributes : dict<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.ecliptic.GeocentricMeanEcliptic" [color="black", fontcolor="black", label=<{GeocentricMeanEcliptic|equinox<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.ecliptic.GeocentricTrueEcliptic" [color="black", fontcolor="black", label=<{GeocentricTrueEcliptic|equinox<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.earth.GeodeticLocation" [color="black", fontcolor="black", label=<{GeodeticLocation|height<br ALIGN="LEFT"/>lat<br ALIGN="LEFT"/>lon<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.console.Getch" [color="black", fontcolor="black", label=<{Getch|impl<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.Grammar" [color="black", fontcolor="black", label=<{Grammar|First : dict<br ALIGN="LEFT"/>Follow : dict<br ALIGN="LEFT"/>Nonterminals : dict<br ALIGN="LEFT"/>Precedence : dict<br ALIGN="LEFT"/>Prodmap : dict<br ALIGN="LEFT"/>Prodnames : dict<br ALIGN="LEFT"/>Productions : list<br ALIGN="LEFT"/>Start : NoneType<br ALIGN="LEFT"/>Terminals : dict<br ALIGN="LEFT"/>UsedPrecedence : set<br ALIGN="LEFT"/>|add_production(prodname, syms, func, file, line)<br ALIGN="LEFT"/>build_lritems()<br ALIGN="LEFT"/>compute_first()<br ALIGN="LEFT"/>compute_follow(start)<br ALIGN="LEFT"/>find_unreachable()<br ALIGN="LEFT"/>infinite_cycles()<br ALIGN="LEFT"/>set_precedence(term, assoc, level)<br ALIGN="LEFT"/>set_start(start)<br ALIGN="LEFT"/>undefined_symbols()<br ALIGN="LEFT"/>unused_precedence()<br ALIGN="LEFT"/>unused_rules()<br ALIGN="LEFT"/>unused_terminals()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.GrammarError" [color="black", fontcolor="red", label=<{GrammarError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.groups.Group" [color="black", fontcolor="black", label=<{Group|data<br ALIGN="LEFT"/>parnames<br ALIGN="LEFT"/>|par(parname)<br ALIGN="LEFT"/>setpar(parname, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tree.Group" [color="black", fontcolor="black", label=<{Group|ID<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>entries<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>ref<br ALIGN="LEFT"/>ucd : NoneType<br ALIGN="LEFT"/>utype : NoneType<br ALIGN="LEFT"/>|iter_fields_and_params()<br ALIGN="LEFT"/>iter_groups()<br ALIGN="LEFT"/>parse(iterator, config)<br ALIGN="LEFT"/>to_xml(w)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.groups.GroupData" [color="black", fontcolor="black", label=<{GroupData|data<br ALIGN="LEFT"/>parnames<br ALIGN="LEFT"/>|par(parname)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.groups.GroupsHDU" [color="black", fontcolor="black", label=<{GroupsHDU|columns<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>is_image<br ALIGN="LEFT"/>parnames<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>|match_header(header)<br ALIGN="LEFT"/>update_header()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed._codecs.Gzip1" [color="black", fontcolor="black", label=<{Gzip1|codec_id : str<br ALIGN="LEFT"/>|decode(buf)<br ALIGN="LEFT"/>encode(buf)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed._codecs.Gzip2" [color="black", fontcolor="black", label=<{Gzip2|codec_id : str<br ALIGN="LEFT"/>itemsize<br ALIGN="LEFT"/>|decode(buf)<br ALIGN="LEFT"/>encode(buf)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_transformations.test_impose_finite_difference_dt.H1" [color="black", fontcolor="black", label=<{H1|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_transformations.test_impose_finite_difference_dt.H2" [color="black", fontcolor="black", label=<{H2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_transformations.test_impose_finite_difference_dt.H3" [color="black", fontcolor="black", label=<{H3|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.hadec.HADec" [color="black", fontcolor="black", label=<{HADec|default_differential<br ALIGN="LEFT"/>default_representation<br ALIGN="LEFT"/>frame_specific_representation_info : dict<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>obswl<br ALIGN="LEFT"/>pressure<br ALIGN="LEFT"/>relative_humidity<br ALIGN="LEFT"/>temperature<br ALIGN="LEFT"/>|represent_as(base, s, in_frame_units)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_base.FlatFLRWMixinTest.test_init_subclass.HASOde0SubClass" [color="black", fontcolor="black", label=<{HASOde0SubClass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.hcrs.HCRS" [color="black", fontcolor="black", label=<{HCRS|obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed._codecs.HCompress1" [color="black", fontcolor="black", label=<{HCompress1|bytepix<br ALIGN="LEFT"/>codec_id : str<br ALIGN="LEFT"/>nx<br ALIGN="LEFT"/>ny<br ALIGN="LEFT"/>scale<br ALIGN="LEFT"/>smooth<br ALIGN="LEFT"/>|decode(buf)<br ALIGN="LEFT"/>encode(buf)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.diff.HDUDiff" [color="black", fontcolor="black", label=<{HDUDiff|atol : float<br ALIGN="LEFT"/>diff_data : NoneType<br ALIGN="LEFT"/>diff_extension_types : tuple<br ALIGN="LEFT"/>diff_extlevels : tuple<br ALIGN="LEFT"/>diff_extnames : tuple<br ALIGN="LEFT"/>diff_extvers : tuple<br ALIGN="LEFT"/>diff_headers : NoneType<br ALIGN="LEFT"/>ignore_blank_cards : bool<br ALIGN="LEFT"/>ignore_blanks : bool<br ALIGN="LEFT"/>ignore_comments<br ALIGN="LEFT"/>ignore_fields<br ALIGN="LEFT"/>ignore_keywords<br ALIGN="LEFT"/>numdiffs : int<br ALIGN="LEFT"/>rtol : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.hdulist.HDUList" [color="black", fontcolor="black", label=<{HDUList|copy<br ALIGN="LEFT"/>data : NoneType, ndarray<br ALIGN="LEFT"/>header<br ALIGN="LEFT"/>name : int, str<br ALIGN="LEFT"/>ver : int<br ALIGN="LEFT"/>|append(hdu)<br ALIGN="LEFT"/>close(output_verify, verbose, closed)<br ALIGN="LEFT"/>fileinfo(index)<br ALIGN="LEFT"/>filename()<br ALIGN="LEFT"/>flush(output_verify, verbose)<br ALIGN="LEFT"/>fromfile(fileobj, mode, memmap, save_backup, cache, lazy_load_hdus, ignore_missing_simple)<br ALIGN="LEFT"/>fromstring(data)<br ALIGN="LEFT"/>index_of(key)<br ALIGN="LEFT"/>info(output)<br ALIGN="LEFT"/>insert(index, hdu)<br ALIGN="LEFT"/>pop(index)<br ALIGN="LEFT"/>readall()<br ALIGN="LEFT"/>update_extend()<br ALIGN="LEFT"/>writeto(fileobj, output_verify, overwrite, checksum)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.projections.HEALPix" [color="black", fontcolor="black", label=<{HEALPix|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.html.HTML" [color="black", fontcolor="black", label=<{HTML|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>html : dict<br ALIGN="LEFT"/>inputter_class<br ALIGN="LEFT"/>max_ndim : int<br ALIGN="LEFT"/>outputter<br ALIGN="LEFT"/>|fill_values(col, col_str_iters)<br ALIGN="LEFT"/>read(table)<br ALIGN="LEFT"/>write(table)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.html.HTMLData" [color="black", fontcolor="black", label=<{HTMLData|cols : list<br ALIGN="LEFT"/>fill_values : list<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>|end_line(lines)<br ALIGN="LEFT"/>start_line(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.html.HTMLHeader" [color="black", fontcolor="black", label=<{HTMLHeader|cols : list<br ALIGN="LEFT"/>names : list<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>|start_line(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.html.HTMLInputter" [color="black", fontcolor="black", label=<{HTMLInputter|html : dict<br ALIGN="LEFT"/>|process_lines(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.html.HTMLOutputter" [color="black", fontcolor="black", label=<{HTMLOutputter|default_converters : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.html.HTMLSplitter" [color="black", fontcolor="black", label=<{HTMLSplitter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.pandas.HTMLWithBackup" [color="black", fontcolor="black", label=<{HTMLWithBackup|backup_text<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.header.Header" [color="black", fontcolor="black", label=<{Header|cards<br ALIGN="LEFT"/>comments<br ALIGN="LEFT"/>data_size<br ALIGN="LEFT"/>data_size_padded<br ALIGN="LEFT"/>|add_blank(value, before, after)<br ALIGN="LEFT"/>add_comment(value, before, after)<br ALIGN="LEFT"/>add_history(value, before, after)<br ALIGN="LEFT"/>append(card, useblanks, bottom, end)<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>copy(strip)<br ALIGN="LEFT"/>count(keyword)<br ALIGN="LEFT"/>extend(cards, strip, unique, update, update_first, useblanks, bottom, end)<br ALIGN="LEFT"/>fromfile(fileobj, sep, endcard, padding)<br ALIGN="LEFT"/>fromkeys(iterable, value)<br ALIGN="LEFT"/>fromstring(data, sep)<br ALIGN="LEFT"/>fromtextfile(fileobj, endcard)<br ALIGN="LEFT"/>get(key, default)<br ALIGN="LEFT"/>index(keyword, start, stop)<br ALIGN="LEFT"/>insert(key, card, useblanks, after)<br ALIGN="LEFT"/>items()<br ALIGN="LEFT"/>keys()<br ALIGN="LEFT"/>pop()<br ALIGN="LEFT"/>popitem()<br ALIGN="LEFT"/>remove(keyword, ignore_missing, remove_all)<br ALIGN="LEFT"/>rename_keyword(oldkeyword, newkeyword, force)<br ALIGN="LEFT"/>set(keyword, value, comment, before, after)<br ALIGN="LEFT"/>setdefault(key, default)<br ALIGN="LEFT"/>strip()<br ALIGN="LEFT"/>tofile(fileobj, sep, endcard, padding, overwrite)<br ALIGN="LEFT"/>tostring(sep, endcard, padding)<br ALIGN="LEFT"/>totextfile(fileobj, endcard, overwrite)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.diff.HeaderDiff" [color="black", fontcolor="black", label=<{HeaderDiff|atol : float<br ALIGN="LEFT"/>common_keywords : list<br ALIGN="LEFT"/>diff_duplicate_keywords : dict<br ALIGN="LEFT"/>diff_keyword_comments : defaultdict<br ALIGN="LEFT"/>diff_keyword_count : tuple<br ALIGN="LEFT"/>diff_keyword_positions : tuple<br ALIGN="LEFT"/>diff_keyword_values : defaultdict<br ALIGN="LEFT"/>diff_keywords : tuple<br ALIGN="LEFT"/>ignore_blank_cards : bool<br ALIGN="LEFT"/>ignore_blanks : bool<br ALIGN="LEFT"/>ignore_comment_patterns : set<br ALIGN="LEFT"/>ignore_comments<br ALIGN="LEFT"/>ignore_keyword_patterns : set<br ALIGN="LEFT"/>ignore_keywords<br ALIGN="LEFT"/>rtol : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.scripts.fitsheader.HeaderFormatter" [color="black", fontcolor="black", label=<{HeaderFormatter|filename<br ALIGN="LEFT"/>verbose : bool<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>parse(extensions, keywords, compressed)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.ecliptic.HeliocentricEclipticIAU76" [color="black", fontcolor="black", label=<{HeliocentricEclipticIAU76|obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.ecliptic.HeliocentricMeanEcliptic" [color="black", fontcolor="black", label=<{HeliocentricMeanEcliptic|equinox<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.ecliptic.HeliocentricTrueEcliptic" [color="black", fontcolor="black", label=<{HeliocentricTrueEcliptic|equinox<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.polynomial.Hermite1D" [color="black", fontcolor="black", label=<{Hermite1D|n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>|clenshaw(x, coeffs)<br ALIGN="LEFT"/>evaluate(x)<br ALIGN="LEFT"/>fit_deriv(x)<br ALIGN="LEFT"/>prepare_inputs(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.polynomial.Hermite2D" [color="black", fontcolor="black", label=<{Hermite2D|<br ALIGN="LEFT"/>|fit_deriv(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_frame.HexagonalFrame" [color="black", fontcolor="black", label=<{HexagonalFrame|spine_names : str<br ALIGN="LEFT"/>|update_spines()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.high_level_api.HighLevelWCSMixin" [color="black", fontcolor="black", label=<{HighLevelWCSMixin|low_level_wcs<br ALIGN="LEFT"/>|pixel_to_world()<br ALIGN="LEFT"/>world_to_pixel()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.high_level_wcs_wrapper.HighLevelWCSWrapper" [color="black", fontcolor="black", label=<{HighLevelWCSWrapper|array_shape<br ALIGN="LEFT"/>axis_correlation_matrix<br ALIGN="LEFT"/>low_level_wcs<br ALIGN="LEFT"/>pixel_bounds<br ALIGN="LEFT"/>pixel_n_dim<br ALIGN="LEFT"/>world_axis_physical_types<br ALIGN="LEFT"/>world_axis_units<br ALIGN="LEFT"/>world_n_dim<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.stretch.HistEqStretch" [color="black", fontcolor="black", label=<{HistEqStretch|data<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>values : ndarray<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.collections.HomogeneousList" [color="black", fontcolor="black", label=<{HomogeneousList|<br ALIGN="LEFT"/>|append(x)<br ALIGN="LEFT"/>extend(x)<br ALIGN="LEFT"/>insert(i, x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.calculation.HumanError" [color="black", fontcolor="red", label=<{HumanError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.constants.iau2012.IAU2012" [color="black", fontcolor="black", label=<{IAU2012|default_reference : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.constants.iau2015.IAU2015" [color="black", fontcolor="black", label=<{IAU2015|default_reference : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.tests.test_utils.test_body_to_wcs_frame.IAUMARS2000BodyFrame" [color="black", fontcolor="black", label=<{IAUMARS2000BodyFrame|name : str<br ALIGN="LEFT"/>representation_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.tests.test_utils.test_body_to_wcs_frame.IAUMARS2000BodycentricRepresentation" [color="black", fontcolor="black", label=<{IAUMARS2000BodycentricRepresentation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations.setup_class.IAUMARS2000BodycentricRepresentation" [color="black", fontcolor="black", label=<{IAUMARS2000BodycentricRepresentation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.tests.test_utils.test_body_to_wcs_frame.IAUMARS2000GeodeticRepresentation" [color="black", fontcolor="black", label=<{IAUMARS2000GeodeticRepresentation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations.setup_class.IAUMARS2000GeodeticRepresentation" [color="black", fontcolor="black", label=<{IAUMARS2000GeodeticRepresentation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.tests.test_utils.test_body_to_wcs_frame.IAUMARSSphereFrame" [color="black", fontcolor="black", label=<{IAUMARSSphereFrame|name : str<br ALIGN="LEFT"/>representation_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.icrs.ICRS" [color="black", fontcolor="black", label=<{ICRS|blahblah : int<br ALIGN="LEFT"/>distance<br ALIGN="LEFT"/>ra : int<br ALIGN="LEFT"/>representation_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.test_subclass_representation.ICRSWrap180" [color="black", fontcolor="black", label=<{ICRSWrap180|default_representation<br ALIGN="LEFT"/>frame_specific_representation_info<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.irafutil.IDB" [color="black", fontcolor="black", label=<{IDB|numrecords<br ALIGN="LEFT"/>records<br ALIGN="LEFT"/>|aslist(dtb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.iers.iers.IERS" [color="black", fontcolor="black", label=<{IERS|iers_table : NoneType<br ALIGN="LEFT"/>time_now<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>dcip_source(i)<br ALIGN="LEFT"/>dcip_xy(jd1, jd2, return_status)<br ALIGN="LEFT"/>mjd_utc(jd1, jd2)<br ALIGN="LEFT"/>open(file, cache)<br ALIGN="LEFT"/>pm_source(i)<br ALIGN="LEFT"/>pm_xy(jd1, jd2, return_status)<br ALIGN="LEFT"/>ut1_utc(jd1, jd2, return_status)<br ALIGN="LEFT"/>ut1_utc_source(i)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.iers.iers.IERSDegradedAccuracyWarning" [color="black", fontcolor="red", label=<{IERSDegradedAccuracyWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.iers.iers.IERSRangeError" [color="black", fontcolor="red", label=<{IERSRangeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.iers.iers.IERSStaleWarning" [color="black", fontcolor="red", label=<{IERSStaleWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.iers.iers.IERSWarning" [color="black", fontcolor="red", label=<{IERSWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.iers.iers.IERS_A" [color="black", fontcolor="black", label=<{IERS_A|iers_table : NoneType<br ALIGN="LEFT"/>|dcip_source(i)<br ALIGN="LEFT"/>pm_source(i)<br ALIGN="LEFT"/>read(file: str \| os.PathLike[str] \| None, readme: str \| os.PathLike[str] \| None): Self<br ALIGN="LEFT"/>ut1_utc_source(i)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.iers.iers.IERS_Auto" [color="black", fontcolor="black", label=<{IERS_Auto|iers_table : NoneType<br ALIGN="LEFT"/>|open()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.iers.iers.IERS_B" [color="black", fontcolor="black", label=<{IERS_B|iers_table : NoneType<br ALIGN="LEFT"/>|dcip_source(i)<br ALIGN="LEFT"/>pm_source(i)<br ALIGN="LEFT"/>read(file: str \| os.PathLike[str] \| None, readme: str \| os.PathLike[str] \| None, data_start: int): Self<br ALIGN="LEFT"/>ut1_utc_source(i)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.base.IODirectTestBase" [color="black", fontcolor="black", label=<{IODirectTestBase|<br ALIGN="LEFT"/>|cosmo(request)<br ALIGN="LEFT"/>cosmo_cls(cosmo)<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.base.IORegistryError" [color="black", fontcolor="red", label=<{IORegistryError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.base.IOTestBase" [color="black", fontcolor="black", label=<{IOTestBase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.IOWarning" [color="black", fontcolor="red", label=<{IOWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.itrs.ITRS" [color="black", fontcolor="black", label=<{ITRS|default_differential<br ALIGN="LEFT"/>default_representation<br ALIGN="LEFT"/>earth_location<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.irafutil.IdentifyRecord" [color="black", fontcolor="black", label=<{IdentifyRecord|coeff<br ALIGN="LEFT"/>modelname<br ALIGN="LEFT"/>mrange : list<br ALIGN="LEFT"/>nterms<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y : int<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|get_coeff()<br ALIGN="LEFT"/>get_model_name()<br ALIGN="LEFT"/>get_nterms()<br ALIGN="LEFT"/>get_range()<br ALIGN="LEFT"/>get_ydata()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.mappings.Identity" [color="black", fontcolor="black", label=<{Identity|inverse<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.angles.errors.IllegalHourError" [color="black", fontcolor="red", label=<{IllegalHourError|hour<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.angles.errors.IllegalHourWarning" [color="black", fontcolor="red", label=<{IllegalHourWarning|alternativeactionstr : NoneType<br ALIGN="LEFT"/>hour<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.angles.errors.IllegalMinuteError" [color="black", fontcolor="red", label=<{IllegalMinuteError|minute<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.angles.errors.IllegalMinuteWarning" [color="black", fontcolor="red", label=<{IllegalMinuteWarning|alternativeactionstr : NoneType<br ALIGN="LEFT"/>minute<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.angles.errors.IllegalSecondError" [color="black", fontcolor="red", label=<{IllegalSecondError|second<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.angles.errors.IllegalSecondWarning" [color="black", fontcolor="red", label=<{IllegalSecondWarning|alternativeactionstr : NoneType<br ALIGN="LEFT"/>second<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.diff.ImageDataDiff" [color="black", fontcolor="black", label=<{ImageDataDiff|a : NoneType<br ALIGN="LEFT"/>atol : float<br ALIGN="LEFT"/>b : NoneType<br ALIGN="LEFT"/>diff_dimensions : tuple<br ALIGN="LEFT"/>diff_pixels : list<br ALIGN="LEFT"/>diff_ratio : int<br ALIGN="LEFT"/>diff_total : int<br ALIGN="LEFT"/>numdiffs : int<br ALIGN="LEFT"/>rtol : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.image.ImageHDU" [color="black", fontcolor="black", label=<{ImageHDU|data<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>ver : int<br ALIGN="LEFT"/>|match_header(header)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.mpl_normalize.ImageNormalize" [color="black", fontcolor="black", label=<{ImageNormalize|clip : bool<br ALIGN="LEFT"/>interval : BaseInterval \| None<br ALIGN="LEFT"/>invalid : float \| None<br ALIGN="LEFT"/>inverse_stretch<br ALIGN="LEFT"/>stretch<br ALIGN="LEFT"/>vmax : float \| None<br ALIGN="LEFT"/>vmin : float \| None<br ALIGN="LEFT"/>|inverse(values, invalid)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.shapes.IncompatibleShapeError" [color="black", fontcolor="red", label=<{IncompatibleShapeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.nduncertainty.IncompatibleUncertaintiesException" [color="black", fontcolor="red", label=<{IncompatibleUncertaintiesException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.InconsistentTableError" [color="black", fontcolor="red", label=<{InconsistentTableError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.index.Index" [color="black", fontcolor="black", label=<{Index|columns : list<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>engine : NoneType<br ALIGN="LEFT"/>|col_position(col_name)<br ALIGN="LEFT"/>find(key)<br ALIGN="LEFT"/>get_row_specifier(row_specifier)<br ALIGN="LEFT"/>insert_row(pos, vals, columns)<br ALIGN="LEFT"/>range(lower, upper, bounds)<br ALIGN="LEFT"/>reload()<br ALIGN="LEFT"/>remove_row(row, reorder)<br ALIGN="LEFT"/>remove_rows(row_specifier)<br ALIGN="LEFT"/>replace(row, col_name, val)<br ALIGN="LEFT"/>replace_col(prev_col, new_col)<br ALIGN="LEFT"/>replace_rows(col_slice)<br ALIGN="LEFT"/>same_prefix(key)<br ALIGN="LEFT"/>same_prefix_range(lower, upper, bounds)<br ALIGN="LEFT"/>sort()<br ALIGN="LEFT"/>sorted_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestPandas.test_to_pandas_index.IndexedTable" [color="black", fontcolor="black", label=<{IndexedTable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree.Info" [color="black", fontcolor="black", label=<{Info|ID<br ALIGN="LEFT"/>content<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>ref<br ALIGN="LEFT"/>ucd : NoneType<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>utype : NoneType<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>xtype : NoneType<br ALIGN="LEFT"/>|to_xml(w)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.data_info.InfoAttribute" [color="black", fontcolor="black", label=<{InfoAttribute|attr<br ALIGN="LEFT"/>default : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_core.CosmologyTest.test_init_subclass.InitSubclassTest" [color="black", fontcolor="black", label=<{InitSubclassTest|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.parameters.InputParameterError" [color="black", fontcolor="red", label=<{InputParameterError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.converters.Int" [color="black", fontcolor="black", label=<{Int|bit_size : str<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>val_range : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.IntType" [color="black", fontcolor="black", label=<{IntType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.converters.Integer" [color="black", fontcolor="black", label=<{Integer|default : int<br ALIGN="LEFT"/>|binoutput(value, mask)<br ALIGN="LEFT"/>filter_array(value, mask)<br ALIGN="LEFT"/>output(value, mask)<br ALIGN="LEFT"/>parse(value, config, pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.InterpolationEngine" [color="black", fontcolor="black", label=<{InterpolationEngine|section<br ALIGN="LEFT"/>|interpolate(key, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.InterpolationError" [color="black", fontcolor="red", label=<{InterpolationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.InterpolationLoopError" [color="black", fontcolor="red", label=<{InterpolationLoopError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.bitmask.InvalidBitFlag" [color="black", fontcolor="red", label=<{InvalidBitFlag|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.config.configuration.InvalidConfigurationItemWarning" [color="black", fontcolor="red", label=<{InvalidConfigurationItemWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations.test_subclass_bad_ellipsoid.InvalidCustomEllipsoid" [color="black", fontcolor="black", label=<{InvalidCustomEllipsoid|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.tests.test_high_level_wcs_wrapper.test_wrapper_invalid.InvalidCustomLowLevelWCS" [color="black", fontcolor="black", label=<{InvalidCustomLowLevelWCS|world_axis_object_classes<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.ecsv.InvalidEcsvDatatypeWarning" [color="black", fontcolor="red", label=<{InvalidEcsvDatatypeWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.base.InvalidHDUException" [color="black", fontcolor="red", label=<{InvalidHDUException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.tests.test_high_level_api.InvalidWCSQuantity" [color="black", fontcolor="black", label=<{InvalidWCSQuantity|world_axis_object_components<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.InvariantMaskTestSetup" [color="black", fontcolor="black", label=<{InvariantMaskTestSetup|<br ALIGN="LEFT"/>|check(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" [color="black", fontcolor="black", label=<{InvariantUnitTestSetup|<br ALIGN="LEFT"/>|check(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.polynomial.InverseSIP" [color="black", fontcolor="black", label=<{InverseSIP|n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>sip1d_ap<br ALIGN="LEFT"/>sip1d_bp<br ALIGN="LEFT"/>|evaluate(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.nduncertainty.InverseVariance" [color="black", fontcolor="black", label=<{InverseVariance|supports_correlated<br ALIGN="LEFT"/>uncertainty_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.stretch.InvertedContrastBiasStretch" [color="black", fontcolor="black", label=<{InvertedContrastBiasStretch|bias<br ALIGN="LEFT"/>contrast<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.stretch.InvertedHistEqStretch" [color="black", fontcolor="black", label=<{InvertedHistEqStretch|data<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>values : ndarray<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.stretch.InvertedLogStretch" [color="black", fontcolor="black", label=<{InvertedLogStretch|a<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.stretch.InvertedPowerDistStretch" [color="black", fontcolor="black", label=<{InvertedPowerDistStretch|a : float<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.ipac.Ipac" [color="black", fontcolor="black", label=<{Ipac|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>|write(table)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.ipac.IpacData" [color="black", fontcolor="black", label=<{IpacData|cols : list<br ALIGN="LEFT"/>comment : str<br ALIGN="LEFT"/>fill_values : list<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>start_line : int<br ALIGN="LEFT"/>|write(lines, widths, vals_list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.ipac.IpacDataSplitter" [color="black", fontcolor="black", label=<{IpacDataSplitter|bookend : bool<br ALIGN="LEFT"/>delimiter : str<br ALIGN="LEFT"/>delimiter_pad : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.ipac.IpacFormatError" [color="black", fontcolor="red", label=<{IpacFormatError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.ipac.IpacFormatErrorDBMS" [color="black", fontcolor="red", label=<{IpacFormatErrorDBMS|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.ipac.IpacHeader" [color="black", fontcolor="black", label=<{IpacHeader|DBMS : bool<br ALIGN="LEFT"/>col_type_list : tuple<br ALIGN="LEFT"/>cols : list<br ALIGN="LEFT"/>definition : str<br ALIGN="LEFT"/>ipac_definition : str<br ALIGN="LEFT"/>names<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>start_line : NoneType<br ALIGN="LEFT"/>|get_col_type(col)<br ALIGN="LEFT"/>get_cols(lines)<br ALIGN="LEFT"/>process_lines(lines)<br ALIGN="LEFT"/>str_vals()<br ALIGN="LEFT"/>update_meta(lines, meta)<br ALIGN="LEFT"/>write(lines, widths)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.ipac.IpacHeaderSplitter" [color="black", fontcolor="black", label=<{IpacHeaderSplitter|col_ends : NoneType<br ALIGN="LEFT"/>col_starts : NoneType<br ALIGN="LEFT"/>comment : str<br ALIGN="LEFT"/>delimiter : str<br ALIGN="LEFT"/>delimiter_pad : str<br ALIGN="LEFT"/>process_line : NoneType<br ALIGN="LEFT"/>process_val : NoneType<br ALIGN="LEFT"/>skipinitialspace : bool<br ALIGN="LEFT"/>write_comment : str<br ALIGN="LEFT"/>|join(vals, widths)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.function.mixin.IrreducibleFunctionUnit" [color="black", fontcolor="black", label=<{IrreducibleFunctionUnit|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.core.IrreducibleUnit" [color="black", fontcolor="black", label=<{IrreducibleUnit|represents<br ALIGN="LEFT"/>|decompose(bases: Collection[UnitBase]): UnitBase<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.jsviewer.JSViewer" [color="black", fontcolor="black", label=<{JSViewer|css_urls<br ALIGN="LEFT"/>display_length : int<br ALIGN="LEFT"/>display_length_menu : list<br ALIGN="LEFT"/>jquery_urls<br ALIGN="LEFT"/>|html_js(table_id, sort_columns)<br ALIGN="LEFT"/>ipynb(table_id, css, sort_columns)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.fitting.JointFitter" [color="black", fontcolor="black", label=<{JointFitter|fitparams : list<br ALIGN="LEFT"/>initvals : list<br ALIGN="LEFT"/>jointparams<br ALIGN="LEFT"/>modeldims<br ALIGN="LEFT"/>models : list<br ALIGN="LEFT"/>ndim<br ALIGN="LEFT"/>|model_to_fit_params()<br ALIGN="LEFT"/>objective_function(fps)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.misc.JsonCustomEncoder" [color="black", fontcolor="black", label=<{JsonCustomEncoder|<br ALIGN="LEFT"/>|default(obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.core.Kernel" [color="black", fontcolor="black", label=<{Kernel|array<br ALIGN="LEFT"/>center<br ALIGN="LEFT"/>dimension<br ALIGN="LEFT"/>is_bool<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>separable<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>truncation<br ALIGN="LEFT"/>|normalize(mode)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.core.Kernel1D" [color="black", fontcolor="black", label=<{Kernel1D|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.convolution.core.Kernel2D" [color="black", fontcolor="black", label=<{Kernel2D|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.convolution.utils.KernelArithmeticError" [color="black", fontcolor="red", label=<{KernelArithmeticError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.convolution.utils.KernelError" [color="black", fontcolor="red", label=<{KernelError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.convolution.utils.KernelSizeError" [color="black", fontcolor="red", label=<{KernelSizeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.KingProjectedAnalytic1D" [color="black", fontcolor="black", label=<{KingProjectedAnalytic1D|amplitude<br ALIGN="LEFT"/>bounding_box<br ALIGN="LEFT"/>concentration<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>r_core<br ALIGN="LEFT"/>r_tide<br ALIGN="LEFT"/>|evaluate(x, amplitude, r_core, r_tide)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, r_core, r_tide)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.LALRError" [color="black", fontcolor="red", label=<{LALRError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.fitting.LMLSQFitter" [color="black", fontcolor="black", label=<{LMLSQFitter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.LRGeneratedTable" [color="black", fontcolor="black", label=<{LRGeneratedTable|conflicts : list<br ALIGN="LEFT"/>grammar<br ALIGN="LEFT"/>log : NoneType<br ALIGN="LEFT"/>lr0_cidhash : dict<br ALIGN="LEFT"/>lr_action : dict<br ALIGN="LEFT"/>lr_goto : dict<br ALIGN="LEFT"/>lr_goto_cache : dict<br ALIGN="LEFT"/>lr_method : str<br ALIGN="LEFT"/>lr_productions<br ALIGN="LEFT"/>rr_conflict : int<br ALIGN="LEFT"/>rr_conflicts : list<br ALIGN="LEFT"/>sr_conflict : int<br ALIGN="LEFT"/>sr_conflicts : list<br ALIGN="LEFT"/>|add_lalr_lookaheads(C)<br ALIGN="LEFT"/>add_lookaheads(lookbacks, followset)<br ALIGN="LEFT"/>compute_follow_sets(ntrans, readsets, inclsets)<br ALIGN="LEFT"/>compute_lookback_includes(C, trans, nullable)<br ALIGN="LEFT"/>compute_nullable_nonterminals()<br ALIGN="LEFT"/>compute_read_sets(C, ntrans, nullable)<br ALIGN="LEFT"/>dr_relation(C, trans, nullable)<br ALIGN="LEFT"/>find_nonterminal_transitions(C)<br ALIGN="LEFT"/>lr0_closure(I)<br ALIGN="LEFT"/>lr0_goto(I, x)<br ALIGN="LEFT"/>lr0_items()<br ALIGN="LEFT"/>lr_parse_table()<br ALIGN="LEFT"/>pickle_table(filename, signature)<br ALIGN="LEFT"/>reads_relation(C, trans, empty)<br ALIGN="LEFT"/>write_table(tabmodule, outputdir, signature)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.LRItem" [color="black", fontcolor="black", label=<{LRItem|len<br ALIGN="LEFT"/>lookaheads : dict<br ALIGN="LEFT"/>lr_after : list<br ALIGN="LEFT"/>lr_before : NoneType<br ALIGN="LEFT"/>lr_index<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>number<br ALIGN="LEFT"/>prod : list, tuple<br ALIGN="LEFT"/>usyms<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.LRParser" [color="black", fontcolor="black", label=<{LRParser|action<br ALIGN="LEFT"/>defaulted_states : dict<br ALIGN="LEFT"/>errorfunc<br ALIGN="LEFT"/>errorok : bool<br ALIGN="LEFT"/>goto<br ALIGN="LEFT"/>productions<br ALIGN="LEFT"/>state : int<br ALIGN="LEFT"/>statestack : list<br ALIGN="LEFT"/>symstack : list<br ALIGN="LEFT"/>token<br ALIGN="LEFT"/>|disable_defaulted_states()<br ALIGN="LEFT"/>errok()<br ALIGN="LEFT"/>parse(input, lexer, debug, tracking, tokenfunc)<br ALIGN="LEFT"/>parsedebug(input, lexer, debug, tracking, tokenfunc)<br ALIGN="LEFT"/>parseopt(input, lexer, debug, tracking, tokenfunc)<br ALIGN="LEFT"/>parseopt_notrack(input, lexer, debug, tracking, tokenfunc)<br ALIGN="LEFT"/>restart()<br ALIGN="LEFT"/>set_defaulted_states()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.LRTable" [color="black", fontcolor="black", label=<{LRTable|lr_action : NoneType<br ALIGN="LEFT"/>lr_goto : NoneType<br ALIGN="LEFT"/>lr_method : NoneType<br ALIGN="LEFT"/>lr_productions : NoneType, list<br ALIGN="LEFT"/>|bind_callables(pdict)<br ALIGN="LEFT"/>read_pickle(filename)<br ALIGN="LEFT"/>read_table(module)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.lsr.LSR" [color="black", fontcolor="black", label=<{LSR|v_bary<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_finite_difference_velocities.test_faux_lsr.LSR2" [color="black", fontcolor="black", label=<{LSR2|obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.lsr.LSRD" [color="black", fontcolor="black", label=<{LSRD|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.lsr.LSRK" [color="black", fontcolor="black", label=<{LSRK|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.lambdacdm.LambdaCDM" [color="black", fontcolor="black", label=<{LambdaCDM|<br ALIGN="LEFT"/>|de_density_scale(z)<br ALIGN="LEFT"/>efunc(z)<br ALIGN="LEFT"/>inv_efunc(z)<br ALIGN="LEFT"/>w(z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.format.latex.Latex" [color="black", fontcolor="black", label=<{Latex|<br ALIGN="LEFT"/>|to_string(unit: UnitBase, fraction: bool \| Literal['inline', 'multiline']): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.latex.Latex" [color="black", fontcolor="black", label=<{Latex|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>ignore_latex_commands : list<br ALIGN="LEFT"/>inputter_class<br ALIGN="LEFT"/>latex : dict<br ALIGN="LEFT"/>max_ndim : NoneType<br ALIGN="LEFT"/>|write(table)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.latex.LatexData" [color="black", fontcolor="black", label=<{LatexData|comment : str<br ALIGN="LEFT"/>data_end : str<br ALIGN="LEFT"/>data_start : Optional[ClassVar[str \| None]]<br ALIGN="LEFT"/>latex : dict<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>start_line : NoneType<br ALIGN="LEFT"/>|end_line(lines)<br ALIGN="LEFT"/>start_line(lines)<br ALIGN="LEFT"/>write(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.latex.LatexHeader" [color="black", fontcolor="black", label=<{LatexHeader|comment : str<br ALIGN="LEFT"/>header_start : str<br ALIGN="LEFT"/>latex : dict<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>start_line : NoneType<br ALIGN="LEFT"/>|start_line(lines)<br ALIGN="LEFT"/>write(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.format.latex.LatexInline" [color="black", fontcolor="black", label=<{LatexInline|name : ClassVar[str]<br ALIGN="LEFT"/>|to_string(unit: UnitBase, fraction: bool \| Literal['inline', 'multiline']): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.latex.LatexInputter" [color="black", fontcolor="black", label=<{LatexInputter|<br ALIGN="LEFT"/>|process_lines(lines: list[str]): list[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.latex.LatexSplitter" [color="black", fontcolor="black", label=<{LatexSplitter|delimiter : str<br ALIGN="LEFT"/>|join(vals: list[str]): str<br ALIGN="LEFT"/>process_line(line: str): str<br ALIGN="LEFT"/>process_val(val: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.angles.core.Latitude" [color="black", fontcolor="black", label=<{Latitude|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.iers.iers.LeapSeconds" [color="black", fontcolor="black", label=<{LeapSeconds|expires<br ALIGN="LEFT"/>|auto_open(files)<br ALIGN="LEFT"/>from_erfa(built_in)<br ALIGN="LEFT"/>from_iers_leap_seconds(file)<br ALIGN="LEFT"/>from_leap_seconds_list(file)<br ALIGN="LEFT"/>open(file, cache)<br ALIGN="LEFT"/>update_erfa_leap_seconds(initialize_erfa)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.polynomial.Legendre1D" [color="black", fontcolor="black", label=<{Legendre1D|n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>parameters : list<br ALIGN="LEFT"/>|clenshaw(x, coeffs)<br ALIGN="LEFT"/>evaluate(x)<br ALIGN="LEFT"/>fit_deriv(x)<br ALIGN="LEFT"/>prepare_inputs(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.polynomial.Legendre2D" [color="black", fontcolor="black", label=<{Legendre2D|<br ALIGN="LEFT"/>|fit_deriv(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_typing.TestQuantityTyping.test_quantity_subclass_typing.Length" [color="black", fontcolor="black", label=<{Length|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.TestSpecificTypeQuantity.setup_method.Length" [color="black", fontcolor="black", label=<{Length|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.TestSpecificTypeQuantity.setup_method.Length2" [color="black", fontcolor="black", label=<{Length2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.TestSpecificTypeQuantity.setup_method.Length3" [color="black", fontcolor="black", label=<{Length3|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.fitting.LevMarLSQFitter" [color="black", fontcolor="black", label=<{LevMarLSQFitter|fit_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.scripts.fitsdiff.setup_logging.LevelFilter" [color="black", fontcolor="black", label=<{LevelFilter|level : int<br ALIGN="LEFT"/>|filter(rec)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.ply.lex.LexError" [color="black", fontcolor="red", label=<{LexError|args : tuple<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.ply.lex.LexToken" [color="black", fontcolor="black", label=<{LexToken|lexer : NoneType<br ALIGN="LEFT"/>lexpos : int<br ALIGN="LEFT"/>lineno : int<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>value : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.ply.lex.Lexer" [color="black", fontcolor="black", label=<{Lexer|lexdata : NoneType<br ALIGN="LEFT"/>lexeoff : NoneType<br ALIGN="LEFT"/>lexerrorf : NoneType<br ALIGN="LEFT"/>lexignore : str<br ALIGN="LEFT"/>lexlen : int<br ALIGN="LEFT"/>lexliterals : str<br ALIGN="LEFT"/>lexmatch<br ALIGN="LEFT"/>lexmodule : NoneType<br ALIGN="LEFT"/>lexoptimize : bool<br ALIGN="LEFT"/>lexpos : int<br ALIGN="LEFT"/>lexre : NoneType<br ALIGN="LEFT"/>lexreflags : int<br ALIGN="LEFT"/>lexretext : NoneType<br ALIGN="LEFT"/>lexstate : str<br ALIGN="LEFT"/>lexstateeoff : dict<br ALIGN="LEFT"/>lexstateerrorf : dict<br ALIGN="LEFT"/>lexstateignore : dict<br ALIGN="LEFT"/>lexstateinfo : NoneType, dict<br ALIGN="LEFT"/>lexstatere : dict<br ALIGN="LEFT"/>lexstaterenames : dict<br ALIGN="LEFT"/>lexstateretext : dict<br ALIGN="LEFT"/>lexstatestack : list<br ALIGN="LEFT"/>lextokens : NoneType, set<br ALIGN="LEFT"/>lextokens_all<br ALIGN="LEFT"/>lineno : int<br ALIGN="LEFT"/>|begin(state)<br ALIGN="LEFT"/>clone(object)<br ALIGN="LEFT"/>current_state()<br ALIGN="LEFT"/>input(s)<br ALIGN="LEFT"/>next()<br ALIGN="LEFT"/>pop_state()<br ALIGN="LEFT"/>push_state(state)<br ALIGN="LEFT"/>readtab(tabfile, fdict)<br ALIGN="LEFT"/>skip(n)<br ALIGN="LEFT"/>token()<br ALIGN="LEFT"/>writetab(lextab, outputdir)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.ply.lex.LexerReflect" [color="black", fontcolor="black", label=<{LexerReflect|eoff : dict<br ALIGN="LEFT"/>error : bool<br ALIGN="LEFT"/>error_func : NoneType<br ALIGN="LEFT"/>errorf : dict<br ALIGN="LEFT"/>funcsym : dict<br ALIGN="LEFT"/>ignore : dict<br ALIGN="LEFT"/>ldict<br ALIGN="LEFT"/>literals : str<br ALIGN="LEFT"/>log : NoneType<br ALIGN="LEFT"/>modules : set<br ALIGN="LEFT"/>reflags : int<br ALIGN="LEFT"/>stateinfo : dict<br ALIGN="LEFT"/>states<br ALIGN="LEFT"/>strsym : dict<br ALIGN="LEFT"/>tokens : list<br ALIGN="LEFT"/>toknames : dict<br ALIGN="LEFT"/>|get_all()<br ALIGN="LEFT"/>get_literals()<br ALIGN="LEFT"/>get_rules()<br ALIGN="LEFT"/>get_states()<br ALIGN="LEFT"/>get_tokens()<br ALIGN="LEFT"/>validate_all()<br ALIGN="LEFT"/>validate_literals()<br ALIGN="LEFT"/>validate_module(module)<br ALIGN="LEFT"/>validate_rules()<br ALIGN="LEFT"/>validate_tokens()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Linear1D" [color="black", fontcolor="black", label=<{Linear1D|input_units<br ALIGN="LEFT"/>inputs : tuple<br ALIGN="LEFT"/>intercept<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>outputs : tuple<br ALIGN="LEFT"/>slope<br ALIGN="LEFT"/>sync_constraints : bool<br ALIGN="LEFT"/>|evaluate(x, slope, intercept)<br ALIGN="LEFT"/>fit_deriv(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.fitting.LinearLSQFitter" [color="black", fontcolor="black", label=<{LinearLSQFitter|fit_info : dict<br ALIGN="LEFT"/>supported_constraints : list<br ALIGN="LEFT"/>supports_masked_input : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.lupton_rgb.LinearMapping" [color="black", fontcolor="black", label=<{LinearMapping|maximum : NoneType<br ALIGN="LEFT"/>|map_intensity_to_uint8(I)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.stretch.LinearStretch" [color="black", fontcolor="black", label=<{LinearStretch|intercept : int<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>slope : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree.Link" [color="black", fontcolor="black", label=<{Link|ID : NoneType<br ALIGN="LEFT"/>action : NoneType<br ALIGN="LEFT"/>content_role<br ALIGN="LEFT"/>content_type<br ALIGN="LEFT"/>href<br ALIGN="LEFT"/>title : NoneType<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|from_table_column(d)<br ALIGN="LEFT"/>to_table_column(column)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.logger.ListHandler" [color="black", fontcolor="black", label=<{ListHandler|log_list : list<br ALIGN="LEFT"/>|emit(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.html.ListWriter" [color="black", fontcolor="black", label=<{ListWriter|out<br ALIGN="LEFT"/>|write(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern._strptime.LocaleTime" [color="black", fontcolor="black", label=<{LocaleTime|LC_date : NoneType<br ALIGN="LEFT"/>LC_date_time : NoneType<br ALIGN="LEFT"/>LC_time : NoneType<br ALIGN="LEFT"/>a_month<br ALIGN="LEFT"/>a_weekday<br ALIGN="LEFT"/>am_pm : list<br ALIGN="LEFT"/>daylight : int<br ALIGN="LEFT"/>f_month<br ALIGN="LEFT"/>f_weekday<br ALIGN="LEFT"/>lang : tuple<br ALIGN="LEFT"/>timezone : tuple<br ALIGN="LEFT"/>tzname : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.test_minimal_subclass.LogDRepresentation" [color="black", fontcolor="black", label=<{LogDRepresentation|attr_classes : dict<br ALIGN="LEFT"/>|from_cartesian(cart)<br ALIGN="LEFT"/>to_cartesian()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.powerlaws.LogParabola1D" [color="black", fontcolor="black", label=<{LogParabola1D|alpha<br ALIGN="LEFT"/>amplitude<br ALIGN="LEFT"/>beta<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>|evaluate(x, amplitude, x_0, alpha, beta)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, x_0, alpha, beta)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.function.logarithmic.LogQuantity" [color="black", fontcolor="black", label=<{LogQuantity|<br ALIGN="LEFT"/>|diff(n, axis)<br ALIGN="LEFT"/>ediff1d(to_end, to_begin)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof)<br ALIGN="LEFT"/>var(axis, dtype, out, ddof)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.stretch.LogStretch" [color="black", fontcolor="black", label=<{LogStretch|a : float<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.function.logarithmic.LogUnit" [color="black", fontcolor="black", label=<{LogUnit|<br ALIGN="LEFT"/>|from_physical(x)<br ALIGN="LEFT"/>to_physical(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Logarithmic1D" [color="black", fontcolor="black", label=<{Logarithmic1D|amplitude<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>tau<br ALIGN="LEFT"/>|evaluate(x, amplitude, tau)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, tau)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.logger.LoggingError" [color="black", fontcolor="red", label=<{LoggingError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.timeseries.periodograms.lombscargle.core.LombScargle" [color="black", fontcolor="black", label=<{LombScargle|available_methods : list<br ALIGN="LEFT"/>center_data : bool<br ALIGN="LEFT"/>dy<br ALIGN="LEFT"/>fit_mean : bool<br ALIGN="LEFT"/>normalization : str<br ALIGN="LEFT"/>nterms : int<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|autofrequency(samples_per_peak, nyquist_factor, minimum_frequency, maximum_frequency, return_freq_limits)<br ALIGN="LEFT"/>autopower(method, method_kwds, normalization, samples_per_peak, nyquist_factor, minimum_frequency, maximum_frequency)<br ALIGN="LEFT"/>design_matrix(frequency, t)<br ALIGN="LEFT"/>distribution(power, cumulative)<br ALIGN="LEFT"/>false_alarm_level(false_alarm_probability, method, samples_per_peak, nyquist_factor, minimum_frequency, maximum_frequency, method_kwds)<br ALIGN="LEFT"/>false_alarm_probability(power, method, samples_per_peak, nyquist_factor, minimum_frequency, maximum_frequency, method_kwds)<br ALIGN="LEFT"/>model(t, frequency)<br ALIGN="LEFT"/>model_parameters(frequency, units)<br ALIGN="LEFT"/>offset()<br ALIGN="LEFT"/>power(frequency, normalization, method, assume_regular_frequency, method_kwds)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.timeseries.periodograms.lombscargle_multiband.core.LombScargleMultiband" [color="black", fontcolor="black", label=<{LombScargleMultiband|available_methods : list<br ALIGN="LEFT"/>bands<br ALIGN="LEFT"/>center_data : bool<br ALIGN="LEFT"/>dy<br ALIGN="LEFT"/>fit_mean : bool<br ALIGN="LEFT"/>normalization : str<br ALIGN="LEFT"/>nterms : int<br ALIGN="LEFT"/>nterms_band : int<br ALIGN="LEFT"/>nterms_base : int<br ALIGN="LEFT"/>reg_band : float<br ALIGN="LEFT"/>reg_base : NoneType<br ALIGN="LEFT"/>regularize_by_trace : bool<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|autofrequency(samples_per_peak, nyquist_factor, minimum_frequency, maximum_frequency, return_freq_limits)<br ALIGN="LEFT"/>autopower(method, sb_method, normalization, samples_per_peak, nyquist_factor, minimum_frequency, maximum_frequency)<br ALIGN="LEFT"/>design_matrix(frequency, t_fit, bands_fit)<br ALIGN="LEFT"/><I>distribution</I>()<br ALIGN="LEFT"/><I>false_alarm_level</I>()<br ALIGN="LEFT"/><I>false_alarm_probability</I>()<br ALIGN="LEFT"/>from_timeseries(timeseries, signal_column, uncertainty_column, band_labels)<br ALIGN="LEFT"/>model(t, frequency, bands_fit)<br ALIGN="LEFT"/>model_parameters(frequency, units)<br ALIGN="LEFT"/>offset(t_fit, bands_fit)<br ALIGN="LEFT"/>power(frequency, method, sb_method, normalization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_transform_coord_meta.LonLatToDistance" [color="black", fontcolor="black", label=<{LonLatToDistance|R : float<br ALIGN="LEFT"/>transform_non_affine<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform(lamphi)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.Long" [color="black", fontcolor="black", label=<{Long|bit_size : str<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>val_range : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.angles.core.Longitude" [color="black", fontcolor="black", label=<{Longitude|info<br ALIGN="LEFT"/>wrap_angle<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_unit_representation.test_unit_representation_subclass.Longitude180" [color="black", fontcolor="black", label=<{Longitude180|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.TestSphericalRepresentation.test_init_subclass.Longitude180" [color="black", fontcolor="black", label=<{Longitude180|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.test_subclass_representation.Longitude180" [color="black", fontcolor="black", label=<{Longitude180|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.angles.core.LongitudeInfo" [color="black", fontcolor="black", label=<{LongitudeInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.LongitudeSetup" [color="black", fontcolor="black", label=<{LongitudeSetup|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Lorentz1D" [color="black", fontcolor="black", label=<{Lorentz1D|amplitude<br ALIGN="LEFT"/>fwhm<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>|bounding_box(factor)<br ALIGN="LEFT"/>evaluate(x, amplitude, x_0, fwhm)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, x_0, fwhm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Lorentz2D" [color="black", fontcolor="black", label=<{Lorentz2D|amplitude<br ALIGN="LEFT"/>fwhm<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>y_0<br ALIGN="LEFT"/>|bounding_box(factor)<br ALIGN="LEFT"/>evaluate(x, y, amplitude, x_0, y_0, fwhm)<br ALIGN="LEFT"/>fit_deriv(x, y, amplitude, x_0, y_0, fwhm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_wcsapi.LowLevelWCS5D" [color="black", fontcolor="black", label=<{LowLevelWCS5D|pixel_dim : int<br ALIGN="LEFT"/>pixel_n_dim<br ALIGN="LEFT"/>world_axis_names<br ALIGN="LEFT"/>world_axis_object_classes<br ALIGN="LEFT"/>world_axis_object_components<br ALIGN="LEFT"/>world_axis_physical_types<br ALIGN="LEFT"/>world_axis_units<br ALIGN="LEFT"/>world_n_dim<br ALIGN="LEFT"/>|pixel_to_world_values()<br ALIGN="LEFT"/>world_to_pixel_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_wcsapi.LowLevelWCSCelestial2D" [color="black", fontcolor="black", label=<{LowLevelWCSCelestial2D|pixel_n_dim<br ALIGN="LEFT"/>world_axis_names<br ALIGN="LEFT"/>world_axis_object_classes<br ALIGN="LEFT"/>world_axis_object_components<br ALIGN="LEFT"/>world_axis_physical_types<br ALIGN="LEFT"/>world_axis_units<br ALIGN="LEFT"/>world_n_dim<br ALIGN="LEFT"/>|pixel_to_world_values()<br ALIGN="LEFT"/>world_to_pixel_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.lupton_rgb.LuptonAsinhStretch" [color="black", fontcolor="black", label=<{LuptonAsinhStretch|Q : float, int<br ALIGN="LEFT"/>stretch : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.lupton_rgb.LuptonAsinhZscaleStretch" [color="black", fontcolor="black", label=<{LuptonAsinhZscaleStretch|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_input.test_more_outputs.M" [color="black", fontcolor="black", label=<{M|a<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>standard_broadcasting : bool<br ALIGN="LEFT"/>|evaluate(x, y, a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_parameters.M1" [color="black", fontcolor="black", label=<{M1|m1a<br ALIGN="LEFT"/>m1b<br ALIGN="LEFT"/>|<I>evaluate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_parameters.M2" [color="black", fontcolor="black", label=<{M2|m2c<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_parameters.M3" [color="black", fontcolor="black", label=<{M3|m3d<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.TestSubclass.test_read_table_subclass_with_columns_attributes.MTable" [color="black", fontcolor="black", label=<{MTable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.ply.cpp.Macro" [color="black", fontcolor="black", label=<{Macro|arglist : NoneType<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>source : NoneType<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>vararg<br ALIGN="LEFT"/>variadic : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.function.logarithmic.MagUnit" [color="black", fontcolor="black", label=<{MagUnit|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.function.logarithmic.Magnitude" [color="black", fontcolor="black", label=<{Magnitude|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.interval.ManualInterval" [color="black", fontcolor="black", label=<{ManualInterval|vmax : NoneType<br ALIGN="LEFT"/>vmin : NoneType<br ALIGN="LEFT"/>|get_limits(values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.lupton_rgb.Mapping" [color="black", fontcolor="black", label=<{Mapping|minimum : NoneType, list<br ALIGN="LEFT"/>|intensity(image_r, image_g, image_b)<br ALIGN="LEFT"/>make_rgb_image(image_r, image_g, image_b)<br ALIGN="LEFT"/>map_intensity_to_uint8(I)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.mappings.Mapping" [color="black", fontcolor="black", label=<{Mapping|bounding_box : tuple<br ALIGN="LEFT"/>inputs : tuple<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>mapping<br ALIGN="LEFT"/>n_inputs<br ALIGN="LEFT"/>n_outputs<br ALIGN="LEFT"/>outputs : tuple<br ALIGN="LEFT"/>|evaluate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.core.MaskableShapedLikeNDArray" [color="black", fontcolor="black", label=<{MaskableShapedLikeNDArray|mask<br ALIGN="LEFT"/>masked<br ALIGN="LEFT"/>unmasked<br ALIGN="LEFT"/>|filled(fill_value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.core.Masked" [color="black", fontcolor="black", label=<{Masked|a<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>shape : tuple<br ALIGN="LEFT"/>unmasked<br ALIGN="LEFT"/>|filled(fill_value)<br ALIGN="LEFT"/>from_unmasked(data, mask, copy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.MaskedArraySetup" [color="black", fontcolor="black", label=<{MaskedArraySetup|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.core.MaskedArraySubclassInfo" [color="black", fontcolor="black", label=<{MaskedArraySubclassInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_table.MaskedArrayTableSetup" [color="black", fontcolor="black", label=<{MaskedArrayTableSetup|<br ALIGN="LEFT"/>|setup_arrays()<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.column.MaskedColumn" [color="black", fontcolor="black", label=<{MaskedColumn|copy<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>fill_value<br ALIGN="LEFT"/>format<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>more<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>pformat<br ALIGN="LEFT"/>pprint<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|convert_unit_to(new_unit, equivalencies)<br ALIGN="LEFT"/>filled(fill_value)<br ALIGN="LEFT"/>insert(obj, values, mask, axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.column.MaskedColumnInfo" [color="black", fontcolor="black", label=<{MaskedColumnInfo|attr_names<br ALIGN="LEFT"/>mask_val<br ALIGN="LEFT"/>serialize_method : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.MaskedConstant" [color="black", fontcolor="black", label=<{MaskedConstant|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.function_helpers.MaskedFormat" [color="black", fontcolor="black", label=<{MaskedFormat|format_function<br ALIGN="LEFT"/>|from_data(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.core.MaskedInfoBase" [color="black", fontcolor="black", label=<{MaskedInfoBase|mask_val<br ALIGN="LEFT"/>serialize_method : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.MaskedItemTests" [color="black", fontcolor="black", label=<{MaskedItemTests|<br ALIGN="LEFT"/>|test_getitem(item)<br ALIGN="LEFT"/>test_getitem_structured(item)<br ALIGN="LEFT"/>test_hash(item)<br ALIGN="LEFT"/>test_setitem(item, mask)<br ALIGN="LEFT"/>test_setitem_np_ma_masked(item)<br ALIGN="LEFT"/>test_setitem_structured(item, mask)<br ALIGN="LEFT"/>test_take(indices, axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.core.MaskedIterator" [color="black", fontcolor="black", label=<{MaskedIterator|next<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedClassCreation.setup_class.MaskedList" [color="black", fontcolor="black", label=<{MaskedList|mask : NoneType<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.core.MaskedNDArray" [color="black", fontcolor="black", label=<{MaskedNDArray|flat<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>unmasked<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>from_unmasked(data, mask, copy)<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.core.MaskedNDArrayInfo" [color="black", fontcolor="black", label=<{MaskedNDArrayInfo|attr_names<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.MaskedOperatorTests" [color="black", fontcolor="black", label=<{MaskedOperatorTests|<br ALIGN="LEFT"/>|test_add_subtract(op)<br ALIGN="LEFT"/>test_equality(op)<br ALIGN="LEFT"/>test_matmul()<br ALIGN="LEFT"/>test_matmul_axes()<br ALIGN="LEFT"/>test_matmul_matvec()<br ALIGN="LEFT"/>test_matmul_vecmat()<br ALIGN="LEFT"/>test_matmul_vecvec()<br ALIGN="LEFT"/>test_matvec_vecmat()<br ALIGN="LEFT"/>test_not_implemented()<br ALIGN="LEFT"/>test_structured_equality(op, different_names)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_table.MaskedQuantityTableSetup" [color="black", fontcolor="black", label=<{MaskedQuantityTableSetup|<br ALIGN="LEFT"/>|setup_arrays()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.core.MaskedRecarray" [color="black", fontcolor="black", label=<{MaskedRecarray|info<br ALIGN="LEFT"/>|getfield(dtype, offset)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.core.MaskedRecarrayInfo" [color="black", fontcolor="black", label=<{MaskedRecarrayInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_masked.MaskedSphericalSetup" [color="black", fontcolor="black", label=<{MaskedSphericalSetup|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.conftest.MaskedTable" [color="black", fontcolor="black", label=<{MaskedTable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.MaskedUfuncTests" [color="black", fontcolor="black", label=<{MaskedUfuncTests|<br ALIGN="LEFT"/>|test_2op_ufunc(ufunc, a, b)<br ALIGN="LEFT"/>test_2op_ufunc_outer(ufunc, a, b)<br ALIGN="LEFT"/>test_2op_ufunc_outer_no_masked_input(ufunc)<br ALIGN="LEFT"/>test_3op_ufunc()<br ALIGN="LEFT"/>test_add_reduce(axis)<br ALIGN="LEFT"/>test_add_reduce_no_masked_input()<br ALIGN="LEFT"/>test_erfa_p2s_with_out(kwargs)<br ALIGN="LEFT"/>test_erfa_pdp_with_out()<br ALIGN="LEFT"/>test_erfa_rxp()<br ALIGN="LEFT"/>test_erfa_rxr_axes()<br ALIGN="LEFT"/>test_maximum_reduce(axis)<br ALIGN="LEFT"/>test_minimum_reduce(axis)<br ALIGN="LEFT"/>test_multi_op_ufunc()<br ALIGN="LEFT"/>test_ufunc_inplace_error()<br ALIGN="LEFT"/>test_ufunc_inplace_error_masked_where()<br ALIGN="LEFT"/>test_ufunc_inplace_masked_where(base_mask)<br ALIGN="LEFT"/>test_ufunc_inplace_no_masked_input()<br ALIGN="LEFT"/>test_ufunc_inplace_where(base_mask)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.bst.MaxValue" [color="black", fontcolor="black", label=<{MaxValue|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.tests.test_metadata.test_metadata_merging_new_strategy.MergeConcatStrings" [color="black", fontcolor="black", label=<{MergeConcatStrings|enabled : bool<br ALIGN="LEFT"/>types : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.exceptions.MergeConflictError" [color="black", fontcolor="red", label=<{MergeConflictError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.exceptions.MergeConflictWarning" [color="black", fontcolor="red", label=<{MergeConflictWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.merge.MergeNpConcatenate" [color="black", fontcolor="black", label=<{MergeNpConcatenate|enabled : bool<br ALIGN="LEFT"/>types : list<br ALIGN="LEFT"/>|merge(left, right)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.metadata.tests.test_metadata.test_metadata_merging_new_strategy.MergeNumbersAsList" [color="black", fontcolor="black", label=<{MergeNumbersAsList|types : tuple<br ALIGN="LEFT"/>|merge(left, right)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.metadata.merge.MergePlus" [color="black", fontcolor="black", label=<{MergePlus|enabled : bool<br ALIGN="LEFT"/>types : list<br ALIGN="LEFT"/>|merge(left, right)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.metadata.merge.MergeStrategy" [color="black", fontcolor="black", label=<{MergeStrategy|enabled : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.core.MetaAttribute" [color="black", fontcolor="black", label=<{MetaAttribute|default : NoneType<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.MetaBaseReader" [color="black", fontcolor="black", label=<{MetaBaseReader|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.tests.test_metadata.MetaBaseTest" [color="black", fontcolor="black", label=<{MetaBaseTest|<br ALIGN="LEFT"/>|test_mapping_init(meta)<br ALIGN="LEFT"/>test_mapping_set(meta)<br ALIGN="LEFT"/>test_meta_fits_header()<br ALIGN="LEFT"/>test_non_mapping_init(meta)<br ALIGN="LEFT"/>test_non_mapping_set(meta)<br ALIGN="LEFT"/>test_none()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.tests.test_introspection.test_deprecated_isinstancemethod.MetaClass" [color="black", fontcolor="black", label=<{MetaClass|<br ALIGN="LEFT"/>|<I>a_classmethod</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.metadata.core.MetaData" [color="black", fontcolor="black", label=<{MetaData|copy : bool<br ALIGN="LEFT"/>default_factory<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_core.MetaTestMixin" [color="black", fontcolor="black", label=<{MetaTestMixin|<br ALIGN="LEFT"/>|test_meta_mutable(cosmo)<br ALIGN="LEFT"/>test_meta_on_class(cosmo_cls)<br ALIGN="LEFT"/>test_meta_on_instance(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.interval.MinMaxInterval" [color="black", fontcolor="black", label=<{MinMaxInterval|<br ALIGN="LEFT"/>|get_limits(values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.bst.MinValue" [color="black", fontcolor="black", label=<{MinValue|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.MiniProduction" [color="black", fontcolor="black", label=<{MiniProduction|callable : NoneType<br ALIGN="LEFT"/>file<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>len<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>str<br ALIGN="LEFT"/>|bind(pdict)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.tests.test_high_level_api.MinimalHighLevelWCS" [color="black", fontcolor="black", label=<{MinimalHighLevelWCS|low_level_wcs<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_nddata_base.MinimalSubclass" [color="black", fontcolor="black", label=<{MinimalSubclass|data<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>meta<br ALIGN="LEFT"/>psf<br ALIGN="LEFT"/>uncertainty<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>wcs<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_nddata_base.MinimalSubclassNoPSF" [color="black", fontcolor="black", label=<{MinimalSubclassNoPSF|data<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>meta<br ALIGN="LEFT"/>uncertainty<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>wcs<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_nddata.MinimalUncertainty" [color="black", fontcolor="black", label=<{MinimalUncertainty|uncertainty_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations.test_geodetic_subclass_missing_equatorial_radius.MissingCustomAttribute" [color="black", fontcolor="black", label=<{MissingCustomAttribute|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.nduncertainty.MissingDataAssociationException" [color="black", fontcolor="red", label=<{MissingDataAssociationException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.MissingInterpolationOption" [color="black", fontcolor="red", label=<{MissingInterpolationOption|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree.MivotBlock" [color="black", fontcolor="black", label=<{MivotBlock|content<br ALIGN="LEFT"/>|check_content_format()<br ALIGN="LEFT"/>parse(votable, iterator, config)<br ALIGN="LEFT"/>to_xml(w)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_core.FlatCosmologyMixinTest.test_subclassing.Mixin" [color="black", fontcolor="black", label=<{Mixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.data_info.MixinInfo" [color="black", fontcolor="black", label=<{MixinInfo|groups<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.mixins.registry.MixinRegistryError" [color="black", fontcolor="red", label=<{MixinRegistryError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_sky_coord.test_none_differential_type.MockHeliographicStonyhurst" [color="black", fontcolor="black", label=<{MockHeliographicStonyhurst|default_representation<br ALIGN="LEFT"/>frame_specific_representation_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_core.TestFileFunctions.test_mmap_unwriteable.MockMmap" [color="black", fontcolor="black", label=<{MockMmap|<br ALIGN="LEFT"/>|flush()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_parameters.MockModel" [color="black", fontcolor="black", label=<{MockModel|alpha<br ALIGN="LEFT"/>|<I>evaluate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.tests.test_data.test_download_file_wrong_size.MockURL" [color="black", fontcolor="black", label=<{MockURL|reader : BytesIO<br ALIGN="LEFT"/>|info()<br ALIGN="LEFT"/>read(length)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.core.Model" [color="black", fontcolor="black", label=<{Model|bbox_with_units<br ALIGN="LEFT"/>bounding_box<br ALIGN="LEFT"/>bounds<br ALIGN="LEFT"/>cov_matrix<br ALIGN="LEFT"/>eqcons<br ALIGN="LEFT"/>factor<br ALIGN="LEFT"/>fittable : bool<br ALIGN="LEFT"/>fixed<br ALIGN="LEFT"/>has_bounds<br ALIGN="LEFT"/>has_fixed<br ALIGN="LEFT"/>has_tied<br ALIGN="LEFT"/>has_user_bounding_box<br ALIGN="LEFT"/>has_user_inverse<br ALIGN="LEFT"/>ineqcons<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>input_units_allow_dimensionless<br ALIGN="LEFT"/>input_units_equivalencies : NoneType<br ALIGN="LEFT"/>input_units_strict<br ALIGN="LEFT"/>inputs<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>meta<br ALIGN="LEFT"/>model_constraints : tuple<br ALIGN="LEFT"/>model_set_axis<br ALIGN="LEFT"/>n_inputs<br ALIGN="LEFT"/>n_outputs<br ALIGN="LEFT"/>n_submodels<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>offset<br ALIGN="LEFT"/>outputs<br ALIGN="LEFT"/>param_names : tuple<br ALIGN="LEFT"/>param_sets<br ALIGN="LEFT"/>parameter_constraints : tuple<br ALIGN="LEFT"/>parameters<br ALIGN="LEFT"/>return_units<br ALIGN="LEFT"/>separable<br ALIGN="LEFT"/>standard_broadcasting : bool<br ALIGN="LEFT"/>stds<br ALIGN="LEFT"/>sync_constraints<br ALIGN="LEFT"/>tied<br ALIGN="LEFT"/>uses_quantity<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|coerce_units(input_units, return_units, input_units_equivalencies, input_units_allow_dimensionless)<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>deepcopy()<br ALIGN="LEFT"/><I>evaluate</I>()<br ALIGN="LEFT"/>get_bounding_box(with_bbox)<br ALIGN="LEFT"/>has_inverse()<br ALIGN="LEFT"/>input_shape(inputs)<br ALIGN="LEFT"/>output_units()<br ALIGN="LEFT"/>prepare_inputs()<br ALIGN="LEFT"/>prepare_outputs(broadcasted_shapes)<br ALIGN="LEFT"/>rename(name)<br ALIGN="LEFT"/>render(out, coords)<br ALIGN="LEFT"/>set_slice_args()<br ALIGN="LEFT"/>strip_units_from_tree()<br ALIGN="LEFT"/><I>sum_of_implicit_terms</I>()<br ALIGN="LEFT"/>with_units_from_data()<br ALIGN="LEFT"/>without_units_for_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.Model1DKernel" [color="black", fontcolor="black", label=<{Model1DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.convolution.kernels.Model2DKernel" [color="black", fontcolor="black", label=<{Model2DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.bounding_box.ModelBoundingBox" [color="black", fontcolor="black", label=<{ModelBoundingBox|dimension<br ALIGN="LEFT"/>intervals<br ALIGN="LEFT"/>named_intervals<br ALIGN="LEFT"/>slice_args : tuple<br ALIGN="LEFT"/>|bounding_box(order: str \| None): tuple[float, float] \| tuple[tuple[float, float], ...]<br ALIGN="LEFT"/>copy(ignored)<br ALIGN="LEFT"/>domain(resolution, order: str \| None): list[np.ndarray]<br ALIGN="LEFT"/>fix_inputs(model, fixed_inputs: dict, _keep_ignored): Self<br ALIGN="LEFT"/>has_interval(key)<br ALIGN="LEFT"/>prepare_inputs(input_shape, inputs): tuple[Any, Any, Any]<br ALIGN="LEFT"/>validate(model, bounding_box, ignored: list \| None, order: str, _preserve_ignore: bool): Self<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_models.ModelCustom" [color="black", fontcolor="black", label=<{ModelCustom|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_models.ModelDefault" [color="black", fontcolor="black", label=<{ModelDefault|intercept<br ALIGN="LEFT"/>slope<br ALIGN="LEFT"/>|evaluate(x, slope, intercept)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.core.ModelDefinitionError" [color="black", fontcolor="red", label=<{ModelDefinitionError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.fitting.ModelLinearityError" [color="black", fontcolor="red", label=<{ModelLinearityError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.ModelMappingSpecWarning" [color="black", fontcolor="red", label=<{ModelMappingSpecWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.fitting.ModelsError" [color="black", fontcolor="red", label=<{ModelsError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Moffat1D" [color="black", fontcolor="black", label=<{Moffat1D|alpha<br ALIGN="LEFT"/>amplitude<br ALIGN="LEFT"/>fwhm<br ALIGN="LEFT"/>gamma<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>|evaluate(x, amplitude, x_0, gamma, alpha)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, x_0, gamma, alpha)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Moffat2D" [color="black", fontcolor="black", label=<{Moffat2D|alpha<br ALIGN="LEFT"/>amplitude<br ALIGN="LEFT"/>fwhm<br ALIGN="LEFT"/>gamma<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>y_0<br ALIGN="LEFT"/>|evaluate(x, y, amplitude, x_0, y_0, gamma, alpha)<br ALIGN="LEFT"/>fit_deriv(x, y, amplitude, x_0, y_0, gamma, alpha)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.Moffat2DKernel" [color="black", fontcolor="black", label=<{Moffat2DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.units.quantity_support.MplQuantityConverter" [color="black", fontcolor="black", label=<{MplQuantityConverter|<br ALIGN="LEFT"/>|axisinfo(unit, axis)<br ALIGN="LEFT"/>convert(val, unit, axis)<br ALIGN="LEFT"/>default_units(x, axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.time.time_support.MplTimeConverter" [color="black", fontcolor="black", label=<{MplTimeConverter|format<br ALIGN="LEFT"/>scale : NoneType<br ALIGN="LEFT"/>simplify : NoneType<br ALIGN="LEFT"/>|axisinfo(unit, axis)<br ALIGN="LEFT"/>convert(value, unit, axis)<br ALIGN="LEFT"/>default_units(x, axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.mrt.Mrt" [color="black", fontcolor="black", label=<{Mrt|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>|write(table)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.mrt.MrtData" [color="black", fontcolor="black", label=<{MrtData|header<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>|write(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.mrt.MrtHeader" [color="black", fontcolor="black", label=<{MrtHeader|linewidth<br ALIGN="LEFT"/>position_line : NoneType<br ALIGN="LEFT"/>start_line : NoneType<br ALIGN="LEFT"/>|column_float_formatter(col)<br ALIGN="LEFT"/>write(lines)<br ALIGN="LEFT"/>write_byte_by_byte()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.mrt.MrtSplitter" [color="black", fontcolor="black", label=<{MrtSplitter|delimiter : str<br ALIGN="LEFT"/>|join(vals, widths)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_sky_coord.test_multiple_aliases.MultipleAliasesFrame" [color="black", fontcolor="black", label=<{MultipleAliasesFrame|default_representation<br ALIGN="LEFT"/>name : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_transformations.test_multiple_aliases.MultipleAliasesFrame" [color="black", fontcolor="black", label=<{MultipleAliasesFrame|default_representation<br ALIGN="LEFT"/>name : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Multiply" [color="black", fontcolor="black", label=<{Multiply|bounding_box : tuple<br ALIGN="LEFT"/>factor<br ALIGN="LEFT"/>fittable : bool<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>|evaluate(x, factor)<br ALIGN="LEFT"/>fit_deriv(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.TestQuantitySubclassAboveAndBelow.setup_class.MyArray" [color="black", fontcolor="black", label=<{MyArray|my_attr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedNDArraySubclassCreation.setup_class.MyArray" [color="black", fontcolor="black", label=<{MyArray|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_mixin.test_bad_info_class.MyArrayWrapper" [color="black", fontcolor="black", label=<{MyArrayWrapper|info<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_masked.test_mask_slicing_count_array_finalize.MyBaseColumn" [color="black", fontcolor="black", label=<{MyBaseColumn|counter : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_introspection.test_deprecated_isinstancemethod.MyClass" [color="black", fontcolor="black", label=<{MyClass|<br ALIGN="LEFT"/>|<I>a_staticmethod</I>()<br ALIGN="LEFT"/><I>an_instancemethod</I>()<br ALIGN="LEFT"/><I>another_classmethod</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_operations.TestJoin.test_classes.MyCol" [color="black", fontcolor="black", label=<{MyCol|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.conftest.MyColumn" [color="black", fontcolor="black", label=<{MyColumn|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MyColumn" [color="black", fontcolor="black", label=<{MyColumn|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_subclass.MyColumn" [color="black", fontcolor="black", label=<{MyColumn|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_quantity_attribute_default.MyCoord" [color="black", fontcolor="black", label=<{MyCoord|someval<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_quantity_attribute_default.MyCoord2" [color="black", fontcolor="black", label=<{MyCoord2|someval<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_quantity_attribute_default.MyCoord3" [color="black", fontcolor="black", label=<{MyCoord3|someval<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_decorators.test_wrap_function_accepts.MyData" [color="black", fontcolor="black", label=<{MyData|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_frame_subclass_attribute_descriptor.MyFK4" [color="black", fontcolor="black", label=<{MyFK4|newattr<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_core.TestFileFunctions.test_uncloseable_file.MyFileLike" [color="black", fontcolor="black", label=<{MyFileLike|<br ALIGN="LEFT"/>|read(n)<br ALIGN="LEFT"/>seek(offset, whence)<br ALIGN="LEFT"/>tell()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_regression.test_regression_6236.MyFrame" [color="black", fontcolor="black", label=<{MyFrame|default_representation<br ALIGN="LEFT"/>my_attr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_regression.test_regression_8276.MyFrame" [color="black", fontcolor="black", label=<{MyFrame|a<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_unit_representation.test_unit_representation_subclass.MyFrame" [color="black", fontcolor="black", label=<{MyFrame|default_representation<br ALIGN="LEFT"/>frame_specific_representation_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_header.test_subclass.MyHeader" [color="black", fontcolor="black", label=<{MyHeader|<br ALIGN="LEFT"/>|append(card)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedClassCreation.test_masked_list_subclass.MyList" [color="black", fontcolor="black", label=<{MyList|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_operations.TestJoin.test_classes.MyMaskedCol" [color="black", fontcolor="black", label=<{MyMaskedCol|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.conftest.MyMaskedColumn" [color="black", fontcolor="black", label=<{MyMaskedColumn|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MyMaskedColumn" [color="black", fontcolor="black", label=<{MyMaskedColumn|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_masked.test_mask_slicing_count_array_finalize.MyMaskedColumn" [color="black", fontcolor="black", label=<{MyMaskedColumn|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_subclass.MyMaskedColumn" [color="black", fontcolor="black", label=<{MyMaskedColumn|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_constraints.test_default_constraints.MyModel" [color="black", fontcolor="black", label=<{MyModel|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|evaluate(x, a, b)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_constraints.test_fit_with_bound_constraints_estimate_jacobian.MyModel" [color="black", fontcolor="black", label=<{MyModel|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|evaluate(x, a, b)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_info.TestQuantitySubclass.setup_class.MyQuantity" [color="black", fontcolor="black", label=<{MyQuantity|swallow : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.test_unit_class_override.MyQuantity" [color="black", fontcolor="black", label=<{MyQuantity|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_equivalencies.test_equivalency_context.MyQuantityLookalike" [color="black", fontcolor="black", label=<{MyQuantityLookalike|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.TestQuantityCreation.test_non_quantity_with_unit.MyQuantityLookalike" [color="black", fontcolor="black", label=<{MyQuantityLookalike|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.TestQuantityCreation.test_subok.MyQuantitySubclass" [color="black", fontcolor="black", label=<{MyQuantitySubclass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_equivalencies.test_dimensionless_angles.MyRad1" [color="black", fontcolor="black", label=<{MyRad1|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.conftest.MyRow" [color="black", fontcolor="black", label=<{MyRow|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_subclass.MyRow" [color="black", fontcolor="black", label=<{MyRow|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_regression.test_regression_6236.MySpecialFrame" [color="black", fontcolor="black", label=<{MySpecialFrame|representation_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.test_quantity_conversion_equivalency_passed_on.MySpectral" [color="black", fontcolor="black", label=<{MySpectral|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_state.test_ScienceState_and_Context.MyState" [color="black", fontcolor="black", label=<{MyState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MySubColumn" [color="black", fontcolor="black", label=<{MySubColumn|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MySubMaskedColumn" [color="black", fontcolor="black", label=<{MySubMaskedColumn|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.conftest.MyTable" [color="black", fontcolor="black", label=<{MyTable|Column<br ALIGN="LEFT"/>MaskedColumn<br ALIGN="LEFT"/>Row<br ALIGN="LEFT"/>TableColumns<br ALIGN="LEFT"/>TableFormatter<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_table.MyTable" [color="black", fontcolor="black", label=<{MyTable|bar<br ALIGN="LEFT"/>baz<br ALIGN="LEFT"/>foo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MyTable" [color="black", fontcolor="black", label=<{MyTable|Column<br ALIGN="LEFT"/>MaskedColumn<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_subclass.MyTable" [color="black", fontcolor="black", label=<{MyTable|Column<br ALIGN="LEFT"/>MaskedColumn<br ALIGN="LEFT"/>Row<br ALIGN="LEFT"/>TableColumns<br ALIGN="LEFT"/>TableFormatter<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.TestSubclass.test_read_table_subclass.MyTable" [color="black", fontcolor="black", label=<{MyTable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.TestSubclass.test_write_table_subclass.MyTable" [color="black", fontcolor="black", label=<{MyTable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_table.test_table_attribute_fail.MyTable2" [color="black", fontcolor="black", label=<{MyTable2|descriptions<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_table.test_table_attribute_fail.MyTable3" [color="black", fontcolor="black", label=<{MyTable3|colnames<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.conftest.MyTableColumns" [color="black", fontcolor="black", label=<{MyTableColumns|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_subclass.MyTableColumns" [color="black", fontcolor="black", label=<{MyTableColumns|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.conftest.MyTableFormatter" [color="black", fontcolor="black", label=<{MyTableFormatter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_subclass.MyTableFormatter" [color="black", fontcolor="black", label=<{MyTableFormatter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_quantities_evaluation.MyTestModel" [color="black", fontcolor="black", label=<{MyTestModel|input_units_equivalencies : dict<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>|evaluate(a, b)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin" [color="black", fontcolor="black", label=<{NDArithmeticMixin|uncertainty : NoneType<br ALIGN="LEFT"/>|add(operand, operand2)<br ALIGN="LEFT"/>divide(operand, operand2)<br ALIGN="LEFT"/>max()<br ALIGN="LEFT"/>mean()<br ALIGN="LEFT"/>min()<br ALIGN="LEFT"/>multiply(operand, operand2)<br ALIGN="LEFT"/>subtract(operand, operand2)<br ALIGN="LEFT"/>sum()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.shapes.NDArrayShapeMethods" [color="black", fontcolor="black", label=<{NDArrayShapeMethods|T<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/>diagonal()<br ALIGN="LEFT"/>flatten()<br ALIGN="LEFT"/>ravel()<br ALIGN="LEFT"/>reshape()<br ALIGN="LEFT"/>squeeze()<br ALIGN="LEFT"/>swapaxes()<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.nddata.NDData" [color="black", fontcolor="black", label=<{NDData|data<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>meta<br ALIGN="LEFT"/>psf<br ALIGN="LEFT"/>uncertainty<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>wcs<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.compat.NDDataArray" [color="black", fontcolor="black", label=<{NDDataArray|dtype<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>ndim<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>uncertainty<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|convert_unit_to(unit, equivalencies)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.nddata_base.NDDataBase" [color="black", fontcolor="black", label=<{NDDataBase|data<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>meta<br ALIGN="LEFT"/>psf<br ALIGN="LEFT"/>uncertainty<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>wcs<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_nddata.NDDataCustomWCS" [color="black", fontcolor="black", label=<{NDDataCustomWCS|wcs<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.mixins.ndio.NDDataRead" [color="black", fontcolor="black", label=<{NDDataRead|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.nddata_withmixins.NDDataRef" [color="black", fontcolor="black", label=<{NDDataRef|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.mixins.tests.test_ndslicing.NDDataSliceable" [color="black", fontcolor="black", label=<{NDDataSliceable|wcs : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.mixins.ndio.NDDataWrite" [color="black", fontcolor="black", label=<{NDDataWrite|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.mixins.ndio.NDIOMixin" [color="black", fontcolor="black", label=<{NDIOMixin|read<br ALIGN="LEFT"/>write<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.mixins.ndslicing.NDSlicingMixin" [color="black", fontcolor="black", label=<{NDSlicingMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.nduncertainty.NDUncertainty" [color="black", fontcolor="black", label=<{NDUncertainty|array<br ALIGN="LEFT"/>parent_nddata<br ALIGN="LEFT"/>quantity<br ALIGN="LEFT"/>supports_correlated<br ALIGN="LEFT"/>uncertainty_type<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|propagate(operation, other_nddata, result_data, correlation, axis)<br ALIGN="LEFT"/>represent_as(other_uncert)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.physical_models.NFW" [color="black", fontcolor="black", label=<{NFW|concentration<br ALIGN="LEFT"/>density_delta<br ALIGN="LEFT"/>density_s<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>mass<br ALIGN="LEFT"/>r_max<br ALIGN="LEFT"/>r_s<br ALIGN="LEFT"/>r_virial<br ALIGN="LEFT"/>radius_s<br ALIGN="LEFT"/>redshift<br ALIGN="LEFT"/>return_units<br ALIGN="LEFT"/>rho_scale<br ALIGN="LEFT"/>v_max<br ALIGN="LEFT"/>|A_NFW(y)<br ALIGN="LEFT"/>circular_velocity(r)<br ALIGN="LEFT"/>evaluate(r, mass, concentration, redshift)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_component_names_repr.NameChangeFrame" [color="black", fontcolor="black", label=<{NameChangeFrame|default_representation<br ALIGN="LEFT"/>frame_specific_representation_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.name_resolve.NameResolveError" [color="black", fontcolor="red", label=<{NameResolveError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.core.NamedUnit" [color="black", fontcolor="black", label=<{NamedUnit|aliases<br ALIGN="LEFT"/>long_names<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>names<br ALIGN="LEFT"/>short_names<br ALIGN="LEFT"/>|get_format_name(format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.core.NdarrayDistribution" [color="black", fontcolor="black", label=<{NdarrayDistribution|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.ndarray_mixin.NdarrayMixin" [color="black", fontcolor="black", label=<{NdarrayMixin|info<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.ndarray_mixin.NdarrayMixinInfo" [color="black", fontcolor="black", label=<{NdarrayMixinInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.NestingError" [color="black", fontcolor="red", label=<{NestingError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.NewDeprecationWarning" [color="black", fontcolor="red", label=<{NewDeprecationWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_nameless_frame_subclass.NewFrame" [color="black", fontcolor="black", label=<{NewFrame|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_representation_info.NewICRS1" [color="black", fontcolor="black", label=<{NewICRS1|frame_specific_representation_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_representation_info.NewICRS2" [color="black", fontcolor="black", label=<{NewICRS2|frame_specific_representation_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_representation_info.NewICRS3" [color="black", fontcolor="black", label=<{NewICRS3|frame_specific_representation_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.NewPendingDeprecationWarning" [color="black", fontcolor="red", label=<{NewPendingDeprecationWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_representation_subclass.NewSphericalRepresentation" [color="black", fontcolor="black", label=<{NewSphericalRepresentation|attr_classes : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_representation_subclass.NewUnitSphericalRepresentation" [color="black", fontcolor="black", label=<{NewUnitSphericalRepresentation|attr_classes : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.tests.test_wcs.test_no_iteration.NewWCS" [color="black", fontcolor="black", label=<{NewWCS|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed._codecs.NoCompress" [color="black", fontcolor="black", label=<{NoCompress|codec_id : str<br ALIGN="LEFT"/>|decode(buf)<br ALIGN="LEFT"/>encode(buf)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.wcs.NoConvergence" [color="black", fontcolor="red", label=<{NoConvergence|accuracy : NoneType<br ALIGN="LEFT"/>best_solution : NoneType<br ALIGN="LEFT"/>divergent : NoneType<br ALIGN="LEFT"/>niter : NoneType<br ALIGN="LEFT"/>slow_conv : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.spectral_coordinate.NoDistanceWarning" [color="black", fontcolor="red", label=<{NoDistanceWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.NoHeader" [color="black", fontcolor="black", label=<{NoHeader|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.NoHeaderData" [color="black", fontcolor="black", label=<{NoHeaderData|start_line : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.NoHeaderHeader" [color="black", fontcolor="black", label=<{NoHeaderHeader|start_line : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.NoMaskTestSetup" [color="black", fontcolor="black", label=<{NoMaskTestSetup|<br ALIGN="LEFT"/>|check(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.utils.NoOverlapError" [color="black", fontcolor="red", label=<{NoOverlapError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.NoType" [color="black", fontcolor="black", label=<{NoType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.NoUnitTestSetup" [color="black", fontcolor="black", label=<{NoUnitTestSetup|<br ALIGN="LEFT"/>|check(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.spectral_coordinate.NoVelocityWarning" [color="black", fontcolor="red", label=<{NoVelocityWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.bst.Node" [color="black", fontcolor="black", label=<{Node|data : list<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>left : NoneType<br ALIGN="LEFT"/>right : NoneType<br ALIGN="LEFT"/>|remove(child)<br ALIGN="LEFT"/>replace(child, new_child)<br ALIGN="LEFT"/>set(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.soco.Node" [color="black", fontcolor="black", label=<{Node|key<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.fitting.NonFiniteValueError" [color="black", fontcolor="red", label=<{NonFiniteValueError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_core.NonFittableModel" [color="black", fontcolor="black", label=<{NonFittableModel|a<br ALIGN="LEFT"/>bounding_box : tuple<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>|<I>evaluate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.errors.NonRotationTransformationError" [color="black", fontcolor="red", label=<{NonRotationTransformationError|frame_from<br ALIGN="LEFT"/>frame_to<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.errors.NonRotationTransformationWarning" [color="black", fontcolor="red", label=<{NonRotationTransformationWarning|frame_from<br ALIGN="LEFT"/>frame_to<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.base.NonstandardExtHDU" [color="black", fontcolor="black", label=<{NonstandardExtHDU|data<br ALIGN="LEFT"/>|match_header(header)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.util.NotifierMixin" [color="black", fontcolor="black", label=<{NotifierMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.NullLogger" [color="black", fontcolor="black", label=<{NullLogger|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.ply.lex.NullLogger" [color="black", fontcolor="black", label=<{NullLogger|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.NumType" [color="black", fontcolor="black", label=<{NumType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.converters.Numeric" [color="black", fontcolor="black", label=<{Numeric|array_type<br ALIGN="LEFT"/>default<br ALIGN="LEFT"/>is_null<br ALIGN="LEFT"/>null : NoneType<br ALIGN="LEFT"/>vararray_type<br ALIGN="LEFT"/>|binparse(read)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.NumericArray" [color="black", fontcolor="black", label=<{NumericArray|default : ndarray<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>vararray_type<br ALIGN="LEFT"/>|binoutput(value, mask)<br ALIGN="LEFT"/>binparse(read)<br ALIGN="LEFT"/>output(value, mask)<br ALIGN="LEFT"/>parse(value, config, pos)<br ALIGN="LEFT"/>parse_parts(parts, config, pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.misc.NumpyRNGContext" [color="black", fontcolor="black", label=<{NumpyRNGContext|seed<br ALIGN="LEFT"/>startstate<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.format.ogip.OGIP" [color="black", fontcolor="black", label=<{OGIP|<br ALIGN="LEFT"/>|format_exponential_notation(val: UnitScale \| np.number, format_spec: str): str<br ALIGN="LEFT"/>parse(s: str, debug: bool): UnitBase<br ALIGN="LEFT"/>to_string(unit: UnitBase, fraction: bool \| Literal['inline', 'multiline']): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.parameter.test_descriptors.Obj" [color="black", fontcolor="black", label=<{Obj|a : ClassVar[int]<br ALIGN="LEFT"/>attr<br ALIGN="LEFT"/>b : ClassVar[int]<br ALIGN="LEFT"/>c : ClassVar[int]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.parameter.test_descriptors.TestParametersAttribute.test_descriptor_attr_name_not_str.Obj2" [color="black", fontcolor="black", label=<{Obj2|attr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_bitmask.test_basic_map.ObservatoryDQMap" [color="black", fontcolor="black", label=<{ObservatoryDQMap|CR : tuple<br ALIGN="LEFT"/>DEAD : int<br ALIGN="LEFT"/>HOT : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_bitmask.test_extend_map.ObservatoryDQMap" [color="black", fontcolor="black", label=<{ObservatoryDQMap|CR : int<br ALIGN="LEFT"/>DEAD : int<br ALIGN="LEFT"/>HOT : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_bitmask.test_extend_map_redefine_flag.ObservatoryDQMap" [color="black", fontcolor="black", label=<{ObservatoryDQMap|CR : int<br ALIGN="LEFT"/>DEAD : int<br ALIGN="LEFT"/>HOT : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_bitmask.test_map_redefine_flag.ObservatoryDQMap" [color="black", fontcolor="black", label=<{ObservatoryDQMap|CR : int<br ALIGN="LEFT"/>DEAD : int<br ALIGN="LEFT"/>HOT : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_bitmask.test_map_cant_modify_version.ObservatoryDQMap" [color="black", fontcolor="black", label=<{ObservatoryDQMap|CR : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_bitmask.test_map_not_int_flag.ObservatoryDQMap" [color="black", fontcolor="black", label=<{ObservatoryDQMap|CR<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.tests.test_utils.test_wcs_to_celestial_frame_extend.OffsetFrame" [color="black", fontcolor="black", label=<{OffsetFrame|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.tests.test_utils.test_celestial_frame_to_wcs_extend.OffsetFrame" [color="black", fontcolor="black", label=<{OffsetFrame|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.core.OperandTypeError" [color="black", fontcolor="red", label=<{OperandTypeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.optimizers.Optimization" [color="black", fontcolor="black", label=<{Optimization|acc<br ALIGN="LEFT"/>eps<br ALIGN="LEFT"/>maxiter<br ALIGN="LEFT"/>opt_method<br ALIGN="LEFT"/>supported_constraints : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.OptionalTableImportError" [color="black", fontcolor="red", label=<{OptionalTableImportError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.tests.test_metadata.OrderedDictSubclass" [color="black", fontcolor="black", label=<{OrderedDictSubclass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.polynomial.OrthoPolynomialBase" [color="black", fontcolor="black", label=<{OrthoPolynomialBase|n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>x_degree<br ALIGN="LEFT"/>x_domain<br ALIGN="LEFT"/>x_window<br ALIGN="LEFT"/>y_degree<br ALIGN="LEFT"/>y_domain<br ALIGN="LEFT"/>y_window<br ALIGN="LEFT"/>|evaluate(x, y)<br ALIGN="LEFT"/>get_num_coeff()<br ALIGN="LEFT"/>imhorner(x, y, coeff)<br ALIGN="LEFT"/>invlex_coeff(coeffs)<br ALIGN="LEFT"/>prepare_inputs(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.OtherEmptyData" [color="black", fontcolor="black", label=<{OtherEmptyData|read : classmethod<br ALIGN="LEFT"/>write<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_distribution.TestComparison.setup_class.Override" [color="black", fontcolor="black", label=<{Override|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed._codecs.PLIO1" [color="black", fontcolor="black", label=<{PLIO1|codec_id : str<br ALIGN="LEFT"/>tilesize<br ALIGN="LEFT"/>|decode(buf)<br ALIGN="LEFT"/>encode(buf)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tree.Param" [color="black", fontcolor="black", label=<{Param|value<br ALIGN="LEFT"/>|to_xml(w)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tree.ParamRef" [color="black", fontcolor="black", label=<{ParamRef|ref<br ALIGN="LEFT"/>ucd : NoneType<br ALIGN="LEFT"/>utype : NoneType<br ALIGN="LEFT"/>|get_ref()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" [color="black", fontcolor="black", label=<{Parameter|default : Any<br ALIGN="LEFT"/>derived : bool<br ALIGN="LEFT"/>doc : str \| None<br ALIGN="LEFT"/>equivalencies : u.Equivalency \| Sequence[u.Equivalency]<br ALIGN="LEFT"/>fvalidate<br ALIGN="LEFT"/>name : Optional[str]<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|clone()<br ALIGN="LEFT"/>register_validator(key, fvalidate)<br ALIGN="LEFT"/>validate(cosmology, value)<br ALIGN="LEFT"/>validator(fvalidate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.parameters.Parameter" [color="black", fontcolor="black", label=<{Parameter|bounds<br ALIGN="LEFT"/>constraints : tuple<br ALIGN="LEFT"/>default<br ALIGN="LEFT"/>fixed<br ALIGN="LEFT"/>input_unit<br ALIGN="LEFT"/>internal_unit<br ALIGN="LEFT"/>max<br ALIGN="LEFT"/>min<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>posterior<br ALIGN="LEFT"/>prior<br ALIGN="LEFT"/>quantity<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>std<br ALIGN="LEFT"/>tied<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>validator<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|copy(name, description, default, unit, getter, setter, fixed, tied, min, max, bounds, prior, posterior)<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling._fitting_parallel.ParameterContainer" [color="black", fontcolor="black", label=<{ParameterContainer|dtype : float<br ALIGN="LEFT"/>ndim<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.parameters.ParameterDefinitionError" [color="black", fontcolor="red", label=<{ParameterDefinitionError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.parameters.ParameterError" [color="black", fontcolor="red", label=<{ParameterError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.ParameterError" [color="black", fontcolor="red", label=<{ParameterError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterFlatOde0TestMixin" [color="black", fontcolor="black", label=<{ParameterFlatOde0TestMixin|<br ALIGN="LEFT"/>|test_Ode0(cosmo: Cosmology)<br ALIGN="LEFT"/>test_Parameter_Ode0(cosmo_cls: type[Cosmology])<br ALIGN="LEFT"/>test_init_Ode0(cosmo_cls: type[Cosmology], ba: BoundArguments)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterH0TestMixin" [color="black", fontcolor="black", label=<{ParameterH0TestMixin|<br ALIGN="LEFT"/>|test_H0(cosmo_cls: type[Cosmology], cosmo: Cosmology)<br ALIGN="LEFT"/>test_init_H0(cosmo_cls: type[Cosmology], ba: BoundArguments)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterNeffTestMixin" [color="black", fontcolor="black", label=<{ParameterNeffTestMixin|<br ALIGN="LEFT"/>|test_Neff(cosmo_cls: type[Cosmology], cosmo: Cosmology)<br ALIGN="LEFT"/>test_init_Neff(cosmo_cls: type[Cosmology], ba: BoundArguments)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterOb0TestMixin" [color="black", fontcolor="black", label=<{ParameterOb0TestMixin|<br ALIGN="LEFT"/>|test_Ob0(cosmo_cls: type[Cosmology], cosmo: Cosmology)<br ALIGN="LEFT"/>test_init_Ob0(cosmo_cls: type[Cosmology], ba: BoundArguments)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterOde0TestMixin" [color="black", fontcolor="black", label=<{ParameterOde0TestMixin|<br ALIGN="LEFT"/>|test_Ode0(cosmo: Cosmology)<br ALIGN="LEFT"/>test_Parameter_Ode0(cosmo_cls: type[Cosmology])<br ALIGN="LEFT"/>test_Parameter_Ode0_validation(cosmo_cls: type[Cosmology], cosmo: Cosmology)<br ALIGN="LEFT"/>test_init_Ode0(cosmo_cls: type[Cosmology], ba: BoundArguments)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterOm0TestMixin" [color="black", fontcolor="black", label=<{ParameterOm0TestMixin|<br ALIGN="LEFT"/>|test_Om0(cosmo_cls: type[Cosmology], cosmo: Cosmology)<br ALIGN="LEFT"/>test_init_Om0(cosmo_cls: type[Cosmology], ba: BoundArguments)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterTcmb0TestMixin" [color="black", fontcolor="black", label=<{ParameterTcmb0TestMixin|<br ALIGN="LEFT"/>|test_Tcmb0(cosmo_cls: type[Cosmology], cosmo: Cosmology)<br ALIGN="LEFT"/>test_init_Tcmb0(cosmo_cls: type[Cosmology], ba: BoundArguments)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [color="black", fontcolor="black", label=<{ParameterTestMixin|<br ALIGN="LEFT"/>|all_parameter(cosmo_cls)<br ALIGN="LEFT"/>parameter(cosmo_cls)<br ALIGN="LEFT"/>test_Parameter_default(cosmo_cls, all_parameter)<br ALIGN="LEFT"/>test_Parameter_derived(cosmo_cls, all_parameter)<br ALIGN="LEFT"/>test_Parameter_descriptor_get(cosmo_cls, cosmo, all_parameter)<br ALIGN="LEFT"/>test_Parameter_descriptor_set(cosmo, all_parameter)<br ALIGN="LEFT"/>test_Parameter_equivalencies(all_parameter)<br ALIGN="LEFT"/>test_Parameter_fvalidate(all_parameter)<br ALIGN="LEFT"/>test_Parameter_instance_attributes(all_parameter)<br ALIGN="LEFT"/>test_Parameter_listed(cosmo_cls, all_parameter)<br ALIGN="LEFT"/>test_Parameter_name(all_parameter)<br ALIGN="LEFT"/>test_Parameter_unit(all_parameter)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_parameters.Parameterm_nuTestMixin" [color="black", fontcolor="black", label=<{Parameterm_nuTestMixin|<br ALIGN="LEFT"/>|test_init_m_nu(cosmo_cls: type[Cosmology], ba: BoundArguments)<br ALIGN="LEFT"/>test_init_m_nu_and_Neff(cosmo_cls: type[Cosmology], ba: BoundArguments)<br ALIGN="LEFT"/>test_init_m_nu_override_by_Tcmb0(cosmo_cls: type[Cosmology], ba: BoundArguments)<br ALIGN="LEFT"/>test_m_nu(cosmo_cls: type[Cosmology], cosmo: Cosmology)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.parameter.descriptors.ParametersAttribute" [color="black", fontcolor="black", label=<{ParametersAttribute|attr_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.parameter.test_descriptors.ParametersAttributeTestMixin" [color="black", fontcolor="black", label=<{ParametersAttributeTestMixin|<br ALIGN="LEFT"/>|test_parameters_cannot_set_on_instance(cosmo: Cosmology, name: str): None<br ALIGN="LEFT"/>test_parameters_from_class(cosmo_cls: type[Cosmology], name: str): None<br ALIGN="LEFT"/>test_parameters_from_instance(cosmo: Cosmology, name: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_w0cdm.Parameterw0TestMixin" [color="black", fontcolor="black", label=<{Parameterw0TestMixin|<br ALIGN="LEFT"/>|test_init_w0(cosmo_cls, ba)<br ALIGN="LEFT"/>test_w0(cosmo_cls, cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_w0wacdm.ParameterwaTestMixin" [color="black", fontcolor="black", label=<{ParameterwaTestMixin|<br ALIGN="LEFT"/>|test_init_wa(cosmo_cls, ba)<br ALIGN="LEFT"/>test_wa(cosmo_cls, cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_wpwazpcdm.ParameterwpTestMixin" [color="black", fontcolor="black", label=<{ParameterwpTestMixin|<br ALIGN="LEFT"/>|test_init_wp(cosmo_cls, ba)<br ALIGN="LEFT"/>test_wp(cosmo_cls, cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_w0wzcdm.ParameterwzTestMixin" [color="black", fontcolor="black", label=<{ParameterwzTestMixin|<br ALIGN="LEFT"/>|test_init_wz(cosmo_cls, ba)<br ALIGN="LEFT"/>test_wz(cosmo_cls, cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_wpwazpcdm.ParameterzpTestMixin" [color="black", fontcolor="black", label=<{ParameterzpTestMixin|<br ALIGN="LEFT"/>|test_init_zp(cosmo_cls, ba)<br ALIGN="LEFT"/>test_zp(cosmo_cls, cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_subclass.ParamsRow" [color="black", fontcolor="black", label=<{ParamsRow|<br ALIGN="LEFT"/>|keys()<br ALIGN="LEFT"/>values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_subclass.ParamsTable" [color="black", fontcolor="black", label=<{ParamsTable|Row<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.data_info.ParentAttribute" [color="black", fontcolor="black", label=<{ParentAttribute|attr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.data_info.ParentDtypeInfo" [color="black", fontcolor="black", label=<{ParentDtypeInfo|attrs_from_parent : set<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.ParseError" [color="black", fontcolor="red", label=<{ParseError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.ParserReflect" [color="black", fontcolor="black", label=<{ParserReflect|error : bool<br ALIGN="LEFT"/>error_func : NoneType<br ALIGN="LEFT"/>grammar : list<br ALIGN="LEFT"/>log<br ALIGN="LEFT"/>modules : set<br ALIGN="LEFT"/>pdict<br ALIGN="LEFT"/>pfuncs : list<br ALIGN="LEFT"/>prec<br ALIGN="LEFT"/>preclist : list<br ALIGN="LEFT"/>start : NoneType<br ALIGN="LEFT"/>tokens : NoneType<br ALIGN="LEFT"/>|get_all()<br ALIGN="LEFT"/>get_error_func()<br ALIGN="LEFT"/>get_pfunctions()<br ALIGN="LEFT"/>get_precedence()<br ALIGN="LEFT"/>get_start()<br ALIGN="LEFT"/>get_tokens()<br ALIGN="LEFT"/>signature()<br ALIGN="LEFT"/>validate_all()<br ALIGN="LEFT"/>validate_error_func()<br ALIGN="LEFT"/>validate_modules()<br ALIGN="LEFT"/>validate_pfunctions()<br ALIGN="LEFT"/>validate_precedence()<br ALIGN="LEFT"/>validate_start()<br ALIGN="LEFT"/>validate_tokens()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.utils.PartialOverlapError" [color="black", fontcolor="red", label=<{PartialOverlapError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_quantities_evaluation.test_compound_return_units.PassModel" [color="black", fontcolor="black", label=<{PassModel|input_units<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>return_units<br ALIGN="LEFT"/>|evaluate(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.interval.PercentileInterval" [color="black", fontcolor="black", label=<{PercentileInterval|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.physical.PhysicalType" [color="black", fontcolor="black", label=<{PhysicalType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_non_spherical_representation_unit_creation.PhysicsICRS" [color="black", fontcolor="black", label=<{PhysicsICRS|default_representation<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.representation.spherical.PhysicsSphericalDifferential" [color="black", fontcolor="black", label=<{PhysicsSphericalDifferential|base_representation<br ALIGN="LEFT"/>|from_representation(representation, base)<br ALIGN="LEFT"/>represent_as(other_class, base)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.spherical.PhysicsSphericalRepresentation" [color="black", fontcolor="black", label=<{PhysicsSphericalRepresentation|attr_classes : dict<br ALIGN="LEFT"/>phi<br ALIGN="LEFT"/>r<br ALIGN="LEFT"/>theta<br ALIGN="LEFT"/>|from_cartesian(cart)<br ALIGN="LEFT"/>norm()<br ALIGN="LEFT"/>represent_as(other_class, differential_class)<br ALIGN="LEFT"/>scale_factors()<br ALIGN="LEFT"/>to_cartesian()<br ALIGN="LEFT"/>transform(matrix)<br ALIGN="LEFT"/>unit_vectors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2SkyProjection" [color="black", fontcolor="black", label=<{Pix2SkyProjection|input_units<br ALIGN="LEFT"/>inputs : tuple<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>outputs : tuple<br ALIGN="LEFT"/>return_units<br ALIGN="LEFT"/>|evaluate(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_Airy" [color="black", fontcolor="black", label=<{Pix2Sky_Airy|theta_b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_BonneEqualArea" [color="black", fontcolor="black", label=<{Pix2Sky_BonneEqualArea|theta1<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_COBEQuadSphericalCube" [color="black", fontcolor="black", label=<{Pix2Sky_COBEQuadSphericalCube|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_ConicEqualArea" [color="black", fontcolor="black", label=<{Pix2Sky_ConicEqualArea|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_ConicEquidistant" [color="black", fontcolor="black", label=<{Pix2Sky_ConicEquidistant|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_ConicOrthomorphic" [color="black", fontcolor="black", label=<{Pix2Sky_ConicOrthomorphic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_ConicPerspective" [color="black", fontcolor="black", label=<{Pix2Sky_ConicPerspective|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_CylindricalEqualArea" [color="black", fontcolor="black", label=<{Pix2Sky_CylindricalEqualArea|lam<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_CylindricalPerspective" [color="black", fontcolor="black", label=<{Pix2Sky_CylindricalPerspective|lam<br ALIGN="LEFT"/>mu<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_Gnomonic" [color="black", fontcolor="black", label=<{Pix2Sky_Gnomonic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_HEALPix" [color="black", fontcolor="black", label=<{Pix2Sky_HEALPix|H<br ALIGN="LEFT"/>X<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_HEALPixPolar" [color="black", fontcolor="black", label=<{Pix2Sky_HEALPixPolar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_HammerAitoff" [color="black", fontcolor="black", label=<{Pix2Sky_HammerAitoff|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_Mercator" [color="black", fontcolor="black", label=<{Pix2Sky_Mercator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_Molleweide" [color="black", fontcolor="black", label=<{Pix2Sky_Molleweide|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_Parabolic" [color="black", fontcolor="black", label=<{Pix2Sky_Parabolic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_PlateCarree" [color="black", fontcolor="black", label=<{Pix2Sky_PlateCarree|<br ALIGN="LEFT"/>|evaluate(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_Polyconic" [color="black", fontcolor="black", label=<{Pix2Sky_Polyconic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_QuadSphericalCube" [color="black", fontcolor="black", label=<{Pix2Sky_QuadSphericalCube|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_SansonFlamsteed" [color="black", fontcolor="black", label=<{Pix2Sky_SansonFlamsteed|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_SlantOrthographic" [color="black", fontcolor="black", label=<{Pix2Sky_SlantOrthographic|eta<br ALIGN="LEFT"/>xi<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_SlantZenithalPerspective" [color="black", fontcolor="black", label=<{Pix2Sky_SlantZenithalPerspective|mu<br ALIGN="LEFT"/>phi0<br ALIGN="LEFT"/>theta0<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_Stereographic" [color="black", fontcolor="black", label=<{Pix2Sky_Stereographic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_TangentialSphericalCube" [color="black", fontcolor="black", label=<{Pix2Sky_TangentialSphericalCube|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_ZenithalEqualArea" [color="black", fontcolor="black", label=<{Pix2Sky_ZenithalEqualArea|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_ZenithalEquidistant" [color="black", fontcolor="black", label=<{Pix2Sky_ZenithalEquidistant|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Pix2Sky_ZenithalPerspective" [color="black", fontcolor="black", label=<{Pix2Sky_ZenithalPerspective|gamma<br ALIGN="LEFT"/>mu<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.transforms.Pixel2WorldTransform" [color="black", fontcolor="black", label=<{Pixel2WorldTransform|frame_out : NoneType<br ALIGN="LEFT"/>has_inverse : bool<br ALIGN="LEFT"/>output_dims<br ALIGN="LEFT"/>|<I>inverted</I>()<br ALIGN="LEFT"/><I>transform</I>(pixel)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Planar2D" [color="black", fontcolor="black", label=<{Planar2D|intercept<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>slope_x<br ALIGN="LEFT"/>slope_y<br ALIGN="LEFT"/>|evaluate(x, y, slope_x, slope_y, intercept)<br ALIGN="LEFT"/>fit_deriv(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.physical_models.Plummer1D" [color="black", fontcolor="black", label=<{Plummer1D|input_units<br ALIGN="LEFT"/>mass<br ALIGN="LEFT"/>r_plum<br ALIGN="LEFT"/>|evaluate(x, mass, r_plum)<br ALIGN="LEFT"/>fit_deriv(x, mass, r_plum)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.PlyLogger" [color="black", fontcolor="black", label=<{PlyLogger|critical<br ALIGN="LEFT"/>f<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>|debug(msg)<br ALIGN="LEFT"/>error(msg)<br ALIGN="LEFT"/>warning(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.ply.lex.PlyLogger" [color="black", fontcolor="black", label=<{PlyLogger|debug<br ALIGN="LEFT"/>f<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>|critical(msg)<br ALIGN="LEFT"/>error(msg)<br ALIGN="LEFT"/>warning(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.stats.bayesian_blocks.PointMeasures" [color="black", fontcolor="black", label=<{PointMeasures|<br ALIGN="LEFT"/>|fitness(a_k: NDArray[float], b_k: ArrayLike): NDArray[float]<br ALIGN="LEFT"/>validate_input(t: ArrayLike, x: ArrayLike \| None, sigma: float \| ArrayLike \| None): tuple[NDArray[float], NDArray[float], NDArray[float]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.polynomial.Polynomial1D" [color="black", fontcolor="black", label=<{Polynomial1D|bounding_box : tuple<br ALIGN="LEFT"/>c0 : int, list<br ALIGN="LEFT"/>c1 : int<br ALIGN="LEFT"/>domain : NoneType, tuple<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>inverse : NoneType<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>parameters : list<br ALIGN="LEFT"/>window : list, tuple<br ALIGN="LEFT"/>|evaluate(x)<br ALIGN="LEFT"/>fit_deriv(x)<br ALIGN="LEFT"/>horner(x, coeffs)<br ALIGN="LEFT"/>prepare_inputs(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.polynomial.Polynomial2D" [color="black", fontcolor="black", label=<{Polynomial2D|bounding_box<br ALIGN="LEFT"/>c0_0 : int<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>parameters : list<br ALIGN="LEFT"/>x_domain<br ALIGN="LEFT"/>x_window<br ALIGN="LEFT"/>y_domain<br ALIGN="LEFT"/>y_window<br ALIGN="LEFT"/>|evaluate(x, y)<br ALIGN="LEFT"/>fit_deriv(x, y)<br ALIGN="LEFT"/>invlex_coeff(coeffs)<br ALIGN="LEFT"/>multivariate_horner(x, y, coeffs)<br ALIGN="LEFT"/>prepare_inputs(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.polynomial.PolynomialBase" [color="black", fontcolor="black", label=<{PolynomialBase|col_fit_deriv : bool<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>param_names<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.polynomial.PolynomialModel" [color="black", fontcolor="black", label=<{PolynomialModel|degree<br ALIGN="LEFT"/>|get_num_coeff(ndim)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_structured.TestStructuredSpecificTypeQuantity.setup_class.PositionVelocity" [color="black", fontcolor="black", label=<{PositionVelocity|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.stretch.PowerDistStretch" [color="black", fontcolor="black", label=<{PowerDistStretch|a : float<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.powerlaws.PowerLaw1D" [color="black", fontcolor="black", label=<{PowerLaw1D|alpha<br ALIGN="LEFT"/>amplitude<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>|evaluate(x, amplitude, x_0, alpha)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, x_0, alpha)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.stretch.PowerStretch" [color="black", fontcolor="black", label=<{PowerStretch|a<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.table.PprintIncludeExclude" [color="black", fontcolor="black", label=<{PprintIncludeExclude|<br ALIGN="LEFT"/>|add(names)<br ALIGN="LEFT"/>remove(names)<br ALIGN="LEFT"/>set(names)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.gcrs.PrecessedGeocentric" [color="black", fontcolor="black", label=<{PrecessedGeocentric|equinox<br ALIGN="LEFT"/>obsgeoloc<br ALIGN="LEFT"/>obsgeovel<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.core.PrefixUnit" [color="black", fontcolor="black", label=<{PrefixUnit|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.ply.cpp.Preprocessor" [color="black", fontcolor="black", label=<{Preprocessor|ignore : dict<br ALIGN="LEFT"/>lexer : NoneType<br ALIGN="LEFT"/>macros : dict<br ALIGN="LEFT"/>parser : NoneType<br ALIGN="LEFT"/>path : list<br ALIGN="LEFT"/>source : NoneType, str<br ALIGN="LEFT"/>t_ID<br ALIGN="LEFT"/>t_INTEGER<br ALIGN="LEFT"/>t_INTEGER_TYPE<br ALIGN="LEFT"/>t_NEWLINE : NoneType<br ALIGN="LEFT"/>t_SPACE : NoneType<br ALIGN="LEFT"/>t_STRING<br ALIGN="LEFT"/>t_WS : tuple<br ALIGN="LEFT"/>temp_path : list<br ALIGN="LEFT"/>|add_path(path)<br ALIGN="LEFT"/>collect_args(tokenlist)<br ALIGN="LEFT"/>define(tokens)<br ALIGN="LEFT"/>error(file, line, msg)<br ALIGN="LEFT"/>evalexpr(tokens)<br ALIGN="LEFT"/>expand_macros(tokens, expanded)<br ALIGN="LEFT"/>group_lines(input)<br ALIGN="LEFT"/>include(tokens)<br ALIGN="LEFT"/>lexprobe()<br ALIGN="LEFT"/>macro_expand_args(macro, args)<br ALIGN="LEFT"/>macro_prescan(macro)<br ALIGN="LEFT"/>parse(input, source, ignore)<br ALIGN="LEFT"/>parsegen(input, source)<br ALIGN="LEFT"/>token()<br ALIGN="LEFT"/>tokenize(text)<br ALIGN="LEFT"/>tokenstrip(tokens)<br ALIGN="LEFT"/>undef(tokens)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.image.PrimaryHDU" [color="black", fontcolor="black", label=<{PrimaryHDU|data<br ALIGN="LEFT"/>header<br ALIGN="LEFT"/>level : int<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>ver : int<br ALIGN="LEFT"/>|match_header(header)<br ALIGN="LEFT"/>update_header()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.Production" [color="black", fontcolor="black", label=<{Production|callable : NoneType<br ALIGN="LEFT"/>file : str<br ALIGN="LEFT"/>func : NoneType<br ALIGN="LEFT"/>len<br ALIGN="LEFT"/>line : int<br ALIGN="LEFT"/>lr_items : list<br ALIGN="LEFT"/>lr_next : NoneType<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>number<br ALIGN="LEFT"/>prec : tuple<br ALIGN="LEFT"/>prod : tuple<br ALIGN="LEFT"/>reduced : int<br ALIGN="LEFT"/>str<br ALIGN="LEFT"/>usyms : list<br ALIGN="LEFT"/>|bind(pdict)<br ALIGN="LEFT"/>lr_item(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.console.ProgressBar" [color="black", fontcolor="black", label=<{ProgressBar|update<br ALIGN="LEFT"/>|map(function, items, multiprocess, file, step, ipython_widget, multiprocessing_start_method)<br ALIGN="LEFT"/>map_unordered(function, items, multiprocess, file, step, ipython_widget, multiprocessing_start_method)<br ALIGN="LEFT"/>update(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.console.ProgressBarOrSpinner" [color="black", fontcolor="black", label=<{ProgressBarOrSpinner|<br ALIGN="LEFT"/>|update(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.projections.Projection" [color="black", fontcolor="black", label=<{Projection|inverse<br ALIGN="LEFT"/>prjprm<br ALIGN="LEFT"/>r0<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.PseudoConic" [color="black", fontcolor="black", label=<{PseudoConic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.PseudoCylindrical" [color="black", fontcolor="black", label=<{PseudoCylindrical|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.qdp.QDP" [color="black", fontcolor="black", label=<{QDP|data_class<br ALIGN="LEFT"/>delimiter : NoneType<br ALIGN="LEFT"/>err_specs : NoneType<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>lines<br ALIGN="LEFT"/>names : NoneType<br ALIGN="LEFT"/>table_id : NoneType<br ALIGN="LEFT"/>|read(table)<br ALIGN="LEFT"/>write(table)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.qdp.QDPData" [color="black", fontcolor="black", label=<{QDPData|comment : str<br ALIGN="LEFT"/>fill_values : list<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>write_comment : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.qdp.QDPHeader" [color="black", fontcolor="black", label=<{QDPHeader|comment : str<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>write_comment : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.qdp.QDPSplitter" [color="black", fontcolor="black", label=<{QDPSplitter|delimiter : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.table.QTable" [color="black", fontcolor="black", label=<{QTable|meta : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.QuadCube" [color="black", fontcolor="black", label=<{QuadCube|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.patches.Quadrangle" [color="black", fontcolor="black", label=<{Quadrangle|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.quantity.Quantity" [color="black", fontcolor="black", label=<{Quantity|cgs<br ALIGN="LEFT"/>equivalencies<br ALIGN="LEFT"/>flat<br ALIGN="LEFT"/>foo : int<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>isscalar<br ALIGN="LEFT"/>si<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|all(axis, out)<br ALIGN="LEFT"/>any(axis, out)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/><I>choose</I>(choices, out, mode)<br ALIGN="LEFT"/>decompose(bases: Collection[UnitBase]): Self<br ALIGN="LEFT"/>diff(n, axis)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/><I>dump</I>(file)<br ALIGN="LEFT"/><I>dumps</I>()<br ALIGN="LEFT"/>ediff1d(to_end, to_begin)<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>insert(obj, values, axis)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>to(unit, equivalencies, copy)<br ALIGN="LEFT"/>to_string(unit, precision, format, subfmt)<br ALIGN="LEFT"/>to_value(unit, equivalencies)<br ALIGN="LEFT"/><I>tobytes</I>(order)<br ALIGN="LEFT"/><I>tofile</I>(fid, sep, format)<br ALIGN="LEFT"/><I>tolist</I>()<br ALIGN="LEFT"/><I>tostring</I>(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" [color="black", fontcolor="black", label=<{QuantityAttribute|shape : NoneType<br ALIGN="LEFT"/>unit : NoneType<br ALIGN="LEFT"/>|convert_input(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.quantity.QuantityInfo" [color="black", fontcolor="black", label=<{QuantityInfo|<br ALIGN="LEFT"/>|get_sortable_arrays()<br ALIGN="LEFT"/>new_like(cols, length, metadata_conflicts, name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.quantity.QuantityInfoBase" [color="black", fontcolor="black", label=<{QuantityInfoBase|attrs_from_parent : set<br ALIGN="LEFT"/>|default_format(val)<br ALIGN="LEFT"/>possible_string_format_functions(format_)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.decorators.QuantityInput" [color="black", fontcolor="black", label=<{QuantityInput|decorator_kwargs : dict<br ALIGN="LEFT"/>equivalencies<br ALIGN="LEFT"/>strict_dimensionless : bool<br ALIGN="LEFT"/>|as_decorator(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.quantity.QuantityIterator" [color="black", fontcolor="black", label=<{QuantityIterator|base<br ALIGN="LEFT"/>coords<br ALIGN="LEFT"/>index<br ALIGN="LEFT"/>next<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.QuantityMimic" [color="black", fontcolor="black", label=<{QuantityMimic|unit<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.QuantityMimic2" [color="black", fontcolor="black", label=<{QuantityMimic2|<br ALIGN="LEFT"/>|to(unit)<br ALIGN="LEFT"/>to_value(unit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.QuantitySetup" [color="black", fontcolor="black", label=<{QuantitySetup|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_functions.QuantitySetup" [color="black", fontcolor="black", label=<{QuantitySetup|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed._quantization.QuantizationFailedException" [color="black", fontcolor="red", label=<{QuantizationFailedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed._quantization.Quantize" [color="black", fontcolor="black", label=<{Quantize|bitpix<br ALIGN="LEFT"/>dither_method<br ALIGN="LEFT"/>quantize_level<br ALIGN="LEFT"/>row<br ALIGN="LEFT"/>|decode_quantized(buf, scale, zero)<br ALIGN="LEFT"/>encode_quantized(buf)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.index.QueryError" [color="black", fontcolor="red", label=<{QueryError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.basic_rgb.RGBImageMapping" [color="black", fontcolor="black", label=<{RGBImageMapping|intervals : list<br ALIGN="LEFT"/>stretch<br ALIGN="LEFT"/>|apply_mappings(image_r, image_g, image_b)<br ALIGN="LEFT"/>make_rgb_image(image_r, image_g, image_b, output_dtype)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.lupton_rgb.RGBImageMappingLupton" [color="black", fontcolor="black", label=<{RGBImageMappingLupton|<br ALIGN="LEFT"/>|apply_mappings(image_r, image_g, image_b)<br ALIGN="LEFT"/>intensity(image_r, image_g, image_b)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.rst.RST" [color="black", fontcolor="black", label=<{RST|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>|read(table)<br ALIGN="LEFT"/>write(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.spherical.RadialDifferential" [color="black", fontcolor="black", label=<{RadialDifferential|base_representation<br ALIGN="LEFT"/>|from_cartesian(other, base)<br ALIGN="LEFT"/>from_representation(representation, base)<br ALIGN="LEFT"/>norm(base)<br ALIGN="LEFT"/>to_cartesian(base)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.spherical.RadialRepresentation" [color="black", fontcolor="black", label=<{RadialRepresentation|attr_classes : dict<br ALIGN="LEFT"/>distance<br ALIGN="LEFT"/>|from_cartesian(cart)<br ALIGN="LEFT"/>norm()<br ALIGN="LEFT"/>scale_factors()<br ALIGN="LEFT"/><I>to_cartesian</I>()<br ALIGN="LEFT"/>transform(matrix)<br ALIGN="LEFT"/><I>unit_vectors</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.angles.errors.RangeError" [color="black", fontcolor="red", label=<{RangeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.diff.RawDataDiff" [color="black", fontcolor="black", label=<{RawDataDiff|a : NoneType<br ALIGN="LEFT"/>b : NoneType<br ALIGN="LEFT"/>diff_bytes : list<br ALIGN="LEFT"/>diff_dimensions : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.Rdb" [color="black", fontcolor="black", label=<{Rdb|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.RdbData" [color="black", fontcolor="black", label=<{RdbData|start_line : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.RdbHeader" [color="black", fontcolor="black", label=<{RdbHeader|col_type_map : dict<br ALIGN="LEFT"/>names<br ALIGN="LEFT"/>|get_cols(lines)<br ALIGN="LEFT"/>get_type_map_key(col)<br ALIGN="LEFT"/>write(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.base.ReadWriteDirectTestBase" [color="black", fontcolor="black", label=<{ReadWriteDirectTestBase|<br ALIGN="LEFT"/>|read()<br ALIGN="LEFT"/>write(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_ecsv.ReadWriteECSVTestMixin" [color="black", fontcolor="black", label=<{ReadWriteECSVTestMixin|<br ALIGN="LEFT"/>|test_readwrite_ecsv_instance(cosmo_cls, cosmo, read, write, tmp_path, add_cu)<br ALIGN="LEFT"/>test_readwrite_ecsv_mutlirow(cosmo, read, write, tmp_path, add_cu)<br ALIGN="LEFT"/>test_readwrite_ecsv_renamed_columns(cosmo_cls, cosmo, read, write, tmp_path, add_cu)<br ALIGN="LEFT"/>test_readwrite_ecsv_subclass_partial_info(cosmo_cls, cosmo, read, write, tmp_path, add_cu)<br ALIGN="LEFT"/>test_to_ecsv_bad_index(read, write, tmp_path)<br ALIGN="LEFT"/>test_to_ecsv_cls(write, tbl_cls, tmp_path)<br ALIGN="LEFT"/>test_to_ecsv_failed_cls(write, tmp_path)<br ALIGN="LEFT"/>test_to_ecsv_in_meta(cosmo_cls, write, in_meta, tmp_path, add_cu)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_html.ReadWriteHTMLTestMixin" [color="black", fontcolor="black", label=<{ReadWriteHTMLTestMixin|<br ALIGN="LEFT"/>|test_readwrite_html_mutlirow(cosmo, read, write, tmp_path, add_cu)<br ALIGN="LEFT"/>test_readwrite_html_subclass_partial_info(cosmo_cls, cosmo, read, write, latex_names, tmp_path, add_cu)<br ALIGN="LEFT"/>test_readwrite_html_table_instance(cosmo_cls, cosmo, read, write, tmp_path, add_cu)<br ALIGN="LEFT"/>test_rename_html_table_columns(read, write, tmp_path)<br ALIGN="LEFT"/>test_to_html_table_bad_index(read, write, tmp_path)<br ALIGN="LEFT"/>test_to_html_table_cls(write, tbl_cls, tmp_path)<br ALIGN="LEFT"/>test_to_html_table_failed_cls(write, tmp_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_json.ReadWriteJSONTestMixin" [color="black", fontcolor="black", label=<{ReadWriteJSONTestMixin|<br ALIGN="LEFT"/>|register_and_unregister_json()<br ALIGN="LEFT"/>test_readwrite_json_subclass_partial_info(cosmo_cls, cosmo, read, write, tmp_path, add_cu)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_connect.ReadWriteTestMixin" [color="black", fontcolor="black", label=<{ReadWriteTestMixin|<br ALIGN="LEFT"/>|test_readwrite_complete_info(cosmo, tmp_path, format, metaio, has_deps)<br ALIGN="LEFT"/>test_readwrite_from_subclass_complete_info(cosmo_cls, cosmo, tmp_path, format, metaio, has_deps)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.base.ReadWriteTestMixinBase" [color="black", fontcolor="black", label=<{ReadWriteTestMixinBase|<br ALIGN="LEFT"/>|add_cu()<br ALIGN="LEFT"/>read()<br ALIGN="LEFT"/>write(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.typing.ReadableFileLike" [color="black", fontcolor="black", label=<{ReadableFileLike|<br ALIGN="LEFT"/>|read(): _T_co<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.tests.test_helpers.Receiver" [color="black", fontcolor="black", label=<{Receiver|client<br ALIGN="LEFT"/>|receive_call(private_key, sender_id, msg_id, mtype, params, extra)<br ALIGN="LEFT"/>receive_notification(private_key, sender_id, mtype, params, extra)<br ALIGN="LEFT"/><I>receive_response</I>(private_key, sender_id, msg_id, response)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.irafutil.Record" [color="black", fontcolor="black", label=<{Record|fields : dict<br ALIGN="LEFT"/>recstr<br ALIGN="LEFT"/>taskname : NoneType<br ALIGN="LEFT"/>|aslist()<br ALIGN="LEFT"/>get_fields()<br ALIGN="LEFT"/>get_task_name()<br ALIGN="LEFT"/>read_array_field(fieldlist)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.frame.RectangularFrame" [color="black", fontcolor="black", label=<{RectangularFrame|spine_names : str<br ALIGN="LEFT"/>|update_spines()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.frame.RectangularFrame1D" [color="black", fontcolor="black", label=<{RectangularFrame1D|spine_class<br ALIGN="LEFT"/>spine_names : str<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>update_spines()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.RedshiftScaleFactor" [color="black", fontcolor="black", label=<{RedshiftScaleFactor|bounding_box : tuple<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|evaluate(x, z)<br ALIGN="LEFT"/>fit_deriv(x, z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.stats.bayesian_blocks.RegularEvents" [color="black", fontcolor="black", label=<{RegularEvents|dt : float<br ALIGN="LEFT"/>|fitness(T_k: NDArray[float], N_k: NDArray[float]): NDArray[float]<br ALIGN="LEFT"/>validate_input(t: ArrayLike, x: ArrayLike \| None, sigma: float \| ArrayLike \| None): tuple[NDArray[float], NDArray[float], NDArray[float]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.function.mixin.RegularFunctionUnit" [color="black", fontcolor="black", label=<{RegularFunctionUnit|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.irafutil.ReidentifyRecord" [color="black", fontcolor="black", label=<{ReidentifyRecord|x : ndarray<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>z : ndarray<br ALIGN="LEFT"/>|get_ydata()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.ReloadError" [color="black", fontcolor="red", label=<{ReloadError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.RepeatSectionError" [color="black", fontcolor="red", label=<{RepeatSectionError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.representation.base.RepresentationInfo" [color="black", fontcolor="black", label=<{RepresentationInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.baseframe.RepresentationMapping" [color="black", fontcolor="black", label=<{RepresentationMapping|defaultunit : str \| Unit<br ALIGN="LEFT"/>framename : str<br ALIGN="LEFT"/>reprname : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree.Resource" [color="black", fontcolor="black", label=<{Resource|ID : NoneType<br ALIGN="LEFT"/>coordinate_systems<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>extra_attributes<br ALIGN="LEFT"/>groups<br ALIGN="LEFT"/>infos<br ALIGN="LEFT"/>links<br ALIGN="LEFT"/>mivot_block<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>resources<br ALIGN="LEFT"/>tables<br ALIGN="LEFT"/>time_systems<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>utype : NoneType<br ALIGN="LEFT"/>|iter_coosys()<br ALIGN="LEFT"/>iter_fields_and_params()<br ALIGN="LEFT"/>iter_info()<br ALIGN="LEFT"/>iter_tables()<br ALIGN="LEFT"/>iter_timesys()<br ALIGN="LEFT"/>parse(votable, iterator, config)<br ALIGN="LEFT"/>to_xml(w)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.validator.result.Result" [color="black", fontcolor="black", label=<{Result|timeout : int<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>|download_xml_content()<br ALIGN="LEFT"/>get_attribute_path()<br ALIGN="LEFT"/>get_dirpath()<br ALIGN="LEFT"/>get_htmlpath()<br ALIGN="LEFT"/>get_vo_xml_path()<br ALIGN="LEFT"/>get_xml_content()<br ALIGN="LEFT"/>has_warning(warning_code)<br ALIGN="LEFT"/>load_attributes()<br ALIGN="LEFT"/>match_expectations()<br ALIGN="LEFT"/>save_attributes()<br ALIGN="LEFT"/>validate_vo()<br ALIGN="LEFT"/>validate_with_votlint(path_to_stilts_jar)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed._codecs.Rice1" [color="black", fontcolor="black", label=<{Rice1|blocksize<br ALIGN="LEFT"/>bytepix<br ALIGN="LEFT"/>codec_id : str<br ALIGN="LEFT"/>tilesize<br ALIGN="LEFT"/>|decode(buf)<br ALIGN="LEFT"/>encode(buf)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.RickerWavelet1D" [color="black", fontcolor="black", label=<{RickerWavelet1D|amplitude<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>sigma<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>|bounding_box(factor)<br ALIGN="LEFT"/>evaluate(x, amplitude, x_0, sigma)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.RickerWavelet1DKernel" [color="black", fontcolor="black", label=<{RickerWavelet1DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.RickerWavelet2D" [color="black", fontcolor="black", label=<{RickerWavelet2D|amplitude<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>sigma<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>y_0<br ALIGN="LEFT"/>|evaluate(x, y, amplitude, x_0, y_0, sigma)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.RickerWavelet2DKernel" [color="black", fontcolor="black", label=<{RickerWavelet2DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Ring2D" [color="black", fontcolor="black", label=<{Ring2D|amplitude<br ALIGN="LEFT"/>bounding_box<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>r_in<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>y_0<br ALIGN="LEFT"/>|evaluate(x, y, amplitude, x_0, y_0, r_in, width)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.Ring2DKernel" [color="black", fontcolor="black", label=<{Ring2DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.stats.spatial.RipleysKEstimator" [color="black", fontcolor="black", label=<{RipleysKEstimator|area<br ALIGN="LEFT"/>x_max<br ALIGN="LEFT"/>x_min<br ALIGN="LEFT"/>y_max<br ALIGN="LEFT"/>y_min<br ALIGN="LEFT"/>|Hfunction(data: NDArray[float], radii: NDArray[float], mode: _ModeOps): NDArray[float]<br ALIGN="LEFT"/>Lfunction(data: NDArray[float], radii: NDArray[float], mode: _ModeOps): NDArray[float]<br ALIGN="LEFT"/>evaluate(data: NDArray[float], radii: NDArray[float], mode: _ModeOps): NDArray[float]<br ALIGN="LEFT"/>poisson(radii: NDArray[float]): NDArray[float]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitters.TestNonLinearFitters.test_simplex_lsq_fitter.Rosenbrock" [color="black", fontcolor="black", label=<{Rosenbrock|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|evaluate(x, y, a, b)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.rotations.RotateCelestial2Native" [color="black", fontcolor="black", label=<{RotateCelestial2Native|input_units<br ALIGN="LEFT"/>inputs : tuple<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>outputs : tuple<br ALIGN="LEFT"/>return_units<br ALIGN="LEFT"/>|evaluate(alpha_C, delta_C, lon, lat, lon_pole)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.rotations.RotateNative2Celestial" [color="black", fontcolor="black", label=<{RotateNative2Celestial|input_units<br ALIGN="LEFT"/>inputs : tuple<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>outputs : tuple<br ALIGN="LEFT"/>return_units<br ALIGN="LEFT"/>|evaluate(phi_N, theta_N, lon, lat, lon_pole)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.rotations.Rotation2D" [color="black", fontcolor="black", label=<{Rotation2D|angle<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>|evaluate(x, y, angle)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.rotations.RotationSequence3D" [color="black", fontcolor="black", label=<{RotationSequence3D|angles<br ALIGN="LEFT"/>axes : list<br ALIGN="LEFT"/>axes_order<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>standard_broadcasting : bool<br ALIGN="LEFT"/>|evaluate(x, y, z, angles)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_format.RoundtripBase" [color="black", fontcolor="black", label=<{RoundtripBase|<br ALIGN="LEFT"/>|check_roundtrip(unit, output_format)<br ALIGN="LEFT"/>check_roundtrip_decompose(unit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.row.Row" [color="black", fontcolor="black", label=<{Row|colnames<br ALIGN="LEFT"/>columns<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>index<br ALIGN="LEFT"/>meta<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>|as_void()<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>keys()<br ALIGN="LEFT"/>values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.client.SAMPClient" [color="black", fontcolor="black", label=<{SAMPClient|client : NoneType<br ALIGN="LEFT"/>hub<br ALIGN="LEFT"/>is_registered<br ALIGN="LEFT"/>is_running<br ALIGN="LEFT"/>|bind_receive_call(mtype, function, declare, metadata)<br ALIGN="LEFT"/>bind_receive_message(mtype, function, declare, metadata)<br ALIGN="LEFT"/>bind_receive_notification(mtype, function, declare, metadata)<br ALIGN="LEFT"/>bind_receive_response(msg_tag, function)<br ALIGN="LEFT"/>declare_metadata(metadata)<br ALIGN="LEFT"/>declare_subscriptions(subscriptions)<br ALIGN="LEFT"/>get_private_key()<br ALIGN="LEFT"/>get_public_id()<br ALIGN="LEFT"/>receive_call(private_key, sender_id, msg_id, message)<br ALIGN="LEFT"/>receive_notification(private_key, sender_id, message)<br ALIGN="LEFT"/>receive_response(private_key, responder_id, msg_tag, response)<br ALIGN="LEFT"/>register()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop(timeout)<br ALIGN="LEFT"/>unbind_receive_call(mtype, declare)<br ALIGN="LEFT"/>unbind_receive_notification(mtype, declare)<br ALIGN="LEFT"/>unbind_receive_response(msg_tag)<br ALIGN="LEFT"/>unregister()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.errors.SAMPClientError" [color="black", fontcolor="red", label=<{SAMPClientError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.samp.errors.SAMPHubError" [color="black", fontcolor="red", label=<{SAMPHubError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.samp.hub_proxy.SAMPHubProxy" [color="black", fontcolor="black", label=<{SAMPHubProxy|is_connected<br ALIGN="LEFT"/>lockfile : dict<br ALIGN="LEFT"/>proxy : NoneType<br ALIGN="LEFT"/>|call(private_key, recipient_id, msg_tag, message)<br ALIGN="LEFT"/>call_all(private_key, msg_tag, message)<br ALIGN="LEFT"/>call_and_wait(private_key, recipient_id, message, timeout)<br ALIGN="LEFT"/>connect(hub, hub_params, pool_size)<br ALIGN="LEFT"/>declare_metadata(private_key, metadata)<br ALIGN="LEFT"/>declare_subscriptions(private_key, subscriptions)<br ALIGN="LEFT"/>disconnect()<br ALIGN="LEFT"/>get_metadata(private_key, client_id)<br ALIGN="LEFT"/>get_registered_clients(private_key)<br ALIGN="LEFT"/>get_subscribed_clients(private_key, mtype)<br ALIGN="LEFT"/>get_subscriptions(private_key, client_id)<br ALIGN="LEFT"/>notify(private_key, recipient_id, message)<br ALIGN="LEFT"/>notify_all(private_key, message)<br ALIGN="LEFT"/>ping()<br ALIGN="LEFT"/>register(secret)<br ALIGN="LEFT"/>reply(private_key, msg_id, response)<br ALIGN="LEFT"/>set_xmlrpc_callback(private_key, xmlrpc_addr)<br ALIGN="LEFT"/>unregister(private_key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.hub.SAMPHubServer" [color="black", fontcolor="black", label=<{SAMPHubServer|id<br ALIGN="LEFT"/>is_running<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|get_mtype_subtypes(mtype)<br ALIGN="LEFT"/>start(wait)<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.integrated_client.SAMPIntegratedClient" [color="black", fontcolor="black", label=<{SAMPIntegratedClient|client : NoneType<br ALIGN="LEFT"/>client_arguments : dict<br ALIGN="LEFT"/>hub<br ALIGN="LEFT"/>is_connected<br ALIGN="LEFT"/>|bind_receive_call(mtype, function, declare, metadata)<br ALIGN="LEFT"/>bind_receive_message(mtype, function, declare, metadata)<br ALIGN="LEFT"/>bind_receive_notification(mtype, function, declare, metadata)<br ALIGN="LEFT"/>bind_receive_response(msg_tag, function)<br ALIGN="LEFT"/>call(recipient_id, msg_tag, message)<br ALIGN="LEFT"/>call_all(msg_tag, message)<br ALIGN="LEFT"/>call_and_wait(recipient_id, message, timeout)<br ALIGN="LEFT"/>connect(hub, hub_params, pool_size)<br ALIGN="LEFT"/>declare_metadata(metadata)<br ALIGN="LEFT"/>declare_subscriptions(subscriptions)<br ALIGN="LEFT"/>disconnect()<br ALIGN="LEFT"/>ecall(recipient_id, msg_tag, mtype)<br ALIGN="LEFT"/>ecall_all(msg_tag, mtype)<br ALIGN="LEFT"/>ecall_and_wait(recipient_id, mtype, timeout)<br ALIGN="LEFT"/>enotify(recipient_id, mtype)<br ALIGN="LEFT"/>enotify_all(mtype)<br ALIGN="LEFT"/>ereply(msg_id, status, result, error)<br ALIGN="LEFT"/>get_metadata(client_id)<br ALIGN="LEFT"/>get_private_key()<br ALIGN="LEFT"/>get_public_id()<br ALIGN="LEFT"/>get_registered_clients()<br ALIGN="LEFT"/>get_subscribed_clients(mtype)<br ALIGN="LEFT"/>get_subscriptions(client_id)<br ALIGN="LEFT"/>notify(recipient_id, message)<br ALIGN="LEFT"/>notify_all(message)<br ALIGN="LEFT"/>ping()<br ALIGN="LEFT"/>receive_call(private_key, sender_id, msg_id, message)<br ALIGN="LEFT"/>receive_notification(private_key, sender_id, message)<br ALIGN="LEFT"/>receive_response(private_key, responder_id, msg_tag, response)<br ALIGN="LEFT"/>reply(msg_id, response)<br ALIGN="LEFT"/>unbind_receive_call(mtype, declare)<br ALIGN="LEFT"/>unbind_receive_notification(mtype, declare)<br ALIGN="LEFT"/>unbind_receive_response(msg_tag)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.tests.web_profile_test_helpers.SAMPIntegratedWebClient" [color="black", fontcolor="black", label=<{SAMPIntegratedWebClient|client<br ALIGN="LEFT"/>hub<br ALIGN="LEFT"/>|connect(pool_size, web_port)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.utils.SAMPMsgReplierWrapper" [color="black", fontcolor="black", label=<{SAMPMsgReplierWrapper|cli<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.samp.errors.SAMPProxyError" [color="black", fontcolor="red", label=<{SAMPProxyError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.samp.standard_profile.SAMPSimpleXMLRPCRequestHandler" [color="black", fontcolor="black", label=<{SAMPSimpleXMLRPCRequestHandler|<br ALIGN="LEFT"/>|do_GET()<br ALIGN="LEFT"/>do_POST()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.errors.SAMPWarning" [color="black", fontcolor="red", label=<{SAMPWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.samp.tests.web_profile_test_helpers.SAMPWebClient" [color="black", fontcolor="black", label=<{SAMPWebClient|client : NoneType<br ALIGN="LEFT"/>hub<br ALIGN="LEFT"/>|register()<br ALIGN="LEFT"/>unregister()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.tests.web_profile_test_helpers.SAMPWebHubProxy" [color="black", fontcolor="black", label=<{SAMPWebHubProxy|proxy<br ALIGN="LEFT"/>|allow_reverse_callbacks(private_key, allow)<br ALIGN="LEFT"/>connect(pool_size, web_port)<br ALIGN="LEFT"/>pull_callbacks(private_key, timeout)<br ALIGN="LEFT"/>register(identity_info)<br ALIGN="LEFT"/><I>set_xmlrpc_callback</I>(private_key, xmlrpc_addr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.soco.SCEngine" [color="black", fontcolor="black", label=<{SCEngine|<br ALIGN="LEFT"/>|add(key, value)<br ALIGN="LEFT"/>find(key)<br ALIGN="LEFT"/>items()<br ALIGN="LEFT"/>range(lower, upper, bounds)<br ALIGN="LEFT"/>remove(key, data)<br ALIGN="LEFT"/>replace_rows(row_map)<br ALIGN="LEFT"/>shift_left(row)<br ALIGN="LEFT"/>shift_right(row)<br ALIGN="LEFT"/>sort()<br ALIGN="LEFT"/>sorted_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.sextractor.SExtractor" [color="black", fontcolor="black", label=<{SExtractor|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>inputter_class<br ALIGN="LEFT"/>|read(table)<br ALIGN="LEFT"/><I>write</I>(table)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.sextractor.SExtractorData" [color="black", fontcolor="black", label=<{SExtractorData|comment : str<br ALIGN="LEFT"/>delimiter : str<br ALIGN="LEFT"/>start_line : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.sextractor.SExtractorHeader" [color="black", fontcolor="black", label=<{SExtractorHeader|cols : list<br ALIGN="LEFT"/>comment : str<br ALIGN="LEFT"/>names : list<br ALIGN="LEFT"/>|get_cols(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.polynomial.SIP" [color="black", fontcolor="black", label=<{SIP|inputs : tuple<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>shift_a<br ALIGN="LEFT"/>shift_b<br ALIGN="LEFT"/>sip1d_a<br ALIGN="LEFT"/>sip1d_b<br ALIGN="LEFT"/>|evaluate(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.optimizers.SLSQP" [color="black", fontcolor="black", label=<{SLSQP|fit_info : dict<br ALIGN="LEFT"/>supported_constraints : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.fitting.SLSQPLSQFitter" [color="black", fontcolor="black", label=<{SLSQPLSQFitter|fit_info : dict<br ALIGN="LEFT"/>supported_constraints : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.uncertainty.core.ScalarDistribution" [color="black", fontcolor="black", label=<{ScalarDistribution|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.formatter_locator.ScalarFormatterLocator" [color="black", fontcolor="black", label=<{ScalarFormatterLocator|base_spacing<br ALIGN="LEFT"/>decimal : NoneType<br ALIGN="LEFT"/>format<br ALIGN="LEFT"/>format_unit<br ALIGN="LEFT"/>number<br ALIGN="LEFT"/>sep<br ALIGN="LEFT"/>show_decimal_unit : bool<br ALIGN="LEFT"/>spacing<br ALIGN="LEFT"/>values<br ALIGN="LEFT"/>|formatter(values, spacing, format)<br ALIGN="LEFT"/>locator(value_min, value_max)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.ScalarVarArray" [color="black", fontcolor="black", label=<{ScalarVarArray|<br ALIGN="LEFT"/>|parse(value, config, pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Scale" [color="black", fontcolor="black", label=<{Scale|bounding_box : tuple<br ALIGN="LEFT"/>factor<br ALIGN="LEFT"/>fittable : bool<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|evaluate(x, factor)<br ALIGN="LEFT"/>fit_deriv(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_quantities_evaluation.test_compound_input_units_strict.ScaleDegrees" [color="black", fontcolor="black", label=<{ScaleDegrees|input_units : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_quantities_evaluation.test_compound_input_units_allow_dimensionless.ScaleDegrees" [color="black", fontcolor="black", label=<{ScaleDegrees|input_units : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.core.ScaleValueError" [color="black", fontcolor="red", label=<{ScaleValueError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.powerlaws.Schechter1D" [color="black", fontcolor="black", label=<{Schechter1D|alpha<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>m_star<br ALIGN="LEFT"/>phi_star<br ALIGN="LEFT"/>|evaluate(mag, phi_star, m_star, alpha)<br ALIGN="LEFT"/>fit_deriv(mag, phi_star, m_star, alpha)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.state.ScienceState" [color="black", fontcolor="black", label=<{ScienceState|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>set(value)<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.Section" [color="black", fontcolor="black", label=<{Section|comments : dict<br ALIGN="LEFT"/>configspec : NoneType<br ALIGN="LEFT"/>default_values : dict<br ALIGN="LEFT"/>defaults : list<br ALIGN="LEFT"/>depth<br ALIGN="LEFT"/>extra_values : list<br ALIGN="LEFT"/>inline_comments : dict<br ALIGN="LEFT"/>main<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>scalars : list<br ALIGN="LEFT"/>sections : list<br ALIGN="LEFT"/>|as_bool(key)<br ALIGN="LEFT"/>as_float(key)<br ALIGN="LEFT"/>as_int(key)<br ALIGN="LEFT"/>as_list(key)<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>dict()<br ALIGN="LEFT"/>get(key, default)<br ALIGN="LEFT"/>items()<br ALIGN="LEFT"/>iteritems()<br ALIGN="LEFT"/>iterkeys()<br ALIGN="LEFT"/>itervalues()<br ALIGN="LEFT"/>keys()<br ALIGN="LEFT"/>merge(indict)<br ALIGN="LEFT"/>pop(key, default)<br ALIGN="LEFT"/>popitem()<br ALIGN="LEFT"/>rename(oldkey, newkey)<br ALIGN="LEFT"/>restore_default(key)<br ALIGN="LEFT"/>restore_defaults()<br ALIGN="LEFT"/>setdefault(key, default)<br ALIGN="LEFT"/>update(indict)<br ALIGN="LEFT"/>values()<br ALIGN="LEFT"/>walk(function, raise_errors, call_on_sections)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.image.Section" [color="black", fontcolor="black", label=<{Section|dtype<br ALIGN="LEFT"/>hdu<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.parameter.core.Sentinel" [color="black", fontcolor="black", label=<{Sentinel|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_separation.SeparationExpectation" [color="black", fontcolor="black", label=<{SeparationExpectation|coord : BaseCoordinateFrame \| SkyCoord<br ALIGN="LEFT"/>position_angle<br ALIGN="LEFT"/>pytest_id : str<br ALIGN="LEFT"/>reversed_position_angle<br ALIGN="LEFT"/>reversed_separation<br ALIGN="LEFT"/>reversed_separation_3d<br ALIGN="LEFT"/>separation<br ALIGN="LEFT"/>separation_3d<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.serialize.SerializedColumn" [color="black", fontcolor="black", label=<{SerializedColumn|info<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.serialize.SerializedColumnInfo" [color="black", fontcolor="black", label=<{SerializedColumnInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.tests.test_high_level_api.SerializedWCS" [color="black", fontcolor="black", label=<{SerializedWCS|pixel_n_dim<br ALIGN="LEFT"/>serialized_classes<br ALIGN="LEFT"/>world_axis_object_classes<br ALIGN="LEFT"/>world_axis_object_components<br ALIGN="LEFT"/>world_axis_physical_types<br ALIGN="LEFT"/>world_axis_units<br ALIGN="LEFT"/>world_n_dim<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Sersic1D" [color="black", fontcolor="black", label=<{Sersic1D|amplitude<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>r_eff<br ALIGN="LEFT"/>|evaluate(r, amplitude, r_eff, n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Sersic2D" [color="black", fontcolor="black", label=<{Sersic2D|amplitude<br ALIGN="LEFT"/>ellip<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>r_eff<br ALIGN="LEFT"/>theta<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>y_0<br ALIGN="LEFT"/>|evaluate(x, y, amplitude, r_eff, n, x_0, y_0, ellip, theta, c)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.utils.ServerProxyPool" [color="black", fontcolor="black", label=<{ServerProxyPool|<br ALIGN="LEFT"/>|shutdown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_parameters.SetterModel" [color="black", fontcolor="black", label=<{SetterModel|n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>p<br ALIGN="LEFT"/>xc<br ALIGN="LEFT"/>yc<br ALIGN="LEFT"/>|<I>do_something</I>(v)<br ALIGN="LEFT"/>evaluate(x, y, xc, yc)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.SetupData" [color="black", fontcolor="black", label=<{SetupData|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>c<br ALIGN="LEFT"/>d<br ALIGN="LEFT"/>obj<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_masked.SetupData" [color="black", fontcolor="black", label=<{SetupData|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>c<br ALIGN="LEFT"/>ca<br ALIGN="LEFT"/>d<br ALIGN="LEFT"/>d_mask : ndarray<br ALIGN="LEFT"/>sc<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>|setup_method(method)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.tests.test_nddata.test_nddata_init_data_fail.Shape" [color="black", fontcolor="black", label=<{Shape|shape : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_methods.ShapeSetup" [color="black", fontcolor="black", label=<{ShapeSetup|c0<br ALIGN="LEFT"/>diff<br ALIGN="LEFT"/>s0<br ALIGN="LEFT"/>s1<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_methods.ShapeSetup" [color="black", fontcolor="black", label=<{ShapeSetup|t0 : dict<br ALIGN="LEFT"/>t1 : dict<br ALIGN="LEFT"/>t2 : dict<br ALIGN="LEFT"/>|create_data(use_mask)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.shapes.ShapedLikeNDArray" [color="black", fontcolor="black", label=<{ShapedLikeNDArray|isscalar<br ALIGN="LEFT"/>ndim<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Shift" [color="black", fontcolor="black", label=<{Shift|bounding_box : tuple<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>input_units_equivalencies : dict<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>offset<br ALIGN="LEFT"/>|evaluate(x, offset)<br ALIGN="LEFT"/>fit_deriv(x)<br ALIGN="LEFT"/>sum_of_implicit_terms(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.Short" [color="black", fontcolor="black", label=<{Short|bit_size : str<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>val_range : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.util.ignore_sigint.wrapped.SigintHandler" [color="black", fontcolor="black", label=<{SigintHandler|sigint_received : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.stats.sigma_clipping.SigmaClip" [color="black", fontcolor="black", label=<{SigmaClip|cenfunc : Literal['median', 'mean'] \| Callable<br ALIGN="LEFT"/>grow : float \| Literal[False] \| None<br ALIGN="LEFT"/>maxiters<br ALIGN="LEFT"/>sigma : float<br ALIGN="LEFT"/>sigma_lower : float<br ALIGN="LEFT"/>sigma_upper : float<br ALIGN="LEFT"/>stdfunc : Literal['std', 'mad_std'] \| Callable<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.stats.sigma_clipping.SigmaClippedStats" [color="black", fontcolor="black", label=<{SigmaClippedStats|axis : NoneType<br ALIGN="LEFT"/>data : tuple<br ALIGN="LEFT"/>|biweight_location(c: float, M: float \| None): float \| NDArray<br ALIGN="LEFT"/>biweight_scale(c: float, M: float \| None): float \| NDArray<br ALIGN="LEFT"/>mad_std(): float \| NDArray<br ALIGN="LEFT"/>max(): float \| NDArray<br ALIGN="LEFT"/>mean(): float \| NDArray<br ALIGN="LEFT"/>median(): float \| NDArray<br ALIGN="LEFT"/>min(): float \| NDArray<br ALIGN="LEFT"/>mode(median_factor: float, mean_factor: float): float \| NDArray<br ALIGN="LEFT"/>std(ddof: int): float \| NDArray<br ALIGN="LEFT"/>sum(): float \| NDArray<br ALIGN="LEFT"/>var(ddof: int): float \| NDArray<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.tests.helper.SimModelTAB" [color="black", fontcolor="black", label=<{SimModelTAB|cdelt : list<br ALIGN="LEFT"/>crpix : list<br ALIGN="LEFT"/>crval : list<br ALIGN="LEFT"/>hdulist<br ALIGN="LEFT"/>nx : int<br ALIGN="LEFT"/>ny : int<br ALIGN="LEFT"/>pc : dict<br ALIGN="LEFT"/>|fwd_eval(xy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.tests.test_high_level_api.SimpleDuplicateWCS" [color="black", fontcolor="black", label=<{SimpleDuplicateWCS|pixel_n_dim<br ALIGN="LEFT"/>world_axis_object_classes<br ALIGN="LEFT"/>world_axis_object_components<br ALIGN="LEFT"/>world_axis_physical_types<br ALIGN="LEFT"/>world_axis_units<br ALIGN="LEFT"/>world_n_dim<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree.SimpleElement" [color="black", fontcolor="black", label=<{SimpleElement|<br ALIGN="LEFT"/>|parse(iterator, config)<br ALIGN="LEFT"/>to_xml(w)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tree.SimpleElementWithContent" [color="black", fontcolor="black", label=<{SimpleElementWithContent|content<br ALIGN="LEFT"/>|parse(iterator, config)<br ALIGN="LEFT"/>to_xml(w)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.mpl_normalize.SimpleNorm" [color="black", fontcolor="black", label=<{SimpleNorm|clip : bool<br ALIGN="LEFT"/>interval<br ALIGN="LEFT"/>invalid : float<br ALIGN="LEFT"/>stretch : str<br ALIGN="LEFT"/>|imshow(data, ax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.rst.SimpleRSTData" [color="black", fontcolor="black", label=<{SimpleRSTData|end_line : int<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>start_line<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.rst.SimpleRSTHeader" [color="black", fontcolor="black", label=<{SimpleRSTHeader|position_char : str<br ALIGN="LEFT"/>position_line : int<br ALIGN="LEFT"/>splitter_class<br ALIGN="LEFT"/>start_line : int<br ALIGN="LEFT"/>|get_fixedwidth_params(line)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.Test__Astropy_Table__.SimpleTable" [color="black", fontcolor="black", label=<{SimpleTable|columns : list<br ALIGN="LEFT"/>meta : OrderedDict<br ALIGN="LEFT"/>names : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.SimpleVal" [color="black", fontcolor="black", label=<{SimpleVal|baseErrorClass<br ALIGN="LEFT"/>|check(check, member, missing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.optimizers.Simplex" [color="black", fontcolor="black", label=<{Simplex|fit_info : dict<br ALIGN="LEFT"/>supported_constraints : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.fitting.SimplexLSQFitter" [color="black", fontcolor="black", label=<{SimplexLSQFitter|fit_info : dict<br ALIGN="LEFT"/>supported_constraints : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Sine1D" [color="black", fontcolor="black", label=<{Sine1D|inverse<br ALIGN="LEFT"/>|evaluate(x, amplitude, frequency, phase)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, frequency, phase)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.stretch.SinhStretch" [color="black", fontcolor="black", label=<{SinhStretch|a : float<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.sites.SiteRegistry" [color="black", fontcolor="black", label=<{SiteRegistry|names<br ALIGN="LEFT"/>|add_site(names, locationobj)<br ALIGN="LEFT"/>from_json(jsondb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2PixProjection" [color="black", fontcolor="black", label=<{Sky2PixProjection|input_units<br ALIGN="LEFT"/>inputs : tuple<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>outputs : tuple<br ALIGN="LEFT"/>return_units<br ALIGN="LEFT"/>|evaluate(phi, theta)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_Airy" [color="black", fontcolor="black", label=<{Sky2Pix_Airy|theta_b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_BonneEqualArea" [color="black", fontcolor="black", label=<{Sky2Pix_BonneEqualArea|theta1<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_COBEQuadSphericalCube" [color="black", fontcolor="black", label=<{Sky2Pix_COBEQuadSphericalCube|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_ConicEqualArea" [color="black", fontcolor="black", label=<{Sky2Pix_ConicEqualArea|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_ConicEquidistant" [color="black", fontcolor="black", label=<{Sky2Pix_ConicEquidistant|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_ConicOrthomorphic" [color="black", fontcolor="black", label=<{Sky2Pix_ConicOrthomorphic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_ConicPerspective" [color="black", fontcolor="black", label=<{Sky2Pix_ConicPerspective|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_CylindricalEqualArea" [color="black", fontcolor="black", label=<{Sky2Pix_CylindricalEqualArea|lam<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_CylindricalPerspective" [color="black", fontcolor="black", label=<{Sky2Pix_CylindricalPerspective|lam<br ALIGN="LEFT"/>mu<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_Gnomonic" [color="black", fontcolor="black", label=<{Sky2Pix_Gnomonic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_HEALPix" [color="black", fontcolor="black", label=<{Sky2Pix_HEALPix|H<br ALIGN="LEFT"/>X<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_HEALPixPolar" [color="black", fontcolor="black", label=<{Sky2Pix_HEALPixPolar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_HammerAitoff" [color="black", fontcolor="black", label=<{Sky2Pix_HammerAitoff|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_Mercator" [color="black", fontcolor="black", label=<{Sky2Pix_Mercator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_Molleweide" [color="black", fontcolor="black", label=<{Sky2Pix_Molleweide|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_Parabolic" [color="black", fontcolor="black", label=<{Sky2Pix_Parabolic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_PlateCarree" [color="black", fontcolor="black", label=<{Sky2Pix_PlateCarree|<br ALIGN="LEFT"/>|evaluate(phi, theta)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_Polyconic" [color="black", fontcolor="black", label=<{Sky2Pix_Polyconic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_QuadSphericalCube" [color="black", fontcolor="black", label=<{Sky2Pix_QuadSphericalCube|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_SansonFlamsteed" [color="black", fontcolor="black", label=<{Sky2Pix_SansonFlamsteed|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_SlantOrthographic" [color="black", fontcolor="black", label=<{Sky2Pix_SlantOrthographic|eta<br ALIGN="LEFT"/>xi<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_SlantZenithalPerspective" [color="black", fontcolor="black", label=<{Sky2Pix_SlantZenithalPerspective|mu<br ALIGN="LEFT"/>phi0<br ALIGN="LEFT"/>theta0<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_Stereographic" [color="black", fontcolor="black", label=<{Sky2Pix_Stereographic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_TangentialSphericalCube" [color="black", fontcolor="black", label=<{Sky2Pix_TangentialSphericalCube|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_ZenithalEqualArea" [color="black", fontcolor="black", label=<{Sky2Pix_ZenithalEqualArea|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_ZenithalEquidistant" [color="black", fontcolor="black", label=<{Sky2Pix_ZenithalEquidistant|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.projections.Sky2Pix_ZenithalPerspective" [color="black", fontcolor="black", label=<{Sky2Pix_ZenithalPerspective|gamma<br ALIGN="LEFT"/>mu<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.sky_coordinate.SkyCoord" [color="black", fontcolor="black", label=<{SkyCoord|differential_type<br ALIGN="LEFT"/>equinox : str<br ALIGN="LEFT"/>foo : int<br ALIGN="LEFT"/>frame<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>masked<br ALIGN="LEFT"/>position_angle : Callable[[BaseCoordinateFrame \| SkyCoord], Angle]<br ALIGN="LEFT"/>ra : float<br ALIGN="LEFT"/>relative_humidity : float<br ALIGN="LEFT"/>representation_type<br ALIGN="LEFT"/>separation : Callable[[BaseCoordinateFrame \| SkyCoord], Angle]<br ALIGN="LEFT"/>separation_3d : Callable[[BaseCoordinateFrame \| SkyCoord], Distance]<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|apply_space_motion(new_obstime, dt)<br ALIGN="LEFT"/>contained_by(wcs, image)<br ALIGN="LEFT"/>directional_offset_by(position_angle, separation)<br ALIGN="LEFT"/>from_name(name, frame, parse, cache)<br ALIGN="LEFT"/>from_pixel(xp, yp, wcs, origin, mode)<br ALIGN="LEFT"/>get_constellation(short_name, constellation_list)<br ALIGN="LEFT"/>get_mask()<br ALIGN="LEFT"/>guess_from_table(table)<br ALIGN="LEFT"/>insert(obj, values, axis)<br ALIGN="LEFT"/>is_equivalent_frame(other)<br ALIGN="LEFT"/>is_transformable_to(new_frame)<br ALIGN="LEFT"/>match_to_catalog_3d(catalogcoord, nthneighbor)<br ALIGN="LEFT"/>match_to_catalog_sky(catalogcoord, nthneighbor)<br ALIGN="LEFT"/>radial_velocity_correction(kind, obstime, location)<br ALIGN="LEFT"/>search_around_3d(searcharoundcoords, distlimit)<br ALIGN="LEFT"/>search_around_sky(searcharoundcoords, seplimit)<br ALIGN="LEFT"/>skyoffset_frame(rotation)<br ALIGN="LEFT"/>spherical_offsets_by(d_lon, d_lat)<br ALIGN="LEFT"/>spherical_offsets_to(tocoord)<br ALIGN="LEFT"/>to_pixel(wcs, origin, mode)<br ALIGN="LEFT"/>to_string(style)<br ALIGN="LEFT"/>to_table()<br ALIGN="LEFT"/>transform_to(frame, merge_attributes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.tests.test_utils.test_skycoord_to_pixel.SkyCoord2" [color="black", fontcolor="black", label=<{SkyCoord2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_sky_coord.test_wcs_methods.SkyCoord2" [color="black", fontcolor="black", label=<{SkyCoord2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.tests.test_high_level_api.SkyCoordDuplicateWCS" [color="black", fontcolor="black", label=<{SkyCoordDuplicateWCS|pixel_n_dim<br ALIGN="LEFT"/>world_axis_object_classes<br ALIGN="LEFT"/>world_axis_object_components<br ALIGN="LEFT"/>world_axis_physical_types<br ALIGN="LEFT"/>world_axis_units<br ALIGN="LEFT"/>world_n_dim<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.sky_coordinate.SkyCoordInfo" [color="black", fontcolor="black", label=<{SkyCoordInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_sky_coord.test_setitem_exceptions.SkyCoordSub" [color="black", fontcolor="black", label=<{SkyCoordSub|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.skyoffset.SkyOffsetFrame" [color="black", fontcolor="black", label=<{SkyOffsetFrame|origin<br ALIGN="LEFT"/>rotation<br ALIGN="LEFT"/>|represent_as(base, s, in_frame_units)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.fitswcs.SlicedFITSWCS" [color="black", fontcolor="black", label=<{SlicedFITSWCS|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.index.SlicedIndex" [color="black", fontcolor="black", label=<{SlicedIndex|columns<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>index<br ALIGN="LEFT"/>length<br ALIGN="LEFT"/>original : bool<br ALIGN="LEFT"/>start<br ALIGN="LEFT"/>step<br ALIGN="LEFT"/>stop<br ALIGN="LEFT"/>|col_position(col_name)<br ALIGN="LEFT"/>find(key)<br ALIGN="LEFT"/>get_index_or_copy()<br ALIGN="LEFT"/>get_row_specifier(row_specifier)<br ALIGN="LEFT"/>get_slice(col_slice, item)<br ALIGN="LEFT"/>insert_row(pos, vals, columns)<br ALIGN="LEFT"/>orig_coords(row)<br ALIGN="LEFT"/>range(lower, upper)<br ALIGN="LEFT"/>reload()<br ALIGN="LEFT"/>remove_rows(row_specifier)<br ALIGN="LEFT"/>replace(row, col, val)<br ALIGN="LEFT"/>replace_col(prev_col, new_col)<br ALIGN="LEFT"/>replace_rows(col_slice)<br ALIGN="LEFT"/>same_prefix(key)<br ALIGN="LEFT"/>sliced_coords(rows)<br ALIGN="LEFT"/>sort()<br ALIGN="LEFT"/>sorted_data()<br ALIGN="LEFT"/>where(col_map)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.wrappers.sliced_wcs.SlicedLowLevelWCS" [color="black", fontcolor="black", label=<{SlicedLowLevelWCS|array_shape<br ALIGN="LEFT"/>axis_correlation_matrix<br ALIGN="LEFT"/>dropped_world_dimensions<br ALIGN="LEFT"/>pixel_axis_names<br ALIGN="LEFT"/>pixel_bounds<br ALIGN="LEFT"/>pixel_n_dim<br ALIGN="LEFT"/>pixel_shape<br ALIGN="LEFT"/>world_axis_names<br ALIGN="LEFT"/>world_axis_object_classes<br ALIGN="LEFT"/>world_axis_object_components<br ALIGN="LEFT"/>world_axis_physical_types<br ALIGN="LEFT"/>world_axis_units<br ALIGN="LEFT"/>world_n_dim<br ALIGN="LEFT"/>|pixel_to_world_values()<br ALIGN="LEFT"/>world_to_pixel_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.powerlaws.SmoothlyBrokenPowerLaw1D" [color="black", fontcolor="black", label=<{SmoothlyBrokenPowerLaw1D|alpha_1<br ALIGN="LEFT"/>alpha_2<br ALIGN="LEFT"/>amplitude<br ALIGN="LEFT"/>delta<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>x_break<br ALIGN="LEFT"/>|evaluate(x, amplitude, x_break, alpha_1, alpha_2, delta)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, x_break, alpha_1, alpha_2, delta)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_api_ape5.test_transform_api.SomeNewSystem" [color="black", fontcolor="black", label=<{SomeNewSystem|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.mixins.tests.test_ndslicing.SomeUncertainty" [color="black", fontcolor="black", label=<{SomeUncertainty|uncertainty_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.sorted_array.SortedArray" [color="black", fontcolor="black", label=<{SortedArray|cols<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>num_cols<br ALIGN="LEFT"/>row_index : ndarray<br ALIGN="LEFT"/>unique : bool<br ALIGN="LEFT"/>|add(key, row)<br ALIGN="LEFT"/>find(key)<br ALIGN="LEFT"/>find_pos(key, data, exact)<br ALIGN="LEFT"/>items()<br ALIGN="LEFT"/>range(lower, upper, bounds)<br ALIGN="LEFT"/>remove(key, data)<br ALIGN="LEFT"/>replace_rows(row_map)<br ALIGN="LEFT"/>shift_left(row)<br ALIGN="LEFT"/>shift_right(row)<br ALIGN="LEFT"/>sort()<br ALIGN="LEFT"/>sorted_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.html.SoupString" [color="black", fontcolor="black", label=<{SoupString|soup<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.tests.tests.test_runner.test_new_kwarg.Spam" [color="black", fontcolor="black", label=<{Spam|<br ALIGN="LEFT"/>|spam(spam, kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.tests.tests.test_runner.test_priority.Spam" [color="black", fontcolor="black", label=<{Spam|<br ALIGN="LEFT"/>|eggs(eggs, kwargs)<br ALIGN="LEFT"/>spam(spam, kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.tests.tests.test_runner.test_docs.Spam" [color="black", fontcolor="black", label=<{Spam|<br ALIGN="LEFT"/>|eggs(eggs, kwargs)<br ALIGN="LEFT"/>spam(spam, kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_attribute_repr.Spam" [color="black", fontcolor="black", label=<{Spam|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.mixins.tests.test_registry.SpamData" [color="black", fontcolor="black", label=<{SpamData|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.mixins.tests.test_registry.SpamWrapper" [color="black", fontcolor="black", label=<{SpamWrapper|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_data.test_temp_cache.Special" [color="black", fontcolor="red", label=<{Special|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.tests.test_custom_formats.SpecificException" [color="black", fontcolor="red", label=<{SpecificException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.quantity.SpecificTypeQuantity" [color="black", fontcolor="black", label=<{SpecificTypeQuantity|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.conftest.Spectral1DLowLevelWCS" [color="black", fontcolor="black", label=<{Spectral1DLowLevelWCS|pixel_bounds<br ALIGN="LEFT"/>pixel_n_dim<br ALIGN="LEFT"/>pixel_shape<br ALIGN="LEFT"/>world_axis_names<br ALIGN="LEFT"/>world_axis_object_classes<br ALIGN="LEFT"/>world_axis_object_components<br ALIGN="LEFT"/>world_axis_physical_types<br ALIGN="LEFT"/>world_axis_units<br ALIGN="LEFT"/>world_n_dim<br ALIGN="LEFT"/>|pixel_to_world_values(pixel_array)<br ALIGN="LEFT"/>world_to_pixel_values(world_array)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.spectral_coordinate.SpectralCoord" [color="black", fontcolor="black", label=<{SpectralCoord|observer<br ALIGN="LEFT"/>quantity<br ALIGN="LEFT"/>radial_velocity<br ALIGN="LEFT"/>redshift<br ALIGN="LEFT"/>target<br ALIGN="LEFT"/>|replicate(value, unit, observer, target, radial_velocity, redshift, doppler_convention, doppler_rest, copy)<br ALIGN="LEFT"/>to_rest()<br ALIGN="LEFT"/>with_observer_stationary_relative_to(frame, velocity, preserve_observer_frame)<br ALIGN="LEFT"/>with_radial_velocity_shift(target_shift, observer_shift)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.spectral_quantity.SpectralQuantity" [color="black", fontcolor="black", label=<{SpectralQuantity|doppler_convention<br ALIGN="LEFT"/>doppler_rest<br ALIGN="LEFT"/>|to(unit, equivalencies, doppler_rest, doppler_convention)<br ALIGN="LEFT"/>to_value(unit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.patches.SphericalCircle" [color="black", fontcolor="black", label=<{SphericalCircle|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.representation.spherical.SphericalCosLatDifferential" [color="black", fontcolor="black", label=<{SphericalCosLatDifferential|attr_classes : dict<br ALIGN="LEFT"/>base_representation<br ALIGN="LEFT"/>d_lat<br ALIGN="LEFT"/>|from_representation(representation, base)<br ALIGN="LEFT"/>represent_as(other_class, base)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.spherical.SphericalDifferential" [color="black", fontcolor="black", label=<{SphericalDifferential|base_representation<br ALIGN="LEFT"/>d_lat<br ALIGN="LEFT"/>|from_representation(representation, base)<br ALIGN="LEFT"/>represent_as(other_class, base)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" [color="black", fontcolor="black", label=<{SphericalRepresentation|attr_classes : dict<br ALIGN="LEFT"/>distance<br ALIGN="LEFT"/>lat<br ALIGN="LEFT"/>lon<br ALIGN="LEFT"/>shape : tuple<br ALIGN="LEFT"/>|from_cartesian(cart)<br ALIGN="LEFT"/>norm()<br ALIGN="LEFT"/>represent_as(other_class, differential_class)<br ALIGN="LEFT"/>scale_factors(omit_coslat)<br ALIGN="LEFT"/>to_cartesian()<br ALIGN="LEFT"/>transform(matrix)<br ALIGN="LEFT"/>unit_vectors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.rotations.SphericalRotationSequence" [color="black", fontcolor="black", label=<{SphericalRotationSequence|n_inputs<br ALIGN="LEFT"/>n_outputs<br ALIGN="LEFT"/>|evaluate(lon, lat, angles)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_unit_representation.test_unit_representation_subclass.SphericalWrap180Representation" [color="black", fontcolor="black", label=<{SphericalWrap180Representation|attr_classes : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.test_subclass_representation.SphericalWrap180Representation" [color="black", fontcolor="black", label=<{SphericalWrap180Representation|attr_classes : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.frame.Spine" [color="black", fontcolor="black", label=<{Spine|data<br ALIGN="LEFT"/>data_func : NoneType<br ALIGN="LEFT"/>normal_angle<br ALIGN="LEFT"/>parent_axes<br ALIGN="LEFT"/>pixel<br ALIGN="LEFT"/>transform<br ALIGN="LEFT"/>world<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.frame.SpineXAligned" [color="black", fontcolor="black", label=<{SpineXAligned|data<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.console.Spinner" [color="black", fontcolor="black", label=<{Spinner|<br ALIGN="LEFT"/>|update(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_spline.TestSpline.setup_class.Spline" [color="black", fontcolor="black", label=<{Spline|optional_inputs : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_spline.TestSpline.test__create_optional_inputs.Spline" [color="black", fontcolor="black", label=<{Spline|optional_inputs<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_spline.TestSpline.test__intercept_optional_inputs.Spline" [color="black", fontcolor="black", label=<{Spline|optional_inputs<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_spline.TestSpline.test_evaluate.Spline" [color="black", fontcolor="black", label=<{Spline|optional_inputs<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_spline.TestSpline.test__create_parameter.Spline" [color="black", fontcolor="black", label=<{Spline|fixed_test<br ALIGN="LEFT"/>test<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_spline.TestSpline.test__create_parameters.Spline" [color="black", fontcolor="black", label=<{Spline|test<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.spline.Spline1D" [color="black", fontcolor="black", label=<{Spline1D|bounding_box : NoneType, list<br ALIGN="LEFT"/>bspline<br ALIGN="LEFT"/>c<br ALIGN="LEFT"/>coeffs<br ALIGN="LEFT"/>degree<br ALIGN="LEFT"/>knots<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>optional_inputs : dict<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>t_interior<br ALIGN="LEFT"/>tck<br ALIGN="LEFT"/>user_knots<br ALIGN="LEFT"/>|antiderivative(nu)<br ALIGN="LEFT"/>derivative(nu)<br ALIGN="LEFT"/>evaluate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.spline.SplineExactKnotsFitter" [color="black", fontcolor="black", label=<{SplineExactKnotsFitter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_spline.TestSpline1D.test__SplineFitter_error.SplineFitter" [color="black", fontcolor="black", label=<{SplineFitter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.spline.SplineInterpolateFitter" [color="black", fontcolor="black", label=<{SplineInterpolateFitter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.spline.SplineSmoothingFitter" [color="black", fontcolor="black", label=<{SplineSmoothingFitter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.spline.SplineSplrepFitter" [color="black", fontcolor="black", label=<{SplineSplrepFitter|fit_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.stretch.SqrtStretch" [color="black", fontcolor="black", label=<{SqrtStretch|inverse<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.stretch.SquaredStretch" [color="black", fontcolor="black", label=<{SquaredStretch|inverse<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.fitting.StandardDeviations" [color="black", fontcolor="black", label=<{StandardDeviations|param_names<br ALIGN="LEFT"/>stds<br ALIGN="LEFT"/>|pprint(max_lines, round_val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.transformations.affine.StaticMatrixTransform" [color="black", fontcolor="black", label=<{StaticMatrixTransform|matrix : ndarray<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.nduncertainty.StdDevUncertainty" [color="black", fontcolor="black", label=<{StdDevUncertainty|parent_nddata<br ALIGN="LEFT"/>supports_correlated<br ALIGN="LEFT"/>uncertainty_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.mixins.tests.test_ndarithmetic.StdDevUncertaintyUncorrelated" [color="black", fontcolor="black", label=<{StdDevUncertaintyUncorrelated|supports_correlated<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.polarization.StokesCoord" [color="black", fontcolor="black", label=<{StokesCoord|dtype<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>symbol<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.polarization.StokesCoordInfo" [color="black", fontcolor="black", label=<{StokesCoordInfo|dtype<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|default_format(val)<br ALIGN="LEFT"/>get_sortable_arrays()<br ALIGN="LEFT"/>new_like(cols, length, metadata_conflicts, name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.polarization.StokesSymbol" [color="black", fontcolor="black", label=<{StokesSymbol|description : str<br ALIGN="LEFT"/>symbol : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.scripts.fitsdiff.StoreListAction" [color="black", fontcolor="black", label=<{StoreListAction|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.StrType" [color="black", fontcolor="black", label=<{StrType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.logger.StreamHandler" [color="black", fontcolor="black", label=<{StreamHandler|<br ALIGN="LEFT"/>|emit(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.streaming.StreamingHDU" [color="black", fontcolor="black", label=<{StreamingHDU|size<br ALIGN="LEFT"/>writecomplete : bool<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>write(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.column.StringTruncateWarning" [color="black", fontcolor="red", label=<{StringTruncateWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_format.StringUnitPair" [color="black", fontcolor="black", label=<{StringUnitPair|string : str<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.structured.Structure" [color="black", fontcolor="black", label=<{Structure|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_distribution.StructuredDtypeBase" [color="black", fontcolor="black", label=<{StructuredDtypeBase|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_structured.StructuredTestBase" [color="black", fontcolor="black", label=<{StructuredTestBase|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_structured.StructuredTestBaseWithUnits" [color="black", fontcolor="black", label=<{StructuredTestBaseWithUnits|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.structured.StructuredUnit" [color="black", fontcolor="black", label=<{StructuredUnit|cgs<br ALIGN="LEFT"/>field_names<br ALIGN="LEFT"/>physical_type<br ALIGN="LEFT"/>si<br ALIGN="LEFT"/>|decompose(bases: Collection[UnitBase]): Self<br ALIGN="LEFT"/>get_converter(other, equivalencies)<br ALIGN="LEFT"/>is_equivalent(other, equivalencies)<br ALIGN="LEFT"/>items()<br ALIGN="LEFT"/>keys()<br ALIGN="LEFT"/>to(other, value, equivalencies)<br ALIGN="LEFT"/>to_string(format)<br ALIGN="LEFT"/>values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.tests.test_pickle.Sub" [color="black", fontcolor="black", label=<{Sub|foo : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_core.FlatCosmologyMixinTest.test_subclassing.SubClass1" [color="black", fontcolor="black", label=<{SubClass1|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_core.FlatCosmologyMixinTest.test_subclassing.SubClass2" [color="black", fontcolor="black", label=<{SubClass2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_core.FlatCosmologyMixinTest.test_subclassing.SubClass3" [color="black", fontcolor="black", label=<{SubClass3|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_core.SubCosmology" [color="black", fontcolor="black", label=<{SubCosmology|H0<br ALIGN="LEFT"/>Tcmb0<br ALIGN="LEFT"/>is_flat<br ALIGN="LEFT"/>m_nu<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_core.test__nonflatclass__multiple_nonflat_inheritance.SubCosmology2" [color="black", fontcolor="black", label=<{SubCosmology2|is_flat<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_flrw.SubFLRW" [color="black", fontcolor="black", label=<{SubFLRW|<br ALIGN="LEFT"/>|w(z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.tests.test_compat.SubNDData" [color="black", fontcolor="black", label=<{SubNDData|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.conftest.SubclassTable" [color="black", fontcolor="black", label=<{SubclassTable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.supergalactic.Supergalactic" [color="black", fontcolor="black", label=<{Supergalactic|default_differential<br ALIGN="LEFT"/>default_representation<br ALIGN="LEFT"/>frame_specific_representation_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.TA" [color="black", fontcolor="black", label=<{TA|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.TB" [color="black", fontcolor="black", label=<{TB|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_deprecated_class_with_super.TB" [color="black", fontcolor="black", label=<{TB|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.TC" [color="black", fontcolor="black", label=<{TC|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_transformations.TCoo1" [color="black", fontcolor="black", label=<{TCoo1|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_transformations.TCoo2" [color="black", fontcolor="black", label=<{TCoo2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_transformations.TCoo3" [color="black", fontcolor="black", label=<{TCoo3|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.equatorial.TEME" [color="black", fontcolor="black", label=<{TEME|default_differential<br ALIGN="LEFT"/>default_representation<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.equatorial.TETE" [color="black", fontcolor="black", label=<{TETE|location<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_input.TInputFormatter" [color="black", fontcolor="black", label=<{TInputFormatter|n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>|evaluate(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.TMeta" [color="black", fontcolor="black", label=<{TMeta|metaclass_attr : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_input.TModel_1_1" [color="black", fontcolor="black", label=<{TModel_1_1|p1<br ALIGN="LEFT"/>p2<br ALIGN="LEFT"/>|evaluate(x, p1, p2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_input.TModel_1_2" [color="black", fontcolor="black", label=<{TModel_1_2|n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>p1<br ALIGN="LEFT"/>p2<br ALIGN="LEFT"/>p3<br ALIGN="LEFT"/>|evaluate(x, p1, p2, p3)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_parameters.TParModel" [color="black", fontcolor="black", label=<{TParModel|coeff<br ALIGN="LEFT"/>e<br ALIGN="LEFT"/>|<I>evaluate</I>(coeff, e)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_model_sets.TParModel" [color="black", fontcolor="black", label=<{TParModel|coeff<br ALIGN="LEFT"/>e<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>|evaluate(x, coeff, e)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_core.TestCore.test_fits_pathlike_object.TPath" [color="black", fontcolor="black", label=<{TPath|path<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.fitting.TRFLSQFitter" [color="black", fontcolor="black", label=<{TRFLSQFitter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.tests.test_basic.test_datetime_tzinfo.TZm6" [color="black", fontcolor="black", label=<{TZm6|<br ALIGN="LEFT"/>|utcoffset(dt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.basic.Tab" [color="black", fontcolor="black", label=<{Tab|data_class<br ALIGN="LEFT"/>header_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.TabData" [color="black", fontcolor="black", label=<{TabData|splitter_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.TabDataSplitter" [color="black", fontcolor="black", label=<{TabDataSplitter|process_val : NoneType<br ALIGN="LEFT"/>skipinitialspace : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.TabHeader" [color="black", fontcolor="black", label=<{TabHeader|splitter_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.basic.TabHeaderSplitter" [color="black", fontcolor="black", label=<{TabHeaderSplitter|delimiter : str<br ALIGN="LEFT"/>|process_line(line)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.table.Table" [color="black", fontcolor="black", label=<{Table|Column<br ALIGN="LEFT"/>ColumnClass<br ALIGN="LEFT"/>MaskedColumn<br ALIGN="LEFT"/>Row<br ALIGN="LEFT"/>TableColumns<br ALIGN="LEFT"/>TableFormatter<br ALIGN="LEFT"/>colnames<br ALIGN="LEFT"/>columns<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>formatter<br ALIGN="LEFT"/>groups<br ALIGN="LEFT"/>has_masked_columns<br ALIGN="LEFT"/>has_masked_values<br ALIGN="LEFT"/>has_mixin_columns<br ALIGN="LEFT"/>iloc<br ALIGN="LEFT"/>indices<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>loc<br ALIGN="LEFT"/>loc_indices<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>masked<br ALIGN="LEFT"/>meta<br ALIGN="LEFT"/>pprint_exclude_names<br ALIGN="LEFT"/>pprint_include_names<br ALIGN="LEFT"/>primary_key : NoneType, tuple<br ALIGN="LEFT"/>read<br ALIGN="LEFT"/>write<br ALIGN="LEFT"/>|add_column(col, index, name, rename_duplicate, copy, default_name)<br ALIGN="LEFT"/>add_columns(cols, indexes, names, copy, rename_duplicate)<br ALIGN="LEFT"/>add_index(colnames, engine, unique)<br ALIGN="LEFT"/>add_row(vals, mask)<br ALIGN="LEFT"/>argsort(keys, kind, reverse)<br ALIGN="LEFT"/>as_array(keep_byteorder, names)<br ALIGN="LEFT"/>convert_bytestring_to_unicode()<br ALIGN="LEFT"/>convert_unicode_to_bytestring()<br ALIGN="LEFT"/>copy(copy_data)<br ALIGN="LEFT"/>field(item)<br ALIGN="LEFT"/>filled(fill_value)<br ALIGN="LEFT"/>from_pandas(dataframe, index, units)<br ALIGN="LEFT"/>group_by(keys)<br ALIGN="LEFT"/>index_column(name)<br ALIGN="LEFT"/>index_mode(mode)<br ALIGN="LEFT"/>insert_row(index, vals, mask)<br ALIGN="LEFT"/>items()<br ALIGN="LEFT"/>itercols()<br ALIGN="LEFT"/>iterrows()<br ALIGN="LEFT"/>keep_columns(names)<br ALIGN="LEFT"/>keys()<br ALIGN="LEFT"/>more(max_lines, max_width, show_name, show_unit, show_dtype)<br ALIGN="LEFT"/>pformat(max_lines, max_width, show_name, show_unit, show_dtype, html, tableid, align, tableclass)<br ALIGN="LEFT"/>pformat_all(max_lines, max_width, show_name, show_unit, show_dtype, html, tableid, align, tableclass)<br ALIGN="LEFT"/>pprint(max_lines, max_width, show_name, show_unit, show_dtype, align)<br ALIGN="LEFT"/>pprint_all(max_lines, max_width, show_name, show_unit, show_dtype, align)<br ALIGN="LEFT"/>remove_column(name)<br ALIGN="LEFT"/>remove_columns(names)<br ALIGN="LEFT"/>remove_indices(colname)<br ALIGN="LEFT"/>remove_row(index)<br ALIGN="LEFT"/>remove_rows(row_specifier)<br ALIGN="LEFT"/>rename_column(name, new_name)<br ALIGN="LEFT"/>rename_columns(names, new_names)<br ALIGN="LEFT"/>replace_column(name, col, copy)<br ALIGN="LEFT"/>reverse()<br ALIGN="LEFT"/>round(decimals)<br ALIGN="LEFT"/>setdefault(name, default)<br ALIGN="LEFT"/>show_in_browser(max_lines, jsviewer, browser, jskwargs, tableid, table_class, css, show_row_index)<br ALIGN="LEFT"/>show_in_notebook()<br ALIGN="LEFT"/>sort(keys)<br ALIGN="LEFT"/>to_pandas(index, use_nullable_int)<br ALIGN="LEFT"/>update(other, copy)<br ALIGN="LEFT"/>values()<br ALIGN="LEFT"/>values_equal(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tree.Table" [color="black", fontcolor="black", label=<{Table|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.table.TableAttribute" [color="black", fontcolor="black", label=<{TableAttribute|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.table.TableColumns" [color="black", fontcolor="black", label=<{TableColumns|<br ALIGN="LEFT"/>|isinstance(cls)<br ALIGN="LEFT"/>not_isinstance(cls)<br ALIGN="LEFT"/>setdefault(key, default)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.conftest.table_data.TableData" [color="black", fontcolor="black", label=<{TableData|COLS : list<br ALIGN="LEFT"/>Column<br ALIGN="LEFT"/>DATA<br ALIGN="LEFT"/>Table<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.diff.TableDataDiff" [color="black", fontcolor="black", label=<{TableDataDiff|a : NoneType<br ALIGN="LEFT"/>atol : float<br ALIGN="LEFT"/>b : NoneType<br ALIGN="LEFT"/>common_column_names : set<br ALIGN="LEFT"/>common_columns : list<br ALIGN="LEFT"/>diff_column_attributes : list<br ALIGN="LEFT"/>diff_column_count : tuple<br ALIGN="LEFT"/>diff_column_names : tuple<br ALIGN="LEFT"/>diff_columns : tuple<br ALIGN="LEFT"/>diff_ratio : int<br ALIGN="LEFT"/>diff_rows : tuple<br ALIGN="LEFT"/>diff_total : int<br ALIGN="LEFT"/>diff_values : list<br ALIGN="LEFT"/>ignore_fields : set<br ALIGN="LEFT"/>numdiffs : int<br ALIGN="LEFT"/>rtol : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.meta.get_yaml_from_header.TableDumper" [color="black", fontcolor="black", label=<{TableDumper|<br ALIGN="LEFT"/>|represent_mapping(tag, mapping, flow_style)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tree.TableElement" [color="black", fontcolor="black", label=<{TableElement|ID<br ALIGN="LEFT"/>all_fields<br ALIGN="LEFT"/>array<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>fields<br ALIGN="LEFT"/>format<br ALIGN="LEFT"/>get_field_by_id<br ALIGN="LEFT"/>get_field_by_id_or_name<br ALIGN="LEFT"/>get_fields_by_utype<br ALIGN="LEFT"/>get_group_by_id<br ALIGN="LEFT"/>get_groups_by_utype<br ALIGN="LEFT"/>groups<br ALIGN="LEFT"/>infos<br ALIGN="LEFT"/>links<br ALIGN="LEFT"/>name : NoneType, str<br ALIGN="LEFT"/>nrows<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>ref<br ALIGN="LEFT"/>ucd : NoneType<br ALIGN="LEFT"/>utype : NoneType<br ALIGN="LEFT"/>|add_field(field: Field): None<br ALIGN="LEFT"/>create_arrays(nrows, config)<br ALIGN="LEFT"/>from_table(votable, table)<br ALIGN="LEFT"/>is_empty()<br ALIGN="LEFT"/>iter_fields_and_params()<br ALIGN="LEFT"/>iter_groups()<br ALIGN="LEFT"/>iter_info()<br ALIGN="LEFT"/>parse(iterator, config)<br ALIGN="LEFT"/>to_table(use_names_over_ids)<br ALIGN="LEFT"/>to_xml(w)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.pprint.TableFormatter" [color="black", fontcolor="black", label=<{TableFormatter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.groups.TableGroups" [color="black", fontcolor="black", label=<{TableGroups|indices<br ALIGN="LEFT"/>key_colnames<br ALIGN="LEFT"/>keys<br ALIGN="LEFT"/>parent_table<br ALIGN="LEFT"/>|aggregate(func)<br ALIGN="LEFT"/>filter(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.table.TableHDU" [color="black", fontcolor="black", label=<{TableHDU|name : str<br ALIGN="LEFT"/>ver : int<br ALIGN="LEFT"/>|match_header(header)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.scripts.fitsheader.TableHeaderFormatter" [color="black", fontcolor="black", label=<{TableHeaderFormatter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.index.TableILoc" [color="black", fontcolor="black", label=<{TableILoc|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.index.TableIndices" [color="black", fontcolor="black", label=<{TableIndices|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.info.TableInfo" [color="black", fontcolor="black", label=<{TableInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.meta.get_header_from_yaml.TableLoader" [color="black", fontcolor="black", label=<{TableLoader|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.index.TableLoc" [color="black", fontcolor="black", label=<{TableLoc|indices<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.index.TableLocIndices" [color="black", fontcolor="black", label=<{TableLocIndices|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.np_utils.TableMergeError" [color="black", fontcolor="red", label=<{TableMergeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.ascii.core.TableOutputter" [color="black", fontcolor="black", label=<{TableOutputter|default_converters : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.connect.TableRead" [color="black", fontcolor="black", label=<{TableRead|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.table.TableReplaceWarning" [color="black", fontcolor="red", label=<{TableReplaceWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.conftest.table_types.TableTypes" [color="black", fontcolor="black", label=<{TableTypes|Column<br ALIGN="LEFT"/>Table<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.connect.TableWrite" [color="black", fontcolor="black", label=<{TableWrite|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Tangent1D" [color="black", fontcolor="black", label=<{Tangent1D|inverse<br ALIGN="LEFT"/>|bounding_box()<br ALIGN="LEFT"/>evaluate(x, amplitude, frequency, phase)<br ALIGN="LEFT"/>fit_deriv(x, amplitude, frequency, phase)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.TemplateInterpolation" [color="black", fontcolor="black", label=<{TemplateInterpolation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_deprecated_argument.Test" [color="black", fontcolor="black", label=<{Test|<br ALIGN="LEFT"/>|test1(overwrite)<br ALIGN="LEFT"/>test2(overwrite)<br ALIGN="LEFT"/>test3(overwrite)<br ALIGN="LEFT"/>test4(overwrite)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_nameless_frame_subclass.Test" [color="black", fontcolor="black", label=<{Test|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitters.Test1DFittingWithOutlierRemoval" [color="black", fontcolor="black", label=<{Test1DFittingWithOutlierRemoval|model_params : tuple<br ALIGN="LEFT"/>x : ndarray<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_with_fitters_and_sigma_clip(fitter)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_model_sets.Test1ModelSet" [color="black", fontcolor="black", label=<{Test1ModelSet|w1 : ndarray<br ALIGN="LEFT"/>w2 : ndarray<br ALIGN="LEFT"/>x1<br ALIGN="LEFT"/>x2<br ALIGN="LEFT"/>y1 : ndarray<br ALIGN="LEFT"/>y2<br ALIGN="LEFT"/>z2 : ndarray<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_linear_1d_common_weights()<br ALIGN="LEFT"/>test_linear_1d_separate_weights()<br ALIGN="LEFT"/>test_linear_1d_separate_weights_axis_1()<br ALIGN="LEFT"/>test_linear_2d_common_weights()<br ALIGN="LEFT"/>test_linear_2d_separate_weights()<br ALIGN="LEFT"/>test_linear_2d_separate_weights_axis_2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.tests.test_convolve_kernels.Test2DConvolutions" [color="black", fontcolor="black", label=<{Test2DConvolutions|<br ALIGN="LEFT"/>|test_centered_makekernel(kernel)<br ALIGN="LEFT"/>test_random_makekernel(kernel)<br ALIGN="LEFT"/>test_smallkernel_Box2DKernel(shape, width)<br ALIGN="LEFT"/>test_uniform_smallkernel(shape, width)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitters.Test2DFittingWithOutlierRemoval" [color="black", fontcolor="black", label=<{Test2DFittingWithOutlierRemoval|model_params : tuple<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|initial_guess(data, pos)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test_with_fitters_and_sigma_clip(fitter)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestAccessingParts" [color="black", fontcolor="black", label=<{TestAccessingParts|<br ALIGN="LEFT"/>|test_compress()<br ALIGN="LEFT"/>test_delete()<br ALIGN="LEFT"/>test_diag()<br ALIGN="LEFT"/>test_diag_1d_input()<br ALIGN="LEFT"/>test_diagflat()<br ALIGN="LEFT"/>test_diagonal()<br ALIGN="LEFT"/>test_extract()<br ALIGN="LEFT"/>test_roll()<br ALIGN="LEFT"/>test_take()<br ALIGN="LEFT"/>test_trim_zeros()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestAccessingParts" [color="black", fontcolor="black", label=<{TestAccessingParts|<br ALIGN="LEFT"/>|test_compress()<br ALIGN="LEFT"/>test_delete()<br ALIGN="LEFT"/>test_diag()<br ALIGN="LEFT"/>test_diag_1d_input()<br ALIGN="LEFT"/>test_diagflat()<br ALIGN="LEFT"/>test_diagonal()<br ALIGN="LEFT"/>test_extract()<br ALIGN="LEFT"/>test_roll()<br ALIGN="LEFT"/>test_take()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_masked.TestAddColumn" [color="black", fontcolor="black", label=<{TestAddColumn|<br ALIGN="LEFT"/>|test_add_masked_column_to_masked_table()<br ALIGN="LEFT"/>test_add_masked_column_to_non_masked_table()<br ALIGN="LEFT"/>test_add_non_masked_column_to_masked_table()<br ALIGN="LEFT"/>test_convert_to_masked_table_only_if_necessary()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestAddColumns" [color="black", fontcolor="black", label=<{TestAddColumns|<br ALIGN="LEFT"/>|test_add_columns1(table_types)<br ALIGN="LEFT"/>test_add_columns2(table_types)<br ALIGN="LEFT"/>test_add_columns3(table_types)<br ALIGN="LEFT"/>test_add_columns4(table_types)<br ALIGN="LEFT"/>test_add_columns5(table_types)<br ALIGN="LEFT"/>test_add_columns6(table_types)<br ALIGN="LEFT"/>test_add_columns7(table_types)<br ALIGN="LEFT"/>test_add_duplicate_column(table_types)<br ALIGN="LEFT"/>test_add_duplicate_columns(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestAddLength" [color="black", fontcolor="black", label=<{TestAddLength|<br ALIGN="LEFT"/>|test_right_length(table_types)<br ALIGN="LEFT"/>test_too_long(table_types)<br ALIGN="LEFT"/>test_too_short(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestAddName" [color="black", fontcolor="black", label=<{TestAddName|<br ALIGN="LEFT"/>|test_default_name(table_types)<br ALIGN="LEFT"/>test_override_name(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestAddPosition" [color="black", fontcolor="black", label=<{TestAddPosition|<br ALIGN="LEFT"/>|test_1(table_types)<br ALIGN="LEFT"/>test_10(table_types)<br ALIGN="LEFT"/>test_2(table_types)<br ALIGN="LEFT"/>test_3(table_types)<br ALIGN="LEFT"/>test_5(table_types)<br ALIGN="LEFT"/>test_6(table_types)<br ALIGN="LEFT"/>test_7(table_types)<br ALIGN="LEFT"/>test_8(table_types)<br ALIGN="LEFT"/>test_9(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestAddRow" [color="black", fontcolor="black", label=<{TestAddRow|b<br ALIGN="LEFT"/>c<br ALIGN="LEFT"/>d<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>|test_add_missing_column(table_types)<br ALIGN="LEFT"/>test_add_none_to_empty_table(table_types)<br ALIGN="LEFT"/>test_add_qtable_row_multidimensional()<br ALIGN="LEFT"/>test_add_row_failures(table_types)<br ALIGN="LEFT"/>test_add_stuff_to_empty_table(table_types)<br ALIGN="LEFT"/>test_add_table_row(table_types)<br ALIGN="LEFT"/>test_add_table_row_obj(table_types)<br ALIGN="LEFT"/>test_add_with_dict(table_types)<br ALIGN="LEFT"/>test_add_with_list(table_types)<br ALIGN="LEFT"/>test_add_with_none(table_types)<br ALIGN="LEFT"/>test_add_with_tuple(table_types)<br ALIGN="LEFT"/>test_insert_table_row(table_types)<br ALIGN="LEFT"/>test_wrong_size_tuple(table_types)<br ALIGN="LEFT"/>test_wrong_vals_type(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_masked.TestAddRow" [color="black", fontcolor="black", label=<{TestAddRow|<br ALIGN="LEFT"/>|test_add_masked_row_to_masked_table_iterable()<br ALIGN="LEFT"/>test_add_masked_row_to_masked_table_mapping1()<br ALIGN="LEFT"/>test_add_masked_row_to_masked_table_mapping2()<br ALIGN="LEFT"/>test_add_masked_row_to_masked_table_mapping3()<br ALIGN="LEFT"/>test_add_masked_row_to_masked_table_mapping4()<br ALIGN="LEFT"/>test_add_masked_row_to_masked_table_mismatch()<br ALIGN="LEFT"/>test_add_masked_row_to_non_masked_table_iterable()<br ALIGN="LEFT"/>test_add_row_cannot_mask_column_raises_typeerror()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.config.tests.test_configs.TestAliasRead" [color="black", fontcolor="black", label=<{TestAliasRead|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>test_alias_read()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_aliases.TestAliases" [color="black", fontcolor="black", label=<{TestAliases|<br ALIGN="LEFT"/>|teardown_class()<br ALIGN="LEFT"/>teardown_method()<br ALIGN="LEFT"/>test_add_enabled_aliases()<br ALIGN="LEFT"/>test_add_enabled_aliases_context_manager(aliases, bad, unit)<br ALIGN="LEFT"/>test_cannot_alias_existing_alias_to_another_unit()<br ALIGN="LEFT"/>test_cannot_alias_existing_unit()<br ALIGN="LEFT"/>test_set_enabled_aliases()<br ALIGN="LEFT"/>test_set_enabled_aliases_context_manager(aliases, bad, unit, format_)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestAlongAxis" [color="black", fontcolor="black", label=<{TestAlongAxis|<br ALIGN="LEFT"/>|test_apply_along_axis(axis)<br ALIGN="LEFT"/>test_apply_over_axes(axes)<br ALIGN="LEFT"/>test_put_along_axis()<br ALIGN="LEFT"/>test_take_along_axis()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestAlongAxis" [color="black", fontcolor="black", label=<{TestAlongAxis|<br ALIGN="LEFT"/>|test_apply_along_axis(axis)<br ALIGN="LEFT"/>test_apply_over_axes(axes)<br ALIGN="LEFT"/>test_apply_over_axes_no_reduction()<br ALIGN="LEFT"/>test_apply_over_axes_wrong_size()<br ALIGN="LEFT"/>test_put_along_axis()<br ALIGN="LEFT"/>test_take_along_axis()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_formatter_locator.TestAngleFormatterLocator" [color="black", fontcolor="black", label=<{TestAngleFormatterLocator|<br ALIGN="LEFT"/>|test_base_spacing(format, base_spacing)<br ALIGN="LEFT"/>test_decimal_values()<br ALIGN="LEFT"/>test_format(format, string)<br ALIGN="LEFT"/>test_formatter_no_format(spacing, string)<br ALIGN="LEFT"/>test_formatter_no_format_with_units(format_unit, decimal, show_decimal_unit, spacing, ascii, latex)<br ALIGN="LEFT"/>test_incompatible_unit_decimal()<br ALIGN="LEFT"/>test_incorrect_spacing()<br ALIGN="LEFT"/>test_invalid_formats(format)<br ALIGN="LEFT"/>test_latex_format()<br ALIGN="LEFT"/>test_minor_locator()<br ALIGN="LEFT"/>test_no_options()<br ALIGN="LEFT"/>test_number()<br ALIGN="LEFT"/>test_separator(separator, format, string)<br ALIGN="LEFT"/>test_spacing()<br ALIGN="LEFT"/>test_too_many_options()<br ALIGN="LEFT"/>test_unicode_minus(cls, unicode_minus, expected_char)<br ALIGN="LEFT"/>test_values()<br ALIGN="LEFT"/>test_values_unit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_containers.TestAngles" [color="black", fontcolor="black", label=<{TestAngles|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_as_input_for_angle(angle_cls)<br ALIGN="LEFT"/>test_at_limit_for_latitude(value, dtype)<br ALIGN="LEFT"/>test_at_wrap_angle_for_longitude(value, dtype)<br ALIGN="LEFT"/>test_earthlocation_geocentric_distribution()<br ALIGN="LEFT"/>test_earthlocation_geodetic_distribution()<br ALIGN="LEFT"/>test_operation_gives_correct_subclass(angle_cls)<br ALIGN="LEFT"/>test_pdfstd_gives_correct_subclass(angle_cls)<br ALIGN="LEFT"/>test_using_angle_as_input(angle_cls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_erfa_ufuncs.TestAp" [color="black", fontcolor="black", label=<{TestAp|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_apco13()<br ALIGN="LEFT"/>test_apco13_no_time_units()<br ALIGN="LEFT"/>test_apio()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestArgFunctions" [color="black", fontcolor="black", label=<{TestArgFunctions|<br ALIGN="LEFT"/>|test_argmax()<br ALIGN="LEFT"/>test_argmin()<br ALIGN="LEFT"/>test_argpartition()<br ALIGN="LEFT"/>test_argsort()<br ALIGN="LEFT"/>test_argwhere()<br ALIGN="LEFT"/>test_flatnonzero()<br ALIGN="LEFT"/>test_lexsort()<br ALIGN="LEFT"/>test_nonzero()<br ALIGN="LEFT"/>test_searchsorted()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestArgFunctions" [color="black", fontcolor="black", label=<{TestArgFunctions|<br ALIGN="LEFT"/>|check(function)<br ALIGN="LEFT"/>test_argmax()<br ALIGN="LEFT"/>test_argmin()<br ALIGN="LEFT"/>test_argpartition()<br ALIGN="LEFT"/>test_argsort()<br ALIGN="LEFT"/>test_argwhere()<br ALIGN="LEFT"/>test_flatnonzero()<br ALIGN="LEFT"/>test_lexsort()<br ALIGN="LEFT"/>test_nonzero()<br ALIGN="LEFT"/>test_nonzero_0d_np_ge_2_1()<br ALIGN="LEFT"/>test_nonzero_0d_np_lt_2_1()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_arithmetic.TestArithmetic" [color="black", fontcolor="black", label=<{TestArithmetic|cartesian<br ALIGN="LEFT"/>distance<br ALIGN="LEFT"/>lat<br ALIGN="LEFT"/>lon<br ALIGN="LEFT"/>spherical<br ALIGN="LEFT"/>unit_spherical<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_add_sub(representation)<br ALIGN="LEFT"/>test_add_sub_cartesian()<br ALIGN="LEFT"/>test_add_sub_unit_spherical()<br ALIGN="LEFT"/>test_cross(representation)<br ALIGN="LEFT"/>test_cross_unit_spherical()<br ALIGN="LEFT"/>test_dot(representation)<br ALIGN="LEFT"/>test_dot_unit_spherical()<br ALIGN="LEFT"/>test_mul_div(representation)<br ALIGN="LEFT"/>test_mul_div_spherical()<br ALIGN="LEFT"/>test_mul_div_unit_spherical()<br ALIGN="LEFT"/>test_neg_pos(representation)<br ALIGN="LEFT"/>test_norm(representation)<br ALIGN="LEFT"/>test_norm_spherical()<br ALIGN="LEFT"/>test_norm_unitspherical()<br ALIGN="LEFT"/>test_sum_mean(representation)<br ALIGN="LEFT"/>test_sum_mean_unit_spherical()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_methods.TestArithmetic" [color="black", fontcolor="black", label=<{TestArithmetic|functions : tuple<br ALIGN="LEFT"/>jd : dict<br ALIGN="LEFT"/>kwargs : tuple<br ALIGN="LEFT"/>t0 : dict<br ALIGN="LEFT"/>t1 : dict<br ALIGN="LEFT"/>t2 : dict<br ALIGN="LEFT"/>|create_data(use_mask)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test_argfuncs(kw, func, use_mask)<br ALIGN="LEFT"/>test_argmax(use_mask)<br ALIGN="LEFT"/>test_argmin(use_mask)<br ALIGN="LEFT"/>test_argsort(use_mask)<br ALIGN="LEFT"/>test_argsort_warning(use_mask, scale)<br ALIGN="LEFT"/>test_funcs(kw, func, use_mask)<br ALIGN="LEFT"/>test_max(use_mask)<br ALIGN="LEFT"/>test_mean(use_mask, axis, where, keepdims)<br ALIGN="LEFT"/>test_mean_dtype(use_mask)<br ALIGN="LEFT"/>test_mean_leap_second(use_mask)<br ALIGN="LEFT"/>test_mean_out(use_mask)<br ALIGN="LEFT"/>test_mean_precision(use_mask)<br ALIGN="LEFT"/>test_min(use_mask)<br ALIGN="LEFT"/>test_ptp(use_mask)<br ALIGN="LEFT"/>test_sort(use_mask)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_arithmetic.TestArithmeticWithDifferentials" [color="black", fontcolor="black", label=<{TestArithmeticWithDifferentials|c<br ALIGN="LEFT"/>cd<br ALIGN="LEFT"/>cr<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_operation_cartesian(op, args)<br ALIGN="LEFT"/>test_operation_cartesian_differential(rep_cls, op, args)<br ALIGN="LEFT"/>test_operation_other(diff_cls, op, args)<br ALIGN="LEFT"/>test_operation_radial(op, args)<br ALIGN="LEFT"/>test_operation_spherical_with_rv_or_pm(diff_cls, op, args)<br ALIGN="LEFT"/>test_operation_unit_spherical(diff_cls, op, args)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestArrayAPI" [color="black", fontcolor="black", label=<{TestArrayAPI|<br ALIGN="LEFT"/>|check(func)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test_cumulative_prod()<br ALIGN="LEFT"/>test_cumulative_sum()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestArrayColumns" [color="black", fontcolor="black", label=<{TestArrayColumns|<br ALIGN="LEFT"/>|test_1d(table_types)<br ALIGN="LEFT"/>test_2d(table_types)<br ALIGN="LEFT"/>test_3d(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_array_methods.TestArrayConversion" [color="black", fontcolor="black", label=<{TestArrayConversion|<br ALIGN="LEFT"/>|test_byte_type_view_field_changes()<br ALIGN="LEFT"/>test_fill()<br ALIGN="LEFT"/>test_item()<br ALIGN="LEFT"/>test_itemset()<br ALIGN="LEFT"/>test_not_implemented()<br ALIGN="LEFT"/>test_repeat_compress_diagonal()<br ALIGN="LEFT"/>test_slice()<br ALIGN="LEFT"/>test_slice_to_quantity()<br ALIGN="LEFT"/>test_sort()<br ALIGN="LEFT"/>test_take_put()<br ALIGN="LEFT"/>test_view()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestArrayCreation" [color="black", fontcolor="black", label=<{TestArrayCreation|<br ALIGN="LEFT"/>|check(func)<br ALIGN="LEFT"/>test_array()<br ALIGN="LEFT"/>test_array_unit_from_data()<br ALIGN="LEFT"/>test_asanyarray()<br ALIGN="LEFT"/>test_asarray()<br ALIGN="LEFT"/>test_ascontiguousarray()<br ALIGN="LEFT"/>test_asfortranarray()<br ALIGN="LEFT"/>test_empty()<br ALIGN="LEFT"/>test_eye()<br ALIGN="LEFT"/>test_frombuffer()<br ALIGN="LEFT"/>test_fromfile(tmp_path)<br ALIGN="LEFT"/>test_fromfunction()<br ALIGN="LEFT"/>test_fromfunction_unit_from_retv()<br ALIGN="LEFT"/>test_fromiter()<br ALIGN="LEFT"/>test_fromstring()<br ALIGN="LEFT"/>test_full()<br ALIGN="LEFT"/>test_full_unit_from_fill_value()<br ALIGN="LEFT"/>test_genfromtxt()<br ALIGN="LEFT"/>test_identity()<br ALIGN="LEFT"/>test_loadtxt()<br ALIGN="LEFT"/>test_ones()<br ALIGN="LEFT"/>test_require()<br ALIGN="LEFT"/>test_tri()<br ALIGN="LEFT"/>test_zeros()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestArrayCreation" [color="black", fontcolor="black", label=<{TestArrayCreation|<br ALIGN="LEFT"/>|test_empty_like()<br ALIGN="LEFT"/>test_full_like(value)<br ALIGN="LEFT"/>test_ones_like()<br ALIGN="LEFT"/>test_zeros_like()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestArraySetOps" [color="black", fontcolor="black", label=<{TestArraySetOps|<br ALIGN="LEFT"/>|check_unique(test)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test_ediff1d()<br ALIGN="LEFT"/>test_in1d()<br ALIGN="LEFT"/>test_in1d_kind_table_error()<br ALIGN="LEFT"/>test_intersect1d()<br ALIGN="LEFT"/>test_isin(dtype)<br ALIGN="LEFT"/>test_setdiff1d()<br ALIGN="LEFT"/>test_setxor1d()<br ALIGN="LEFT"/>test_union1d(dtype)<br ALIGN="LEFT"/>test_unique(dtype)<br ALIGN="LEFT"/>test_unique_all()<br ALIGN="LEFT"/>test_unique_counts()<br ALIGN="LEFT"/>test_unique_inverse()<br ALIGN="LEFT"/>test_unique_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_column.TestAttrEqual" [color="black", fontcolor="black", label=<{TestAttrEqual|<br ALIGN="LEFT"/>|test_10(Column)<br ALIGN="LEFT"/>test_11(Column)<br ALIGN="LEFT"/>test_12(Column)<br ALIGN="LEFT"/>test_13(Column)<br ALIGN="LEFT"/>test_5(Column)<br ALIGN="LEFT"/>test_6(Column)<br ALIGN="LEFT"/>test_7(Column)<br ALIGN="LEFT"/>test_8(Column)<br ALIGN="LEFT"/>test_9(Column)<br ALIGN="LEFT"/>test_col_and_masked_col()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_frame_attribute_descriptor.TestAttributes" [color="black", fontcolor="black", label=<{TestAttributes|attr_2<br ALIGN="LEFT"/>attr_3_attr2<br ALIGN="LEFT"/>attr_none<br ALIGN="LEFT"/>attr_none_attr2<br ALIGN="LEFT"/>attr_none_nonexist<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.iers.tests.test_leap_second.TestAutoOpenExplicitLists" [color="black", fontcolor="black", label=<{TestAutoOpenExplicitLists|<br ALIGN="LEFT"/>|test_auto_open_erfa()<br ALIGN="LEFT"/>test_auto_open_simple()<br ALIGN="LEFT"/>test_fake_expired_file(tmp_path)<br ALIGN="LEFT"/>test_fake_future_file(tmp_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_images.TestBasic" [color="black", fontcolor="black", label=<{TestBasic|<br ALIGN="LEFT"/>|test_axes_off()<br ALIGN="LEFT"/>test_axisbelow(axisbelow)<br ALIGN="LEFT"/>test_axislabels_regression()<br ALIGN="LEFT"/>test_beam_shape_from_args(tmp_path)<br ALIGN="LEFT"/>test_beam_shape_from_header(tmp_path)<br ALIGN="LEFT"/>test_changed_axis_units()<br ALIGN="LEFT"/>test_contour_overlay()<br ALIGN="LEFT"/>test_contourf_overlay()<br ALIGN="LEFT"/>test_cube_slice_image()<br ALIGN="LEFT"/>test_cube_slice_image_lonlat()<br ALIGN="LEFT"/>test_curvilinear_grid_patches_image()<br ALIGN="LEFT"/>test_elliptical_frame()<br ALIGN="LEFT"/>test_hms_labels()<br ALIGN="LEFT"/>test_image_plot()<br ALIGN="LEFT"/>test_latex_labels()<br ALIGN="LEFT"/>test_minor_ticks()<br ALIGN="LEFT"/>test_no_ticks()<br ALIGN="LEFT"/>test_noncelestial_angular(tmp_path)<br ALIGN="LEFT"/>test_overlay_features_image()<br ALIGN="LEFT"/>test_patches_distortion(tmp_path)<br ALIGN="LEFT"/>test_plot_coord()<br ALIGN="LEFT"/>test_plot_line()<br ALIGN="LEFT"/>test_quadrangle(tmp_path)<br ALIGN="LEFT"/>test_rcparams()<br ALIGN="LEFT"/>test_scalebar(tmp_path)<br ALIGN="LEFT"/>test_scatter_coord()<br ALIGN="LEFT"/>test_set_coord_type()<br ALIGN="LEFT"/>test_text_coord()<br ALIGN="LEFT"/>test_tick_angles()<br ALIGN="LEFT"/>test_tick_angles_non_square_axes()<br ALIGN="LEFT"/>test_tick_params()<br ALIGN="LEFT"/>test_ticks_labels()<br ALIGN="LEFT"/>test_ticks_regression()<br ALIGN="LEFT"/>test_tight_layout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.iers.tests.test_iers.TestBasic" [color="black", fontcolor="black", label=<{TestBasic|<br ALIGN="LEFT"/>|test_open_filename()<br ALIGN="LEFT"/>test_open_network_url()<br ALIGN="LEFT"/>test_simple(iers_cls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_basic.TestBasic" [color="black", fontcolor="black", label=<{TestBasic|<br ALIGN="LEFT"/>|test_all_scale_transforms()<br ALIGN="LEFT"/>test_copy_time(value)<br ALIGN="LEFT"/>test_creating_all_formats()<br ALIGN="LEFT"/>test_datetime()<br ALIGN="LEFT"/>test_datetime64()<br ALIGN="LEFT"/>test_different_dimensions()<br ALIGN="LEFT"/>test_empty_value(format_)<br ALIGN="LEFT"/>test_epoch_transform()<br ALIGN="LEFT"/>test_getitem()<br ALIGN="LEFT"/>test_init_from_time_objects()<br ALIGN="LEFT"/>test_input_validation()<br ALIGN="LEFT"/>test_local_format_transforms()<br ALIGN="LEFT"/>test_location()<br ALIGN="LEFT"/>test_location_array()<br ALIGN="LEFT"/>test_precision()<br ALIGN="LEFT"/>test_precision_input()<br ALIGN="LEFT"/>test_properties()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>test_transforms()<br ALIGN="LEFT"/>test_transforms_no_location()<br ALIGN="LEFT"/>test_utc_leap_sec()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestBinaryUfuncs" [color="black", fontcolor="black", label=<{TestBinaryUfuncs|<br ALIGN="LEFT"/>|test_basic(ufunc, quantity, duck_quantity)<br ALIGN="LEFT"/>test_full(ufunc, quantity, duck_quantity, out)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestBincount" [color="black", fontcolor="black", label=<{TestBincount|<br ALIGN="LEFT"/>|test_bincount()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestBincountDigitize" [color="black", fontcolor="black", label=<{TestBincountDigitize|<br ALIGN="LEFT"/>|test_bincount()<br ALIGN="LEFT"/>test_digitize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.timeseries.tests.test_common.TestBinnedTimeSeries" [color="black", fontcolor="black", label=<{TestBinnedTimeSeries|series<br ALIGN="LEFT"/>time_attr : str<br ALIGN="LEFT"/>|setup_method(method)<br ALIGN="LEFT"/>test_column_slicing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestBitAndIndexFunctions" [color="black", fontcolor="black", label=<{TestBitAndIndexFunctions|q<br ALIGN="LEFT"/>uint_q<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_ix_()<br ALIGN="LEFT"/>test_packbits()<br ALIGN="LEFT"/>test_ravel_multi_index()<br ALIGN="LEFT"/>test_unpackbits()<br ALIGN="LEFT"/>test_unravel_index()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestBitFunctions" [color="black", fontcolor="black", label=<{TestBitFunctions|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_packbits(axis)<br ALIGN="LEFT"/>test_unpackbits()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.tests.test_blocks.TestBlockReduce" [color="black", fontcolor="black", label=<{TestBlockReduce|<br ALIGN="LEFT"/>|test_1d()<br ALIGN="LEFT"/>test_1d_mean()<br ALIGN="LEFT"/>test_2d()<br ALIGN="LEFT"/>test_2d_mean()<br ALIGN="LEFT"/>test_2d_trim()<br ALIGN="LEFT"/>test_block_size_broadcasting()<br ALIGN="LEFT"/>test_block_size_len()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.tests.test_blocks.TestBlockReplicate" [color="black", fontcolor="black", label=<{TestBlockReplicate|<br ALIGN="LEFT"/>|test_1d()<br ALIGN="LEFT"/>test_1d_conserve_sum()<br ALIGN="LEFT"/>test_2d()<br ALIGN="LEFT"/>test_2d_conserve_sum()<br ALIGN="LEFT"/>test_block_size_broadcasting()<br ALIGN="LEFT"/>test_block_size_len()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_constraints.TestBounds" [color="black", fontcolor="black", label=<{TestBounds|data : ndarray<br ALIGN="LEFT"/>x : ndarray<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_bounds_gauss2d_lsq(fitter)<br ALIGN="LEFT"/>test_bounds_gauss2d_slsqp()<br ALIGN="LEFT"/>test_bounds_lsq(fitter)<br ALIGN="LEFT"/>test_bounds_slsqp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_functions.TestBroadcast" [color="black", fontcolor="black", label=<{TestBroadcast|<br ALIGN="LEFT"/>|test_broadcast_arrays()<br ALIGN="LEFT"/>test_broadcast_arrays_subok_false()<br ALIGN="LEFT"/>test_broadcast_to()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_quantities_parameters.test_parameter_default_units_match.TestC" [color="black", fontcolor="black", label=<{TestC|a<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_arithmetic.TestCartesianDifferential" [color="black", fontcolor="black", label=<{TestCartesianDifferential|e : dict<br ALIGN="LEFT"/>s<br ALIGN="LEFT"/>sf : dict<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_init_failures()<br ALIGN="LEFT"/>test_name()<br ALIGN="LEFT"/>test_simple_differentials()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.TestCartesianRepresentation" [color="black", fontcolor="black", label=<{TestCartesianRepresentation|<br ALIGN="LEFT"/>|test_broadcasting()<br ALIGN="LEFT"/>test_broadcasting_mismatch()<br ALIGN="LEFT"/>test_empty_init()<br ALIGN="LEFT"/>test_getitem()<br ALIGN="LEFT"/>test_getitem_scalar()<br ALIGN="LEFT"/>test_init_array()<br ALIGN="LEFT"/>test_init_array_nocopy()<br ALIGN="LEFT"/>test_init_one_array()<br ALIGN="LEFT"/>test_init_one_array_size_fail()<br ALIGN="LEFT"/>test_init_one_array_yz_fail()<br ALIGN="LEFT"/>test_init_quantity()<br ALIGN="LEFT"/>test_init_singleunit()<br ALIGN="LEFT"/>test_init_xyz_but_more_than_one_array_fail()<br ALIGN="LEFT"/>test_name()<br ALIGN="LEFT"/>test_readonly()<br ALIGN="LEFT"/>test_reprobj()<br ALIGN="LEFT"/>test_transform()<br ALIGN="LEFT"/>test_transform_non_contiguous_matrix()<br ALIGN="LEFT"/>test_unit_mismatch()<br ALIGN="LEFT"/>test_unit_non_length()<br ALIGN="LEFT"/>test_xyz()<br ALIGN="LEFT"/>test_xyz_is_view_if_possible()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.TestCartesianRepresentationWithDifferential" [color="black", fontcolor="black", label=<{TestCartesianRepresentationWithDifferential|<br ALIGN="LEFT"/>|test_getitem()<br ALIGN="LEFT"/>test_init_array_broadcasting()<br ALIGN="LEFT"/>test_init_differential()<br ALIGN="LEFT"/>test_init_differential_compatible()<br ALIGN="LEFT"/>test_init_differential_multiple_equivalent_keys()<br ALIGN="LEFT"/>test_readonly()<br ALIGN="LEFT"/>test_represent_as()<br ALIGN="LEFT"/>test_represent_as_unit_spherical_with_diff(sph_diff, usph_diff)<br ALIGN="LEFT"/>test_reprobj()<br ALIGN="LEFT"/>test_setitem()<br ALIGN="LEFT"/>test_transform()<br ALIGN="LEFT"/>test_with_differentials()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed.tests.test_checksum.TestChecksumFunctions" [color="black", fontcolor="black", label=<{TestChecksumFunctions|<br ALIGN="LEFT"/>|test_compressed_image_data()<br ALIGN="LEFT"/>test_compressed_image_data_float32()<br ALIGN="LEFT"/>test_compressed_image_data_int16()<br ALIGN="LEFT"/>test_failing_compressed_datasum()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_checksum.TestChecksumFunctions" [color="black", fontcolor="black", label=<{TestChecksumFunctions|<br ALIGN="LEFT"/>|test_append()<br ALIGN="LEFT"/>test_ascii_table_data()<br ALIGN="LEFT"/>test_binary_table_data()<br ALIGN="LEFT"/>test_datasum_only()<br ALIGN="LEFT"/>test_groups_hdu_data()<br ALIGN="LEFT"/>test_hdu_writeto()<br ALIGN="LEFT"/>test_hdu_writeto_existing()<br ALIGN="LEFT"/>test_image_create()<br ALIGN="LEFT"/>test_open_update_mode_preserve_checksum()<br ALIGN="LEFT"/>test_open_update_mode_update_checksum()<br ALIGN="LEFT"/>test_open_with_no_keywords()<br ALIGN="LEFT"/>test_overwrite_invalid()<br ALIGN="LEFT"/>test_sample_file()<br ALIGN="LEFT"/>test_scaled_data()<br ALIGN="LEFT"/>test_scaled_data_auto_rescale()<br ALIGN="LEFT"/>test_uint16_data()<br ALIGN="LEFT"/>test_variable_length_table_data()<br ALIGN="LEFT"/>test_variable_length_table_data2()<br ALIGN="LEFT"/>test_writeto_convenience()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_format_doc_onMethod.TestClass" [color="black", fontcolor="black", label=<{TestClass|<br ALIGN="LEFT"/>|<I>test_method</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.tests.test_decorators.test_format_doc_onClass.TestClass" [color="black", fontcolor="black", label=<{TestClass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestClip" [color="black", fontcolor="black", label=<{TestClip|clip<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_clip_dimensionless()<br ALIGN="LEFT"/>test_clip_errors()<br ALIGN="LEFT"/>test_clip_ndarray()<br ALIGN="LEFT"/>test_clip_ndarray_dimensionless_output()<br ALIGN="LEFT"/>test_clip_quantity_inplace()<br ALIGN="LEFT"/>test_clip_simple()<br ALIGN="LEFT"/>test_clip_unitless_parts()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_column.TestColumn" [color="black", fontcolor="black", label=<{TestColumn|<br ALIGN="LEFT"/>|test_access_scalar(scalar)<br ALIGN="LEFT"/>test_array_wrap()<br ALIGN="LEFT"/>test_attrs_survive_getitem_after_change(Column)<br ALIGN="LEFT"/>test_convert_numpy_array(Column)<br ALIGN="LEFT"/>test_convert_unit(Column)<br ALIGN="LEFT"/>test_format(Column)<br ALIGN="LEFT"/>test_insert_axis(Column)<br ALIGN="LEFT"/>test_insert_basic(Column)<br ALIGN="LEFT"/>test_insert_masked()<br ALIGN="LEFT"/>test_insert_masked_multidim()<br ALIGN="LEFT"/>test_insert_multidim(Column)<br ALIGN="LEFT"/>test_insert_object(Column)<br ALIGN="LEFT"/>test_insert_string_expand(Column)<br ALIGN="LEFT"/>test_insert_string_masked_values()<br ALIGN="LEFT"/>test_insert_string_type_error(Column)<br ALIGN="LEFT"/>test_item_access_type(Column)<br ALIGN="LEFT"/>test_mask_on_non_masked_table()<br ALIGN="LEFT"/>test_masked_multidim_as_list()<br ALIGN="LEFT"/>test_name_none(Column)<br ALIGN="LEFT"/>test_numpy_boolean_ufuncs(Column)<br ALIGN="LEFT"/>test_numpy_ops(Column)<br ALIGN="LEFT"/>test_quantity_comparison(Column)<br ALIGN="LEFT"/>test_quantity_init(Column)<br ALIGN="LEFT"/>test_quantity_with_info_init(Column)<br ALIGN="LEFT"/>test_subclass(Column)<br ALIGN="LEFT"/>test_to_funcunit_quantity(Column)<br ALIGN="LEFT"/>test_to_quantity(Column)<br ALIGN="LEFT"/>test_view(Column)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestColumnAccess" [color="black", fontcolor="black", label=<{TestColumnAccess|<br ALIGN="LEFT"/>|test_1(table_types)<br ALIGN="LEFT"/>test_2(table_types)<br ALIGN="LEFT"/>test_itercols(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_table.TestColumnFunctions" [color="black", fontcolor="black", label=<{TestColumnFunctions|<br ALIGN="LEFT"/>|test_coldefs_init_from_array()<br ALIGN="LEFT"/>test_column_array_type_mismatch()<br ALIGN="LEFT"/>test_column_attribute_change_after_removal()<br ALIGN="LEFT"/>test_column_format_interpretation()<br ALIGN="LEFT"/>test_column_lookup_by_name()<br ALIGN="LEFT"/>test_column_verify_formats(keys)<br ALIGN="LEFT"/>test_column_verify_keywords()<br ALIGN="LEFT"/>test_column_verify_start()<br ALIGN="LEFT"/>test_new_coldefs_with_invalid_seqence()<br ALIGN="LEFT"/>test_p_column_deepcopy()<br ALIGN="LEFT"/>test_pickle()<br ALIGN="LEFT"/>test_x_column_deepcopy()<br ALIGN="LEFT"/>test_zero_precision_float_column()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_pprint.TestColumnsShowHide" [color="black", fontcolor="black", label=<{TestColumnsShowHide|t<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_add_remove(attr, value)<br ALIGN="LEFT"/>test_basic(attr)<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>test_output()<br ALIGN="LEFT"/>test_output_globs()<br ALIGN="LEFT"/>test_remove(attr)<br ALIGN="LEFT"/>test_rename(attr)<br ALIGN="LEFT"/>test_serialization()<br ALIGN="LEFT"/>test_setting(attr, value)<br ALIGN="LEFT"/>test_slice()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed.tests.test_compressed.TestCompHDUSections" [color="black", fontcolor="black", label=<{TestCompHDUSections|data<br ALIGN="LEFT"/>hdul : NoneType<br ALIGN="LEFT"/>hdul2<br ALIGN="LEFT"/>|setup_method(tmp_path)<br ALIGN="LEFT"/>teardown_method()<br ALIGN="LEFT"/>test_section_properties()<br ALIGN="LEFT"/>test_section_slicing(index)<br ALIGN="LEFT"/>test_section_slicing_scaling(index)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_distribution.TestComparison" [color="black", fontcolor="black", label=<{TestComparison|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_distribution_can_be_compared_to_non_distribution(op)<br ALIGN="LEFT"/>test_distribution_comparison_defers_correctly(op)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestComparisonUfuncs" [color="black", fontcolor="black", label=<{TestComparisonUfuncs|<br ALIGN="LEFT"/>|test_comparison_invalid_units(ufunc)<br ALIGN="LEFT"/>test_comparison_valid_units(ufunc)<br ALIGN="LEFT"/>test_onearg_test_ufuncs(ufunc)<br ALIGN="LEFT"/>test_sign()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_bounding_box.TestCompoundBoundingBox" [color="black", fontcolor="black", label=<{TestCompoundBoundingBox|<br ALIGN="LEFT"/>|test___contains__()<br ALIGN="LEFT"/>test___eq__()<br ALIGN="LEFT"/>test___getitem__()<br ALIGN="LEFT"/>test___repr__()<br ALIGN="LEFT"/>test___setitem__()<br ALIGN="LEFT"/>test__create_bounding_box()<br ALIGN="LEFT"/>test__fix_input_bbox_arg()<br ALIGN="LEFT"/>test__fix_input_selector_arg()<br ALIGN="LEFT"/>test__get_selector_key()<br ALIGN="LEFT"/>test__matching_bounding_boxes()<br ALIGN="LEFT"/>test__select_bounding_box()<br ALIGN="LEFT"/>test__validate()<br ALIGN="LEFT"/>test_bounding_boxes()<br ALIGN="LEFT"/>test_complex_compound_bounding_box()<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>test_create()<br ALIGN="LEFT"/>test_create_selector()<br ALIGN="LEFT"/>test_fix_inputs()<br ALIGN="LEFT"/>test_prepare_inputs()<br ALIGN="LEFT"/>test_selector_args()<br ALIGN="LEFT"/>test_validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed.tests.test_compressed.TestCompressedImage" [color="black", fontcolor="black", label=<{TestCompressedImage|<br ALIGN="LEFT"/>|test_comp_image(data, compression_type, quantize_level, byte_order)<br ALIGN="LEFT"/>test_comp_image_hcompress_image_stack()<br ALIGN="LEFT"/>test_comp_image_hcompression_1_invalid_data()<br ALIGN="LEFT"/>test_comp_image_properties_default()<br ALIGN="LEFT"/>test_comp_image_properties_set()<br ALIGN="LEFT"/>test_comp_image_quantize_level()<br ALIGN="LEFT"/>test_compressed_header_double_extname()<br ALIGN="LEFT"/>test_compressed_header_extname()<br ALIGN="LEFT"/>test_compressed_header_minimal()<br ALIGN="LEFT"/>test_compressed_integers(dtype)<br ALIGN="LEFT"/>test_compressed_optional_prefix_tform(tmp_path)<br ALIGN="LEFT"/>test_compressed_scaled_float(keyword, dtype, expected)<br ALIGN="LEFT"/>test_compression_column_tforms()<br ALIGN="LEFT"/>test_compression_header_append(tmp_path)<br ALIGN="LEFT"/>test_compression_header_append2()<br ALIGN="LEFT"/>test_compression_header_append_commentary()<br ALIGN="LEFT"/>test_compression_header_insert(tmp_path)<br ALIGN="LEFT"/>test_compression_header_set_before_after(tmp_path)<br ALIGN="LEFT"/>test_compression_update_header()<br ALIGN="LEFT"/>test_compression_update_header_with_reserved(tmp_path)<br ALIGN="LEFT"/>test_compression_with_gzip_column()<br ALIGN="LEFT"/>test_disable_image_compression()<br ALIGN="LEFT"/>test_duplicate_compression_header_keywords()<br ALIGN="LEFT"/>test_empty()<br ALIGN="LEFT"/>test_fileinfo()<br ALIGN="LEFT"/>test_info()<br ALIGN="LEFT"/>test_inplace_data_modify(tmp_path)<br ALIGN="LEFT"/>test_lossless_gzip_compression()<br ALIGN="LEFT"/>test_open_comp_image_in_update_mode()<br ALIGN="LEFT"/>test_open_scaled_in_update_mode_compressed()<br ALIGN="LEFT"/>test_rewriting_large_scaled_image_compressed()<br ALIGN="LEFT"/>test_scale_back_compressed()<br ALIGN="LEFT"/>test_scale_back_compressed_uint_assignment()<br ALIGN="LEFT"/>test_scale_bzero_with_compressed_int_data()<br ALIGN="LEFT"/>test_shape()<br ALIGN="LEFT"/>test_slice_and_write_comp_hdu()<br ALIGN="LEFT"/>test_subtractive_dither_seed()<br ALIGN="LEFT"/>test_summary_noload()<br ALIGN="LEFT"/>test_write_comp_hdu_direct_from_existing()<br ALIGN="LEFT"/>test_write_non_contiguous_data(dtype, compression_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed.tests.test_compression_failures.TestCompressionFunction" [color="black", fontcolor="black", label=<{TestCompressionFunction|<br ALIGN="LEFT"/>|test_data_none()<br ALIGN="LEFT"/>test_header_missing_keyword(kw)<br ALIGN="LEFT"/>test_header_value_exceeds_custom_limit(kw, limit)<br ALIGN="LEFT"/>test_header_value_float_overflow(kw)<br ALIGN="LEFT"/>test_header_value_int_overflow(kw)<br ALIGN="LEFT"/>test_header_value_long_overflow(kw)<br ALIGN="LEFT"/>test_header_value_longlong_overflow(kw)<br ALIGN="LEFT"/>test_header_value_negative(kw)<br ALIGN="LEFT"/>test_header_value_no_double(kw)<br ALIGN="LEFT"/>test_header_value_no_double_int_image(kw)<br ALIGN="LEFT"/>test_header_value_no_string(kw)<br ALIGN="LEFT"/>test_invalid_tform()<br ALIGN="LEFT"/>test_invalid_zdither()<br ALIGN="LEFT"/>test_unknown_compression_type()<br ALIGN="LEFT"/>test_wrong_argument_number()<br ALIGN="LEFT"/>test_zbitpix_unknown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestConcatenate" [color="black", fontcolor="black", label=<{TestConcatenate|q1<br ALIGN="LEFT"/>q2<br ALIGN="LEFT"/>|check(func)<br ALIGN="LEFT"/>setup_method()<br ALIGN="LEFT"/>test_append()<br ALIGN="LEFT"/>test_block()<br ALIGN="LEFT"/>test_column_stack()<br ALIGN="LEFT"/>test_concatenate()<br ALIGN="LEFT"/>test_dstack()<br ALIGN="LEFT"/>test_hstack()<br ALIGN="LEFT"/>test_insert()<br ALIGN="LEFT"/>test_pad()<br ALIGN="LEFT"/>test_stack()<br ALIGN="LEFT"/>test_vstack()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestConcatenate" [color="black", fontcolor="black", label=<{TestConcatenate|<br ALIGN="LEFT"/>|check(func)<br ALIGN="LEFT"/>test_append()<br ALIGN="LEFT"/>test_block()<br ALIGN="LEFT"/>test_column_stack()<br ALIGN="LEFT"/>test_concatenate()<br ALIGN="LEFT"/>test_dstack()<br ALIGN="LEFT"/>test_hstack()<br ALIGN="LEFT"/>test_insert()<br ALIGN="LEFT"/>test_stack()<br ALIGN="LEFT"/>test_vstack()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_functions.TestConcatenation" [color="black", fontcolor="black", label=<{TestConcatenation|<br ALIGN="LEFT"/>|test_concatenate()<br ALIGN="LEFT"/>test_concatenate_not_all_distribution()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_convenience.TestConvenience" [color="black", fontcolor="black", label=<{TestConvenience|<br ALIGN="LEFT"/>|test_append_filehandle(tmp_path, mode)<br ALIGN="LEFT"/>test_append_filename(home_is_temp)<br ALIGN="LEFT"/>test_append_with_header()<br ALIGN="LEFT"/>test_dump_load_round_trip(tablename)<br ALIGN="LEFT"/>test_fileobj_not_closed()<br ALIGN="LEFT"/>test_getdata_ext_given()<br ALIGN="LEFT"/>test_getdata_ext_given_nodata()<br ALIGN="LEFT"/>test_getdata_ext_not_given_nodata_any()<br ALIGN="LEFT"/>test_getdata_ext_not_given_nodata_noext()<br ALIGN="LEFT"/>test_getdata_ext_not_given_with_data_in_ext()<br ALIGN="LEFT"/>test_getdata_ext_not_given_with_data_in_primary()<br ALIGN="LEFT"/>test_image_extension_update_header(home_is_temp)<br ALIGN="LEFT"/>test_masked_table_to_hdu()<br ALIGN="LEFT"/>test_pathlib()<br ALIGN="LEFT"/>test_printdiff()<br ALIGN="LEFT"/>test_resource_warning()<br ALIGN="LEFT"/>test_table_non_stringifyable_unit_to_hdu()<br ALIGN="LEFT"/>test_table_to_hdu()<br ALIGN="LEFT"/>test_table_to_hdu_convert_comment_convention()<br ALIGN="LEFT"/>test_table_to_hdu_filter_incompatible()<br ALIGN="LEFT"/>test_table_to_hdu_filter_reserved()<br ALIGN="LEFT"/>test_table_to_hdu_warn_reserved(card)<br ALIGN="LEFT"/>test_table_writeto_header()<br ALIGN="LEFT"/>test_tabledump()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_core.TestConvenienceFunctions" [color="black", fontcolor="black", label=<{TestConvenienceFunctions|<br ALIGN="LEFT"/>|test_writeto(home_is_temp)<br ALIGN="LEFT"/>test_writeto_2()<br ALIGN="LEFT"/>test_writeto_overwrite(home_is_temp)<br ALIGN="LEFT"/>test_writeto_stdout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestConvertNumpyArray" [color="black", fontcolor="black", label=<{TestConvertNumpyArray|<br ALIGN="LEFT"/>|test_as_array_byteswap(table_types)<br ALIGN="LEFT"/>test_byteswap_fits_array(table_types)<br ALIGN="LEFT"/>test_convert_list_numpy_object_array(table_types)<br ALIGN="LEFT"/>test_convert_numpy_array(table_types)<br ALIGN="LEFT"/>test_convert_numpy_object_array(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.tests.test_convolve_fft.TestConvolve1D" [color="black", fontcolor="black", label=<{TestConvolve1D|inputs : tuple<br ALIGN="LEFT"/>options_unity1withnan : list<br ALIGN="LEFT"/>outputs : tuple<br ALIGN="LEFT"/>|test_halfity_3(boundary, nan_treatment, normalize_kernel, dealias)<br ALIGN="LEFT"/>test_masked_array()<br ALIGN="LEFT"/>test_nan_fill()<br ALIGN="LEFT"/>test_nan_fill_two()<br ALIGN="LEFT"/>test_nan_interpolate()<br ALIGN="LEFT"/>test_normalization_is_respected(boundary, nan_treatment, normalize_kernel, dealias)<br ALIGN="LEFT"/>test_normalize_function()<br ALIGN="LEFT"/>test_quantity(boundary, nan_treatment, normalize_kernel, dealias)<br ALIGN="LEFT"/>test_uniform_3(boundary, nan_treatment, normalize_kernel, dealias)<br ALIGN="LEFT"/>test_uniform_3_withnan(boundary, nan_treatment, normalize_kernel, preserve_nan)<br ALIGN="LEFT"/>test_unity_1_none(boundary, nan_treatment, normalize_kernel, dealias)<br ALIGN="LEFT"/>test_unity_1_withnan(boundary, nan_treatment, normalize_kernel, preserve_nan, inval, outval)<br ALIGN="LEFT"/>test_unity_3(boundary, nan_treatment, normalize_kernel, dealias)<br ALIGN="LEFT"/>test_unity_3_withnan(boundary, nan_treatment, normalize_kernel, preserve_nan)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.tests.test_convolve.TestConvolve1D" [color="black", fontcolor="black", label=<{TestConvolve1D|<br ALIGN="LEFT"/>|test_dtype(dtype_array, dtype_kernel)<br ALIGN="LEFT"/>test_exceptions(array, exc_type, match)<br ALIGN="LEFT"/>test_input_unmodified(boundary, nan_treatment, normalize_kernel, preserve_nan, dtype)<br ALIGN="LEFT"/>test_input_unmodified_with_nan(boundary, nan_treatment, normalize_kernel, preserve_nan, dtype)<br ALIGN="LEFT"/>test_int_masked_array(preserve_nan)<br ALIGN="LEFT"/>test_int_masked_kernel(boundary, normalize_kernel)<br ALIGN="LEFT"/>test_list()<br ALIGN="LEFT"/>test_quantity(boundary, nan_treatment, normalize_kernel, preserve_nan, dtype)<br ALIGN="LEFT"/>test_tuple()<br ALIGN="LEFT"/>test_uniform_3(boundary)<br ALIGN="LEFT"/>test_uniform_3_withnan(boundary, nan_treatment, normalize_kernel, preserve_nan)<br ALIGN="LEFT"/>test_unity_1_none(boundary, convfunc)<br ALIGN="LEFT"/>test_unity_3(boundary)<br ALIGN="LEFT"/>test_unity_3_withnan(boundary, nan_treatment, normalize_kernel, preserve_nan)<br ALIGN="LEFT"/>test_zero_sum_kernel(boundary, normalize_kernel)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.tests.test_convolve_models.TestConvolve1DModels" [color="black", fontcolor="black", label=<{TestConvolve1DModels|<br ALIGN="LEFT"/>|test_against_scipy(mode)<br ALIGN="LEFT"/>test_against_scipy_with_additional_keywords(mode)<br ALIGN="LEFT"/>test_convolve_box_models(mode)<br ALIGN="LEFT"/>test_fitting_convolve_models(mode)<br ALIGN="LEFT"/>test_is_consistency_with_astropy_convolution(mode)<br ALIGN="LEFT"/>test_sum_of_gaussians(mode)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.tests.test_convolve_fft.TestConvolve2D" [color="black", fontcolor="black", label=<{TestConvolve2D|<br ALIGN="LEFT"/>|test_big_fail()<br ALIGN="LEFT"/>test_non_normalized_kernel(boundary)<br ALIGN="LEFT"/>test_padding()<br ALIGN="LEFT"/>test_uniform_3x3(boundary, nan_treatment, normalize_kernel, dealias)<br ALIGN="LEFT"/>test_uniform_3x3_withnan(boundary, nan_treatment, normalize_kernel, preserve_nan)<br ALIGN="LEFT"/>test_unity_1x1_none(boundary, nan_treatment, normalize_kernel, dealias)<br ALIGN="LEFT"/>test_unity_3x3(boundary, nan_treatment, normalize_kernel, dealias)<br ALIGN="LEFT"/>test_unity_3x3_withnan(boundary, nan_treatment, normalize_kernel, preserve_nan)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.tests.test_convolve.TestConvolve2D" [color="black", fontcolor="black", label=<{TestConvolve2D|<br ALIGN="LEFT"/>|test_dtype(dtype_array, dtype_kernel)<br ALIGN="LEFT"/>test_list()<br ALIGN="LEFT"/>test_non_normalized_kernel_2D(boundary)<br ALIGN="LEFT"/>test_uniform_3x3(boundary)<br ALIGN="LEFT"/>test_uniform_3x3_withnanfilled(boundary)<br ALIGN="LEFT"/>test_uniform_3x3_withnaninterped(boundary)<br ALIGN="LEFT"/>test_unity_1x1_none(boundary)<br ALIGN="LEFT"/>test_unity_3x3(boundary)<br ALIGN="LEFT"/>test_unity_3x3_withnan(boundary)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.tests.test_convolve.TestConvolve3D" [color="black", fontcolor="black", label=<{TestConvolve3D|<br ALIGN="LEFT"/>|test_dtype(dtype_array, dtype_kernel)<br ALIGN="LEFT"/>test_list()<br ALIGN="LEFT"/>test_uniform_3x3x3(boundary)<br ALIGN="LEFT"/>test_uniform_3x3x3_withnan_filled(boundary)<br ALIGN="LEFT"/>test_uniform_3x3x3_withnan_interped(boundary)<br ALIGN="LEFT"/>test_unity_1x1x1_none(boundary)<br ALIGN="LEFT"/>test_unity_3x3x3(boundary)<br ALIGN="LEFT"/>test_unity_3x3x3_withnan(boundary, nan_treatment)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestCopyAndCreation" [color="black", fontcolor="black", label=<{TestCopyAndCreation|<br ALIGN="LEFT"/>|test_arange(args, kwargs, expected)<br ALIGN="LEFT"/>test_arange_default_unit()<br ALIGN="LEFT"/>test_arange_invalid_inputs()<br ALIGN="LEFT"/>test_arange_like_quantity_subclass()<br ALIGN="LEFT"/>test_arange_pos_dtype()<br ALIGN="LEFT"/>test_arange_unit_from_stop()<br ALIGN="LEFT"/>test_asfarray()<br ALIGN="LEFT"/>test_astype()<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>test_empty_like()<br ALIGN="LEFT"/>test_full_like()<br ALIGN="LEFT"/>test_ones_like()<br ALIGN="LEFT"/>test_zeros_like()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestCopyAndCreation" [color="black", fontcolor="black", label=<{TestCopyAndCreation|<br ALIGN="LEFT"/>|test_asfarray()<br ALIGN="LEFT"/>test_astype()<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_basic.TestCopyReplicate" [color="black", fontcolor="black", label=<{TestCopyReplicate|<br ALIGN="LEFT"/>|test_copy()<br ALIGN="LEFT"/>test_immutable_input()<br ALIGN="LEFT"/>test_replicate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_core.TestCore" [color="black", fontcolor="black", label=<{TestCore|<br ALIGN="LEFT"/>|test_add_del_columns()<br ALIGN="LEFT"/>test_add_del_columns2()<br ALIGN="LEFT"/>test_byteswap()<br ALIGN="LEFT"/>test_combined_verify_options()<br ALIGN="LEFT"/>test_consecutive_writeto()<br ALIGN="LEFT"/>test_errlist_basic()<br ALIGN="LEFT"/>test_exception_on_verification_error()<br ALIGN="LEFT"/>test_extension_name_case_sensitive()<br ALIGN="LEFT"/>test_extname()<br ALIGN="LEFT"/>test_extver_extlevel()<br ALIGN="LEFT"/>test_fits_file_bytes_object()<br ALIGN="LEFT"/>test_fits_file_path_object()<br ALIGN="LEFT"/>test_fits_pathlike_object()<br ALIGN="LEFT"/>test_fix_invalid_keyword_value()<br ALIGN="LEFT"/>test_fix_missing_card_append()<br ALIGN="LEFT"/>test_getext()<br ALIGN="LEFT"/>test_hdu_fromstring()<br ALIGN="LEFT"/>test_ignore_verification_error()<br ALIGN="LEFT"/>test_missing_file()<br ALIGN="LEFT"/>test_naxisj_check()<br ALIGN="LEFT"/>test_nonstandard_hdu()<br ALIGN="LEFT"/>test_set_card_value()<br ALIGN="LEFT"/>test_uint()<br ALIGN="LEFT"/>test_unfixable_missing_card()<br ALIGN="LEFT"/>test_unrecognized_verify_option()<br ALIGN="LEFT"/>test_update_header_card()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_core.TestCosmology" [color="black", fontcolor="black", label=<{TestCosmology|cls<br ALIGN="LEFT"/>cls_kwargs : dict<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>test_is_flat(cosmo_cls, cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_connect.TestCosmologyReadWrite" [color="black", fontcolor="black", label=<{TestCosmologyReadWrite|<br ALIGN="LEFT"/>|cosmo(request)<br ALIGN="LEFT"/>cosmo_cls(cosmo)<br ALIGN="LEFT"/>test_readwrite_reader_class_mismatch(cosmo, tmp_path, format, _, has_deps)<br ALIGN="LEFT"/>test_write_methods_have_explicit_kwarg_overwrite(format, _, has_deps)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_connect.TestCosmologyToFromFormat" [color="black", fontcolor="black", label=<{TestCosmologyToFromFormat|<br ALIGN="LEFT"/>|cosmo(request)<br ALIGN="LEFT"/>cosmo_cls(cosmo)<br ALIGN="LEFT"/>test_fromformat_class_mismatch(cosmo, format_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations" [color="black", fontcolor="black", label=<{TestCustomGeodeticRepresentations|<br ALIGN="LEFT"/>|get_representation(representation)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>test_cartesian_geodetic_roundtrip(geodeticrepresentation)<br ALIGN="LEFT"/>test_default_height_is_zero(representation)<br ALIGN="LEFT"/>test_geocentric_to_geodetic()<br ALIGN="LEFT"/>test_geodetic_bodycentric_equivalence_spherical_bodies()<br ALIGN="LEFT"/>test_geodetic_cartesian_roundtrip(geodeticrepresentation)<br ALIGN="LEFT"/>test_geodetic_subclass_missing_equatorial_radius(baserepresentation)<br ALIGN="LEFT"/>test_geodetic_to_geocentric()<br ALIGN="LEFT"/>test_non_angle_error(representation)<br ALIGN="LEFT"/>test_non_length_error(representation)<br ALIGN="LEFT"/>test_subclass_bad_ellipsoid()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.tests.test_utils.TestCutout2D" [color="black", fontcolor="black", label=<{TestCutout2D|data<br ALIGN="LEFT"/>position<br ALIGN="LEFT"/>sipwcs<br ALIGN="LEFT"/>wcs<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>test_crpix_maps_to_crval()<br ALIGN="LEFT"/>test_cutout()<br ALIGN="LEFT"/>test_cutout_partial_overlap()<br ALIGN="LEFT"/>test_cutout_partial_overlap_fill_value()<br ALIGN="LEFT"/>test_cutout_trim_overlap()<br ALIGN="LEFT"/>test_cutout_with_nddata_as_input()<br ALIGN="LEFT"/>test_naxis_update()<br ALIGN="LEFT"/>test_size_angle()<br ALIGN="LEFT"/>test_size_angle_without_wcs()<br ALIGN="LEFT"/>test_size_length()<br ALIGN="LEFT"/>test_size_pixel()<br ALIGN="LEFT"/>test_size_units()<br ALIGN="LEFT"/>test_skycoord()<br ALIGN="LEFT"/>test_skycoord_partial()<br ALIGN="LEFT"/>test_skycoord_without_wcs()<br ALIGN="LEFT"/>test_to_from_large()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_arithmetic.TestCylindricalDifferential" [color="black", fontcolor="black", label=<{TestCylindricalDifferential|e : dict<br ALIGN="LEFT"/>s<br ALIGN="LEFT"/>sf : dict<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_differential_init_errors()<br ALIGN="LEFT"/>test_name()<br ALIGN="LEFT"/>test_simple_differentials()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_projections.TestCylindricalPerspective" [color="black", fontcolor="black", label=<{TestCylindricalPerspective|azp<br ALIGN="LEFT"/>pv_kw<br ALIGN="LEFT"/>wazp<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_CYP_p2s()<br ALIGN="LEFT"/>test_CYP_s2p()<br ALIGN="LEFT"/>test_validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.TestCylindricalRepresentation" [color="black", fontcolor="black", label=<{TestCylindricalRepresentation|<br ALIGN="LEFT"/>|test_broadcasting()<br ALIGN="LEFT"/>test_broadcasting_mismatch()<br ALIGN="LEFT"/>test_empty_init()<br ALIGN="LEFT"/>test_getitem()<br ALIGN="LEFT"/>test_getitem_scalar()<br ALIGN="LEFT"/>test_init_array()<br ALIGN="LEFT"/>test_init_array_nocopy()<br ALIGN="LEFT"/>test_init_quantity()<br ALIGN="LEFT"/>test_name()<br ALIGN="LEFT"/>test_readonly()<br ALIGN="LEFT"/>test_representation_shortcuts()<br ALIGN="LEFT"/>test_reprobj()<br ALIGN="LEFT"/>test_to_physicsspherical_at_the_origin()<br ALIGN="LEFT"/>test_to_physicsspherical_small_theta()<br ALIGN="LEFT"/>test_transform()<br ALIGN="LEFT"/>unit_mismatch()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_operations.TestDStack" [color="black", fontcolor="black", label=<{TestDStack|t1<br ALIGN="LEFT"/>t2<br ALIGN="LEFT"/>t3<br ALIGN="LEFT"/>t4<br ALIGN="LEFT"/>t5<br ALIGN="LEFT"/>t6<br ALIGN="LEFT"/>|compare_dstack(tables, out)<br ALIGN="LEFT"/>test_dstack_basic_inner(operation_table_type)<br ALIGN="LEFT"/>test_dstack_basic_outer(operation_table_type)<br ALIGN="LEFT"/>test_dstack_different_length_table(operation_table_type)<br ALIGN="LEFT"/>test_dstack_multi_dimension_column(operation_table_type)<br ALIGN="LEFT"/>test_dstack_representation()<br ALIGN="LEFT"/>test_dstack_single_table()<br ALIGN="LEFT"/>test_dstack_skycoord()<br ALIGN="LEFT"/>test_dstack_structured_column()<br ALIGN="LEFT"/>test_dstack_table_column(operation_table_type)<br ALIGN="LEFT"/>test_validate_join_type()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.mixins.tests.test_dask.TestDaskHandler" [color="black", fontcolor="black", label=<{TestDaskHandler|t<br ALIGN="LEFT"/>|setup_method(method)<br ALIGN="LEFT"/>test_add_row()<br ALIGN="LEFT"/>test_get_column()<br ALIGN="LEFT"/>test_info_preserved()<br ALIGN="LEFT"/>test_pformat()<br ALIGN="LEFT"/>test_slicing_column_range()<br ALIGN="LEFT"/>test_slicing_row_range()<br ALIGN="LEFT"/>test_slicing_row_single()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitting_parallel.TestDaskInput" [color="black", fontcolor="black", label=<{TestDaskInput|base_data<br ALIGN="LEFT"/>fitter<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|setup_method(method)<br ALIGN="LEFT"/>test_data(preserve_native_chunks)<br ALIGN="LEFT"/>test_data_and_weights(preserve_native_chunks)<br ALIGN="LEFT"/>test_preserve_native_chunks_invalid_data_chunks()<br ALIGN="LEFT"/>test_preserve_native_chunks_invalid_input_data_type()<br ALIGN="LEFT"/>test_preserve_native_chunks_invalid_input_weights_type()<br ALIGN="LEFT"/>test_preserve_native_chunks_invalid_weight_chunks()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestDatetimeFunctions" [color="black", fontcolor="black", label=<{TestDatetimeFunctions|<br ALIGN="LEFT"/>|test_busday_count()<br ALIGN="LEFT"/>test_busday_offset()<br ALIGN="LEFT"/>test_datetime_as_string()<br ALIGN="LEFT"/>test_is_busday()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestDatetimeFunctions" [color="black", fontcolor="black", label=<{TestDatetimeFunctions|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_datetime_as_string()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_physical.TestDefPhysType" [color="black", fontcolor="black", label=<{TestDefPhysType|strange_unit<br ALIGN="LEFT"/>weird_unit<br ALIGN="LEFT"/>|teardown_method()<br ALIGN="LEFT"/>test_attempt_to_define_unknown_physical_type()<br ALIGN="LEFT"/>test_expanding_names_for_physical_type()<br ALIGN="LEFT"/>test_multiple_same_physical_type_names()<br ALIGN="LEFT"/>test_redundant_physical_type()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.iers.tests.test_leap_second.TestDefaultAutoOpen" [color="black", fontcolor="black", label=<{TestDefaultAutoOpen|good_enough<br ALIGN="LEFT"/>|remove_auto_open_files()<br ALIGN="LEFT"/>setup_method()<br ALIGN="LEFT"/>teardown_method()<br ALIGN="LEFT"/>test_auto_open_urls_always_good_enough()<br ALIGN="LEFT"/>test_builtin_found()<br ALIGN="LEFT"/>test_builtin_not_expired()<br ALIGN="LEFT"/>test_erfa_found()<br ALIGN="LEFT"/>test_fake_expired_file(tmp_path)<br ALIGN="LEFT"/>test_fake_future_file(tmp_path)<br ALIGN="LEFT"/>test_system_file_used_if_not_expired(tmp_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.TestDefaultRegistry" [color="black", fontcolor="black", label=<{TestDefaultRegistry|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_quantity_interaction.TestDeltaAttributes" [color="black", fontcolor="black", label=<{TestDeltaAttributes|<br ALIGN="LEFT"/>|test_delta_tdb_tt()<br ALIGN="LEFT"/>test_delta_ut1_utc()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_utils.TestDeprecatedKeywords" [color="black", fontcolor="black", label=<{TestDeprecatedKeywords|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_no_warn(n_deprecated_keywords)<br ALIGN="LEFT"/>test_type_safety()<br ALIGN="LEFT"/>test_warn(n_deprecated_keywords, args, kwargs, match)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitting_parallel.TestDiagnostics" [color="black", fontcolor="black", label=<{TestDiagnostics|data<br ALIGN="LEFT"/>data_original<br ALIGN="LEFT"/>fitter<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|setup_method(method)<br ALIGN="LEFT"/>test_all(tmp_path)<br ALIGN="LEFT"/>test_all_world_wcs(tmp_path)<br ALIGN="LEFT"/>test_callable(tmp_path)<br ALIGN="LEFT"/>test_error(tmp_path)<br ALIGN="LEFT"/>test_invalid()<br ALIGN="LEFT"/>test_missing_path()<br ALIGN="LEFT"/>test_warnings(tmp_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_diff.TestDiff" [color="black", fontcolor="black", label=<{TestDiff|<br ALIGN="LEFT"/>|test_asymmetric_duplicate_keywords()<br ALIGN="LEFT"/>test_common_keywords()<br ALIGN="LEFT"/>test_diff_empty_tables()<br ALIGN="LEFT"/>test_diff_nans()<br ALIGN="LEFT"/>test_different_dimensions()<br ALIGN="LEFT"/>test_different_keyword_comments()<br ALIGN="LEFT"/>test_different_keyword_count()<br ALIGN="LEFT"/>test_different_keyword_values()<br ALIGN="LEFT"/>test_different_keyword_values_with_duplicate()<br ALIGN="LEFT"/>test_different_keywords()<br ALIGN="LEFT"/>test_different_pixels()<br ALIGN="LEFT"/>test_different_table_data()<br ALIGN="LEFT"/>test_different_table_field_counts()<br ALIGN="LEFT"/>test_different_table_field_names()<br ALIGN="LEFT"/>test_different_table_rows()<br ALIGN="LEFT"/>test_file_output_from_path_string()<br ALIGN="LEFT"/>test_file_output_overwrite_safety()<br ALIGN="LEFT"/>test_file_output_overwrite_success()<br ALIGN="LEFT"/>test_floating_point_atol()<br ALIGN="LEFT"/>test_floating_point_rtol()<br ALIGN="LEFT"/>test_hierarch_keywords_different()<br ALIGN="LEFT"/>test_hierarch_keywords_identical()<br ALIGN="LEFT"/>test_identical_comp_image_hdus()<br ALIGN="LEFT"/>test_identical_files_basic()<br ALIGN="LEFT"/>test_identical_headers()<br ALIGN="LEFT"/>test_identical_tables()<br ALIGN="LEFT"/>test_identical_within_absolute_tolerance()<br ALIGN="LEFT"/>test_identical_within_relative_tolerance()<br ALIGN="LEFT"/>test_identical_within_rtol_and_atol()<br ALIGN="LEFT"/>test_ignore_blank_cards(differ)<br ALIGN="LEFT"/>test_ignore_blanks()<br ALIGN="LEFT"/>test_ignore_hdus()<br ALIGN="LEFT"/>test_ignore_keyword_comments()<br ALIGN="LEFT"/>test_ignore_keyword_values()<br ALIGN="LEFT"/>test_ignore_table_fields()<br ALIGN="LEFT"/>test_not_identical_within_rtol_and_atol()<br ALIGN="LEFT"/>test_partially_identical_files1()<br ALIGN="LEFT"/>test_partially_identical_files2()<br ALIGN="LEFT"/>test_partially_identical_files3()<br ALIGN="LEFT"/>test_rawdatadiff_bytesdiff()<br ALIGN="LEFT"/>test_rawdatadiff_dimsdiff()<br ALIGN="LEFT"/>test_rawdatadiff_nodiff()<br ALIGN="LEFT"/>test_slightly_different_headers()<br ALIGN="LEFT"/>test_trivial_identical_images()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_sky_coord_velocities.TestDifferentialClassPropagation" [color="black", fontcolor="black", label=<{TestDifferentialClassPropagation|<br ALIGN="LEFT"/>|test_sc_spherical_with_pm_or_rv_only(diff_info, diff_cls)<br ALIGN="LEFT"/>test_sc_unit_spherical_with_pm_or_rv_only(diff_info, diff_cls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_arithmetic.TestDifferentialConversion" [color="black", fontcolor="black", label=<{TestDifferentialConversion|s<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_combinations(sd_cls)<br ALIGN="LEFT"/>test_convert_cylindrial(sd_cls)<br ALIGN="LEFT"/>test_convert_physics(sd_cls)<br ALIGN="LEFT"/>test_convert_unit_spherical_radial(sd_cls, usd_cls)<br ALIGN="LEFT"/>test_represent_as_own_class(sd_cls)<br ALIGN="LEFT"/>test_represent_other_coslat()<br ALIGN="LEFT"/>test_represent_regular_class(sd_cls, r_cls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_display_world_coordinates.TestDisplayWorldCoordinate" [color="black", fontcolor="black", label=<{TestDisplayWorldCoordinate|<br ALIGN="LEFT"/>|test_cube_coords(ignore_matplotlibrc, tmp_path)<br ALIGN="LEFT"/>test_cube_coords_uncorr_slicing(ignore_matplotlibrc, tmp_path)<br ALIGN="LEFT"/>test_overlay_coords(ignore_matplotlibrc, tmp_path)<br ALIGN="LEFT"/>test_plot_coord_3d_transform()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_distribution.TestDistributionStatistics" [color="black", fontcolor="black", label=<{TestDistributionStatistics|data<br ALIGN="LEFT"/>distr<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_add_distribution()<br ALIGN="LEFT"/>test_add_quantity()<br ALIGN="LEFT"/>test_n_distr()<br ALIGN="LEFT"/>test_n_samples()<br ALIGN="LEFT"/>test_pdf_mad_smad()<br ALIGN="LEFT"/>test_pdf_mean()<br ALIGN="LEFT"/>test_pdf_median()<br ALIGN="LEFT"/>test_pdf_std()<br ALIGN="LEFT"/>test_pdf_var()<br ALIGN="LEFT"/>test_percentile()<br ALIGN="LEFT"/>test_shape()<br ALIGN="LEFT"/>test_size()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_division.TestDivisionFunctions" [color="black", fontcolor="black", label=<{TestDivisionFunctions|<br ALIGN="LEFT"/>|test_card_with_continue()<br ALIGN="LEFT"/>test_hdu_get_size()<br ALIGN="LEFT"/>test_rec_from_string()<br ALIGN="LEFT"/>test_section(capsys)<br ALIGN="LEFT"/>test_valid_hdu_size()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.tests.test_types.test_col_dtype_in_custom_class.TestDtype" [color="black", fontcolor="black", label=<{TestDtype|header_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestDtypeFunctions" [color="black", fontcolor="black", label=<{TestDtypeFunctions|<br ALIGN="LEFT"/>|test_can_cast()<br ALIGN="LEFT"/>test_common_type()<br ALIGN="LEFT"/>test_iscomplexobj()<br ALIGN="LEFT"/>test_isrealobj()<br ALIGN="LEFT"/>test_min_scalar_type()<br ALIGN="LEFT"/>test_result_type()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestDtypeFunctions" [color="black", fontcolor="black", label=<{TestDtypeFunctions|<br ALIGN="LEFT"/>|check(function)<br ALIGN="LEFT"/>test_can_cast()<br ALIGN="LEFT"/>test_common_type()<br ALIGN="LEFT"/>test_iscomplexobj()<br ALIGN="LEFT"/>test_isrealobj()<br ALIGN="LEFT"/>test_min_scalar_type()<br ALIGN="LEFT"/>test_result_type()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.tests.test_types.test_col_dtype_in_custom_class.TestDtypeHeader" [color="black", fontcolor="black", label=<{TestDtypeHeader|<br ALIGN="LEFT"/>|get_cols(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_sidereal.TestERFATestCases" [color="black", fontcolor="black", label=<{TestERFATestCases|time_tt<br ALIGN="LEFT"/>time_ut1<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_era()<br ALIGN="LEFT"/>test_iau_models(erfa_test_input)<br ALIGN="LEFT"/>test_setup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestEmptyData" [color="black", fontcolor="black", label=<{TestEmptyData|<br ALIGN="LEFT"/>|test_1(table_types)<br ALIGN="LEFT"/>test_2(table_types)<br ALIGN="LEFT"/>test_3(table_types)<br ALIGN="LEFT"/>test_4(table_types)<br ALIGN="LEFT"/>test_5(table_types)<br ALIGN="LEFT"/>test_add_via_setitem_and_slice(table_types)<br ALIGN="LEFT"/>test_scalar(table_types)<br ALIGN="LEFT"/>test_scalar_double_assignment(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitters.TestEntryPoint" [color="black", fontcolor="black", label=<{TestEntryPoint|<br ALIGN="LEFT"/>|raiseimporterror()<br ALIGN="LEFT"/>returnbadclass()<br ALIGN="LEFT"/>returnbadfunc()<br ALIGN="LEFT"/>successfulimport()<br ALIGN="LEFT"/>test_bad_class()<br ALIGN="LEFT"/>test_bad_func()<br ALIGN="LEFT"/>test_import_error()<br ALIGN="LEFT"/>test_working()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_erfa_ufuncs.TestEraStructUfuncs" [color="black", fontcolor="black", label=<{TestEraStructUfuncs|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_aper()<br ALIGN="LEFT"/>test_atciq_basic()<br ALIGN="LEFT"/>test_atciq_in_other_unit()<br ALIGN="LEFT"/>test_atciqn()<br ALIGN="LEFT"/>test_atciqz()<br ALIGN="LEFT"/>test_aticq()<br ALIGN="LEFT"/>test_aticqn()<br ALIGN="LEFT"/>test_atioq_atoiq()<br ALIGN="LEFT"/>test_ldn_basic()<br ALIGN="LEFT"/>test_ldn_in_SI()<br ALIGN="LEFT"/>test_ldn_in_other_unit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_input.TestEvaluation" [color="black", fontcolor="black", label=<{TestEvaluation|x<br ALIGN="LEFT"/>x1<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_evaluate_gauss2d()<br ALIGN="LEFT"/>test_non_linear_NXYset()<br ALIGN="LEFT"/>test_non_linear_NYset()<br ALIGN="LEFT"/>test_nset_domain()<br ALIGN="LEFT"/>test_p1_1set_1pset()<br ALIGN="LEFT"/>test_p1_nset_npset()<br ALIGN="LEFT"/>test_p2_1set_1pset()<br ALIGN="LEFT"/>test_p2_nset_npset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestFFT" [color="black", fontcolor="black", label=<{TestFFT|q<br ALIGN="LEFT"/>tested_module<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_fft()<br ALIGN="LEFT"/>test_fft2()<br ALIGN="LEFT"/>test_fftn()<br ALIGN="LEFT"/>test_fftshift()<br ALIGN="LEFT"/>test_hfft()<br ALIGN="LEFT"/>test_ifft()<br ALIGN="LEFT"/>test_ifft2()<br ALIGN="LEFT"/>test_ifftn()<br ALIGN="LEFT"/>test_ifftshift()<br ALIGN="LEFT"/>test_ihfft()<br ALIGN="LEFT"/>test_irfft()<br ALIGN="LEFT"/>test_irfft2()<br ALIGN="LEFT"/>test_irfftn()<br ALIGN="LEFT"/>test_rfft()<br ALIGN="LEFT"/>test_rfft2()<br ALIGN="LEFT"/>test_rfftn()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_fitsdiff.TestFITSDiff_script" [color="black", fontcolor="black", label=<{TestFITSDiff_script|<br ALIGN="LEFT"/>|test_atol()<br ALIGN="LEFT"/>test_help()<br ALIGN="LEFT"/>test_ignore_hdus()<br ALIGN="LEFT"/>test_ignore_hdus_report(capsys)<br ALIGN="LEFT"/>test_manydiff(capsys)<br ALIGN="LEFT"/>test_noargs()<br ALIGN="LEFT"/>test_nodiff()<br ALIGN="LEFT"/>test_not_quiet(capsys)<br ALIGN="LEFT"/>test_oneargargs()<br ALIGN="LEFT"/>test_onediff()<br ALIGN="LEFT"/>test_outputfile()<br ALIGN="LEFT"/>test_path(capsys)<br ALIGN="LEFT"/>test_quiet(capsys)<br ALIGN="LEFT"/>test_rtol()<br ALIGN="LEFT"/>test_rtol_diff(capsys)<br ALIGN="LEFT"/>test_version(capsys)<br ALIGN="LEFT"/>test_wildcard()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_fitsheader.TestFITSheader_script" [color="black", fontcolor="black", label=<{TestFITSheader_script|<br ALIGN="LEFT"/>|test_by_extension(capsys)<br ALIGN="LEFT"/>test_by_keyword(capsys)<br ALIGN="LEFT"/>test_dotkeyword(capsys)<br ALIGN="LEFT"/>test_file_exists(capsys)<br ALIGN="LEFT"/>test_fitsort(capsys)<br ALIGN="LEFT"/>test_fitsort_sorting_keyword_complains(capsys)<br ALIGN="LEFT"/>test_fitsort_sorting_keyword_fitsort(capsys)<br ALIGN="LEFT"/>test_help()<br ALIGN="LEFT"/>test_table(capsys)<br ALIGN="LEFT"/>test_version(capsys)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_flrw.TestFLRW" [color="black", fontcolor="black", label=<{TestFLRW|abstract_w : bool<br ALIGN="LEFT"/>cls<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>test_Otot(cosmo)<br ALIGN="LEFT"/>test_comoving_distance_example(cosmo_cls, args, kwargs, expected)<br ALIGN="LEFT"/>test_distance_broadcast(cosmo, method)<br ALIGN="LEFT"/>test_efunc_vs_invefunc(cosmo)<br ALIGN="LEFT"/><I>test_luminosity_distance_pandas</I>(cosmo)<br ALIGN="LEFT"/>test_redshift_method_bad_input(cosmo, method, z, exc)<br ALIGN="LEFT"/>test_w(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_core.TestFileFunctions" [color="black", fontcolor="black", label=<{TestFileFunctions|<br ALIGN="LEFT"/>|test_HDUList_writeto_stdout()<br ALIGN="LEFT"/>test_bintablehdu_zero_bytes()<br ALIGN="LEFT"/>test_compressed_ext_but_not_compressed(ext)<br ALIGN="LEFT"/>test_detect_bzipped()<br ALIGN="LEFT"/>test_detect_gzipped()<br ALIGN="LEFT"/>test_detect_zipped()<br ALIGN="LEFT"/>test_filename_with_colon()<br ALIGN="LEFT"/>test_fileobj_mode_guessing()<br ALIGN="LEFT"/>test_fits_append_mode_gzip()<br ALIGN="LEFT"/>test_fits_file_handle_mode_combo()<br ALIGN="LEFT"/>test_fits_update_mode_gzip()<br ALIGN="LEFT"/>test_flush_full_disk(monkeypatch)<br ALIGN="LEFT"/>test_mmap_allocate_error()<br ALIGN="LEFT"/>test_mmap_closing()<br ALIGN="LEFT"/>test_mmap_unwriteable()<br ALIGN="LEFT"/>test_open_bzipped()<br ALIGN="LEFT"/>test_open_bzipped_from_handle()<br ALIGN="LEFT"/>test_open_file_handle()<br ALIGN="LEFT"/>test_open_from_remote_url()<br ALIGN="LEFT"/>test_open_from_url()<br ALIGN="LEFT"/>test_open_gzip_file_for_writing()<br ALIGN="LEFT"/>test_open_gzipped()<br ALIGN="LEFT"/>test_open_gzipped_from_handle()<br ALIGN="LEFT"/>test_open_multiple_member_zipfile()<br ALIGN="LEFT"/>test_open_nonexistent()<br ALIGN="LEFT"/>test_open_zipped()<br ALIGN="LEFT"/>test_open_zipped_from_handle()<br ALIGN="LEFT"/>test_open_zipped_writeable()<br ALIGN="LEFT"/>test_primaryhdu_zero_bytes()<br ALIGN="LEFT"/>test_read_closed_file()<br ALIGN="LEFT"/>test_read_file_like_object()<br ALIGN="LEFT"/>test_read_open_astropy_gzip_file()<br ALIGN="LEFT"/>test_read_open_file()<br ALIGN="LEFT"/>test_read_open_gzip_file()<br ALIGN="LEFT"/>test_simulateonly()<br ALIGN="LEFT"/>test_uncloseable_file()<br ALIGN="LEFT"/>test_updated_file_permissions()<br ALIGN="LEFT"/>test_write_bytesio()<br ALIGN="LEFT"/>test_write_bytesio_discontiguous()<br ALIGN="LEFT"/>test_write_overwrite(home_is_temp)<br ALIGN="LEFT"/>test_write_read_gzip_file(home_is_temp)<br ALIGN="LEFT"/>test_writeto_append_mode_gzip()<br ALIGN="LEFT"/>test_writeto_bzip2_filename()<br ALIGN="LEFT"/>test_writeto_bzip2_fileobj()<br ALIGN="LEFT"/>test_writeto_full_disk(monkeypatch)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_masked.TestFillValue" [color="black", fontcolor="black", label=<{TestFillValue|<br ALIGN="LEFT"/>|test_data_attribute_fill_and_mask()<br ALIGN="LEFT"/>test_init_set_fill_value()<br ALIGN="LEFT"/>test_set_get_fill_value_for_bare_column()<br ALIGN="LEFT"/>test_set_get_fill_value_for_str_column()<br ALIGN="LEFT"/>test_set_get_fill_value_for_structured_column()<br ALIGN="LEFT"/>test_set_get_fill_value_for_table_column()<br ALIGN="LEFT"/>test_table_column_mask_not_ref()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_masked.TestFilled" [color="black", fontcolor="black", label=<{TestFilled|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>c<br ALIGN="LEFT"/>meta : dict<br ALIGN="LEFT"/>|setup_method(method)<br ALIGN="LEFT"/>test_filled_column()<br ALIGN="LEFT"/>test_filled_masked_table(tableclass)<br ALIGN="LEFT"/>test_filled_unmasked_table(tableclass)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.scripts.tests.test_fits2bitmap.TestFits2Bitmap" [color="black", fontcolor="black", label=<{TestFits2Bitmap|array<br ALIGN="LEFT"/>filename : str<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_compressed_fits(tmp_path, file_exten)<br ALIGN="LEFT"/>test_exten_name(tmp_path)<br ALIGN="LEFT"/>test_exten_num(tmp_path)<br ALIGN="LEFT"/>test_function(tmp_path)<br ALIGN="LEFT"/>test_min_max_cut_deprecations(tmp_path)<br ALIGN="LEFT"/>test_orientation(tmp_path)<br ALIGN="LEFT"/>test_script(tmp_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_fitstime.TestFitsTime" [color="black", fontcolor="black", label=<{TestFitsTime|time : ndarray<br ALIGN="LEFT"/>time_3d : ndarray<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_fits_to_time_index(table_types)<br ALIGN="LEFT"/>test_fits_to_time_meta(table_types)<br ALIGN="LEFT"/>test_io_time_read_fits(table_types)<br ALIGN="LEFT"/>test_io_time_read_fits_datetime(table_types)<br ALIGN="LEFT"/>test_io_time_read_fits_location(table_types)<br ALIGN="LEFT"/>test_io_time_read_fits_location_warnings(table_types)<br ALIGN="LEFT"/>test_io_time_read_fits_scale(table_types)<br ALIGN="LEFT"/>test_is_time_column_keyword()<br ALIGN="LEFT"/>test_time_loc_unit(table_types)<br ALIGN="LEFT"/>test_time_to_fits_header(table_types)<br ALIGN="LEFT"/>test_time_to_fits_loc(table_types)<br ALIGN="LEFT"/>test_time_to_fits_serialize_method(serialize_method, mask, masked_cls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_fitscheck.TestFitscheck" [color="black", fontcolor="black", label=<{TestFitscheck|<br ALIGN="LEFT"/>|test_help()<br ALIGN="LEFT"/>test_missing_file(capsys)<br ALIGN="LEFT"/>test_no_checksums(capsys)<br ALIGN="LEFT"/>test_overwrite_invalid(caplog)<br ALIGN="LEFT"/>test_remove_checksums(capsys)<br ALIGN="LEFT"/>test_valid_file(capsys)<br ALIGN="LEFT"/>test_version(capsys)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_fitsinfo.TestFitsinfo" [color="black", fontcolor="black", label=<{TestFitsinfo|<br ALIGN="LEFT"/>|test_help()<br ALIGN="LEFT"/>test_multiplefiles(capsys)<br ALIGN="LEFT"/>test_onefile(capsys)<br ALIGN="LEFT"/>test_version(capsys)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_models.TestFittable1DModels" [color="black", fontcolor="black", label=<{TestFittable1DModels|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_models.TestFittable2DModels" [color="black", fontcolor="black", label=<{TestFittable2DModels|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_polynomial.TestFitting" [color="black", fontcolor="black", label=<{TestFitting|M : int<br ALIGN="LEFT"/>N : int<br ALIGN="LEFT"/>linear_fitter<br ALIGN="LEFT"/>n1<br ALIGN="LEFT"/>n2<br ALIGN="LEFT"/>x1 : ndarray<br ALIGN="LEFT"/>x2<br ALIGN="LEFT"/>y2<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_linear_fitter_1D(model_class, constraints)<br ALIGN="LEFT"/>test_linear_fitter_2D(model_class, constraints)<br ALIGN="LEFT"/>test_non_linear_fitter_1D(model_class, constraints, fitter)<br ALIGN="LEFT"/>test_non_linear_fitter_2D(model_class, constraints, fitter)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_input.TestFitting" [color="black", fontcolor="black", label=<{TestFitting|x<br ALIGN="LEFT"/>x1<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_linear_fitter_1dcheb()<br ALIGN="LEFT"/>test_linear_fitter_1dlegend()<br ALIGN="LEFT"/>test_linear_fitter_1set()<br ALIGN="LEFT"/>test_linear_fitter_1set2d()<br ALIGN="LEFT"/>test_linear_fitter_Nset()<br ALIGN="LEFT"/>test_nonlinear_lsqt_1set_1d(fitter)<br ALIGN="LEFT"/>test_nonlinear_lsqt_1set_2d(fitter)<br ALIGN="LEFT"/>test_nonlinear_lsqt_Nset_1d(fitter)<br ALIGN="LEFT"/>test_nonlinear_lsqt_Nset_2d(fitter)<br ALIGN="LEFT"/>test_wrong_numpset()<br ALIGN="LEFT"/>test_wrong_pset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitters.TestFittingUncertanties" [color="black", fontcolor="black", label=<{TestFittingUncertanties|example_1D_models : list<br ALIGN="LEFT"/>example_1D_sets : list<br ALIGN="LEFT"/>rand<br ALIGN="LEFT"/>rand_grid<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>x_grid<br ALIGN="LEFT"/>y_grid<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_1d_models(single_model, model_set, fitter)<br ALIGN="LEFT"/>test_2d_models(fitter)<br ALIGN="LEFT"/>test_covariance_std_printing_indexing(capsys)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tests.test_vo.TestFixups" [color="black", fontcolor="black", label=<{TestFixups|array<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_implicit_id()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_lambdacdm.TestFlatLambdaCDM" [color="black", fontcolor="black", label=<{TestFlatLambdaCDM|cls<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_comoving_distance_example(cosmo_cls, args, kwargs, expected)<br ALIGN="LEFT"/>test_redshift_method_bad_input(cosmo, method, z, exc)<br ALIGN="LEFT"/>test_repr(cosmo)<br ALIGN="LEFT"/>test_str(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_w0wacdm.TestFlatw0waCDM" [color="black", fontcolor="black", label=<{TestFlatw0waCDM|cls<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_comoving_distance_example(cosmo_cls, args, kwargs, expected)<br ALIGN="LEFT"/>test_repr(cosmo_cls, cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_w0wzcdm.TestFlatw0wzCDM" [color="black", fontcolor="black", label=<{TestFlatw0wzCDM|cls<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_Otot(cosmo, z)<br ALIGN="LEFT"/>test_Otot_overflow(cosmo)<br ALIGN="LEFT"/>test_comoving_distance_example(cosmo_cls, args, kwargs, expected)<br ALIGN="LEFT"/>test_comoving_distance_mathematica(cosmo_cls)<br ALIGN="LEFT"/>test_repr(cosmo_cls, cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_w0cdm.TestFlatwCDM" [color="black", fontcolor="black", label=<{TestFlatwCDM|cls<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_comoving_distance_example(cosmo_cls, args, kwargs, expected)<br ALIGN="LEFT"/>test_repr(cosmo_cls, cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_wpwazpcdm.TestFlatwpwaCDM" [color="black", fontcolor="black", label=<{TestFlatwpwaCDM|cls<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_comoving_distance_example(cosmo_cls, args, kwargs, expected)<br ALIGN="LEFT"/>test_repr(cosmo_cls, cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_pprint.TestFormat" [color="black", fontcolor="black", label=<{TestFormat|<br ALIGN="LEFT"/>|test_column_alignment(table_type)<br ALIGN="LEFT"/>test_column_format(table_type)<br ALIGN="LEFT"/>test_column_format_callable(table_type)<br ALIGN="LEFT"/>test_column_format_func(table_type)<br ALIGN="LEFT"/>test_column_format_func_multiD(table_type)<br ALIGN="LEFT"/>test_column_format_func_not_str(table_type)<br ALIGN="LEFT"/>test_column_format_func_wrong_number_args(table_type)<br ALIGN="LEFT"/>test_column_format_with_threshold(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_pprint.TestFormatWithMaskedElements" [color="black", fontcolor="black", label=<{TestFormatWithMaskedElements|<br ALIGN="LEFT"/>|test_column_format()<br ALIGN="LEFT"/>test_column_format_callable()<br ALIGN="LEFT"/>test_column_format_func()<br ALIGN="LEFT"/>test_column_format_func_multiD()<br ALIGN="LEFT"/>test_column_format_func_with_special_masked()<br ALIGN="LEFT"/>test_column_format_func_wrong_number_args()<br ALIGN="LEFT"/>test_column_format_with_threshold_masked_table()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_frame.TestFrame" [color="black", fontcolor="black", label=<{TestFrame|<br ALIGN="LEFT"/>|test_copy_frame_properties_change_wcs()<br ALIGN="LEFT"/>test_custom_frame()<br ALIGN="LEFT"/>test_update_clip_path_change_wcs(tmp_path)<br ALIGN="LEFT"/>test_update_clip_path_nonrectangular(tmp_path)<br ALIGN="LEFT"/>test_update_clip_path_rectangular(tmp_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_differentialattribute.TestFrame" [color="black", fontcolor="black", label=<{TestFrame|attrtest<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_attribute_repr.TestFrame" [color="black", fontcolor="black", label=<{TestFrame|attrtest<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_masked.TestFrame" [color="black", fontcolor="black", label=<{TestFrame|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_cache_clearing()<br ALIGN="LEFT"/>test_cartesian()<br ALIGN="LEFT"/>test_class_initialization()<br ALIGN="LEFT"/>test_get_mask()<br ALIGN="LEFT"/>test_initialization_directly()<br ALIGN="LEFT"/>test_physics_spherical()<br ALIGN="LEFT"/>test_unit_spherical()<br ALIGN="LEFT"/>test_unmasked_frame()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_frames.test_differentialattribute.TestFrame2" [color="black", fontcolor="black", label=<{TestFrame2|attrtest<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.iers.tests.test_leap_second.TestFromERFA" [color="black", fontcolor="black", label=<{TestFromERFA|<br ALIGN="LEFT"/>|test_get_built_in_erfa_ls()<br ALIGN="LEFT"/>test_get_erfa_ls()<br ALIGN="LEFT"/>test_get_modified_erfa_ls()<br ALIGN="LEFT"/>test_open()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_fsspec.TestFsspecRemote" [color="black", fontcolor="black", label=<{TestFsspecRemote|expected_cutout : ndarray<br ALIGN="LEFT"/>http_url : str<br ALIGN="LEFT"/>s3_uri : str<br ALIGN="LEFT"/>slice : tuple<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_fsspec_http()<br ALIGN="LEFT"/>test_fsspec_s3()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestFunctionHelpersCompleteness" [color="black", fontcolor="black", label=<{TestFunctionHelpersCompleteness|<br ALIGN="LEFT"/>|test_all_included()<br ALIGN="LEFT"/>test_ignored_are_untested()<br ALIGN="LEFT"/>test_no_duplicates(one, two)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestFunctionHelpersCompleteness" [color="black", fontcolor="black", label=<{TestFunctionHelpersCompleteness|<br ALIGN="LEFT"/>|test_all_included()<br ALIGN="LEFT"/>test_ignored_are_untested()<br ALIGN="LEFT"/>test_no_duplicates(one, two)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestFunctionHelpersSignatureCompatibility" [color="black", fontcolor="black", label=<{TestFunctionHelpersSignatureCompatibility|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestFunctionHelpersSignatureCompatibility" [color="black", fontcolor="black", label=<{TestFunctionHelpersSignatureCompatibility|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.tests.test_functions.TestFunctionsTime" [color="black", fontcolor="black", label=<{TestFunctionsTime|t<br ALIGN="LEFT"/>|check(func, cls, scale, format)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test_diff(axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_functions.TestFunctionsTimeDelta" [color="black", fontcolor="black", label=<{TestFunctionsTimeDelta|t<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_sum_like(func, axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_erfa_ufuncs.TestGeodetic" [color="black", fontcolor="black", label=<{TestGeodetic|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_gc2gde()<br ALIGN="LEFT"/>test_gd2gce()<br ALIGN="LEFT"/>test_unit_errors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_intermediate_transformations.TestGetLocationGCRS" [color="black", fontcolor="black", label=<{TestGetLocationGCRS|loc<br ALIGN="LEFT"/>obsgeoloc<br ALIGN="LEFT"/>obsgeovel<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>|check_obsgeo(obsgeoloc, obsgeovel)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test_cirs_quick()<br ALIGN="LEFT"/>test_get_gcrs_posvel()<br ALIGN="LEFT"/>test_tete_quick()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_distribution.TestGetSetItemAdvancedIndex" [color="black", fontcolor="black", label=<{TestGetSetItemAdvancedIndex|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_getitem(item)<br ALIGN="LEFT"/>test_getitem_bad(item)<br ALIGN="LEFT"/>test_setitem(item)<br ALIGN="LEFT"/>test_setup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_groups.TestGroupsFunctions" [color="black", fontcolor="black", label=<{TestGroupsFunctions|<br ALIGN="LEFT"/>|test_create_groupdata(home_is_temp)<br ALIGN="LEFT"/>test_duplicate_parameter()<br ALIGN="LEFT"/>test_group_bad_naxis()<br ALIGN="LEFT"/>test_group_slice()<br ALIGN="LEFT"/>test_groupdata_slice()<br ALIGN="LEFT"/>test_not_groups_file()<br ALIGN="LEFT"/>test_open()<br ALIGN="LEFT"/>test_open_groups_in_update_mode()<br ALIGN="LEFT"/>test_parnames_round_trip()<br ALIGN="LEFT"/>test_random_groups_data_update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_guess.TestGuess" [color="black", fontcolor="black", label=<{TestGuess|<br ALIGN="LEFT"/>|test_guess1()<br ALIGN="LEFT"/>test_guess2()<br ALIGN="LEFT"/>test_guess3()<br ALIGN="LEFT"/>test_guess4()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_celestial_transformations.TestHCRS" [color="black", fontcolor="black", label=<{TestHCRS|sun_hcrs_t1<br ALIGN="LEFT"/>sun_hcrs_tarr<br ALIGN="LEFT"/>sun_icrs_arr<br ALIGN="LEFT"/>sun_icrs_scalar<br ALIGN="LEFT"/>t1<br ALIGN="LEFT"/>t2<br ALIGN="LEFT"/>tarr<br ALIGN="LEFT"/>tolerance<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_from_hcrs()<br ALIGN="LEFT"/>test_from_icrs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_core.TestCore.test_unfixable_missing_card.TestHDU" [color="black", fontcolor="black", label=<{TestHDU|<br ALIGN="LEFT"/>|match_header(header)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_hdulist.TestHDUListFunctions" [color="black", fontcolor="black", label=<{TestHDUListFunctions|<br ALIGN="LEFT"/>|test_append_extension_to_empty_list()<br ALIGN="LEFT"/>test_append_extension_to_non_empty_list()<br ALIGN="LEFT"/>test_append_groupshdu_to_empty_list()<br ALIGN="LEFT"/>test_append_groupshdu_to_non_empty_list()<br ALIGN="LEFT"/>test_append_primary_to_empty_list()<br ALIGN="LEFT"/>test_append_primary_to_non_empty_list()<br ALIGN="LEFT"/>test_append_table_extension_to_empty_list()<br ALIGN="LEFT"/>test_create_from_multiple_primary()<br ALIGN="LEFT"/>test_deep_copy()<br ALIGN="LEFT"/>test_extname_in_hdulist()<br ALIGN="LEFT"/>test_file_like()<br ALIGN="LEFT"/>test_file_like_2()<br ALIGN="LEFT"/>test_file_like_3()<br ALIGN="LEFT"/>test_filename(home_is_data)<br ALIGN="LEFT"/>test_fix_extend_keyword()<br ALIGN="LEFT"/>test_fix_malformed_naxisj()<br ALIGN="LEFT"/>test_fix_wellformed_naxisj()<br ALIGN="LEFT"/>test_flush_readonly()<br ALIGN="LEFT"/>test_hdu_file_bytes()<br ALIGN="LEFT"/>test_hdul_fromstring()<br ALIGN="LEFT"/>test_hdulist_file_info()<br ALIGN="LEFT"/>test_insert_extension_to_empty_list()<br ALIGN="LEFT"/>test_insert_extension_to_non_empty_list()<br ALIGN="LEFT"/>test_insert_extension_to_primary_in_non_empty_list()<br ALIGN="LEFT"/>test_insert_groupshdu_to_begin_of_hdulist_with_groupshdu()<br ALIGN="LEFT"/>test_insert_groupshdu_to_empty_list()<br ALIGN="LEFT"/>test_insert_groupshdu_to_non_empty_list()<br ALIGN="LEFT"/>test_insert_image_extension_to_primary_in_non_empty_list()<br ALIGN="LEFT"/>test_insert_primary_to_empty_list()<br ALIGN="LEFT"/>test_insert_primary_to_non_empty_list()<br ALIGN="LEFT"/>test_insert_table_extension_to_empty_list()<br ALIGN="LEFT"/>test_invalid_hdu_key_in_contains()<br ALIGN="LEFT"/>test_iteration_of_lazy_loaded_hdulist()<br ALIGN="LEFT"/>test_new_hdu_extname()<br ALIGN="LEFT"/>test_new_hdulist_extend_keyword()<br ALIGN="LEFT"/>test_no_resource_warning_raised_on_non_fits_file()<br ALIGN="LEFT"/>test_open_file_with_bad_file_padding()<br ALIGN="LEFT"/>test_open_file_with_bad_header_padding()<br ALIGN="LEFT"/>test_open_file_with_end_padding()<br ALIGN="LEFT"/>test_output_verify()<br ALIGN="LEFT"/>test_overwrite(home_is_temp)<br ALIGN="LEFT"/>test_pop_extname()<br ALIGN="LEFT"/>test_pop_with_lazy_load()<br ALIGN="LEFT"/>test_proper_error_raised_on_invalid_fits_file()<br ALIGN="LEFT"/>test_proper_error_raised_on_non_fits_file()<br ALIGN="LEFT"/>test_proper_error_raised_on_non_fits_file_with_unicode()<br ALIGN="LEFT"/>test_read_non_standard_hdu()<br ALIGN="LEFT"/>test_replace_memmaped_array(home_is_temp)<br ALIGN="LEFT"/>test_replace_mmap_data()<br ALIGN="LEFT"/>test_replace_mmap_data_2()<br ALIGN="LEFT"/>test_save_backup(home_is_temp)<br ALIGN="LEFT"/>test_shallow_copy()<br ALIGN="LEFT"/>test_update_filelike()<br ALIGN="LEFT"/>test_update_name()<br ALIGN="LEFT"/>test_update_resized_header(home_is_temp)<br ALIGN="LEFT"/>test_update_resized_header2(home_is_temp)<br ALIGN="LEFT"/>test_update_with_truncated_header()<br ALIGN="LEFT"/>test_warning_raised_on_non_standard_simple_card()<br ALIGN="LEFT"/>test_write_hdulist_to_stream()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_operations.TestHStack" [color="black", fontcolor="black", label=<{TestHStack|meta_merge : OrderedDict<br ALIGN="LEFT"/>t1<br ALIGN="LEFT"/>t2<br ALIGN="LEFT"/>t3<br ALIGN="LEFT"/>t4<br ALIGN="LEFT"/>t5<br ALIGN="LEFT"/>|test_bad_input_type(operation_table_type)<br ALIGN="LEFT"/>test_col_meta_merge(operation_table_type)<br ALIGN="LEFT"/>test_hstack_one_masked(operation_table_type)<br ALIGN="LEFT"/>test_hstack_one_table(operation_table_type)<br ALIGN="LEFT"/>test_mixin_functionality(mixin_cols)<br ALIGN="LEFT"/>test_stack_basic(operation_table_type)<br ALIGN="LEFT"/>test_stack_columns(operation_table_type)<br ALIGN="LEFT"/>test_stack_incompatible(operation_table_type)<br ALIGN="LEFT"/>test_stack_rows(operation_table_type)<br ALIGN="LEFT"/>test_stack_same_table(operation_table_type)<br ALIGN="LEFT"/>test_table_col_rename(operation_table_type)<br ALIGN="LEFT"/>test_table_meta_merge(operation_table_type)<br ALIGN="LEFT"/>test_table_meta_merge_conflict(operation_table_type)<br ALIGN="LEFT"/>test_validate_join_type()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.tests.test_read.test_initial_column_fill_values.TestHeader" [color="black", fontcolor="black", label=<{TestHeader|cols<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_header.TestHeaderFunctions" [color="black", fontcolor="black", label=<{TestHeaderFunctions|<br ALIGN="LEFT"/>|check_roundtrip(card)<br ALIGN="LEFT"/>test_add_blank()<br ALIGN="LEFT"/>test_add_history()<br ALIGN="LEFT"/>test_append_end_card()<br ALIGN="LEFT"/>test_assign_boolean()<br ALIGN="LEFT"/>test_assign_inf_nan()<br ALIGN="LEFT"/>test_assign_non_ascii()<br ALIGN="LEFT"/>test_assign_unicode()<br ALIGN="LEFT"/>test_blank_keyword()<br ALIGN="LEFT"/>test_blank_keyword_long_value()<br ALIGN="LEFT"/>test_boolean_value_card()<br ALIGN="LEFT"/>test_card_constructor_default_args()<br ALIGN="LEFT"/>test_card_from_bytes()<br ALIGN="LEFT"/>test_card_image_constructed_too_long()<br ALIGN="LEFT"/>test_comment_slice_filter_assign()<br ALIGN="LEFT"/>test_comment_slices_and_filters()<br ALIGN="LEFT"/>test_commentary_card_created_by_fromstring()<br ALIGN="LEFT"/>test_commentary_card_will_not_parse_numerical_value()<br ALIGN="LEFT"/>test_commentary_cards()<br ALIGN="LEFT"/>test_commentary_comparison()<br ALIGN="LEFT"/>test_commentary_slicing()<br ALIGN="LEFT"/>test_complex_number_using_string_input()<br ALIGN="LEFT"/>test_complex_value_card()<br ALIGN="LEFT"/>test_constructor_filter_illegal_data_structures()<br ALIGN="LEFT"/>test_continue_card_with_equals_in_value()<br ALIGN="LEFT"/>test_end_in_comment()<br ALIGN="LEFT"/>test_equal_only_up_to_column_10(capsys)<br ALIGN="LEFT"/>test_equal_sign_after_column8()<br ALIGN="LEFT"/>test_final_continue_card_ampersand_removal_on_long_comments()<br ALIGN="LEFT"/>test_final_continue_card_lacks_ampersand()<br ALIGN="LEFT"/>test_fix_hierarch_with_invalid_value(capsys)<br ALIGN="LEFT"/>test_fix_invalid_equal_sign()<br ALIGN="LEFT"/>test_fixable_non_fsc()<br ALIGN="LEFT"/>test_fixable_non_standard_fits_card(capsys)<br ALIGN="LEFT"/>test_floating_point_string_representation_card()<br ALIGN="LEFT"/>test_floating_point_value_card()<br ALIGN="LEFT"/>test_fromfile()<br ALIGN="LEFT"/>test_header_append_keyword_only()<br ALIGN="LEFT"/>test_header_append_use_blanks()<br ALIGN="LEFT"/>test_header_clear()<br ALIGN="LEFT"/>test_header_clear_write(fitsext)<br ALIGN="LEFT"/>test_header_comments()<br ALIGN="LEFT"/>test_header_count()<br ALIGN="LEFT"/>test_header_data_size()<br ALIGN="LEFT"/>test_header_dict_like_pop()<br ALIGN="LEFT"/>test_header_extend()<br ALIGN="LEFT"/>test_header_extend_exact()<br ALIGN="LEFT"/>test_header_extend_unique()<br ALIGN="LEFT"/>test_header_extend_unique_commentary()<br ALIGN="LEFT"/>test_header_extend_update()<br ALIGN="LEFT"/>test_header_extend_update_commentary()<br ALIGN="LEFT"/>test_header_fromkeys()<br ALIGN="LEFT"/>test_header_fromkeys_with_duplicates()<br ALIGN="LEFT"/>test_header_fromkeys_with_value()<br ALIGN="LEFT"/>test_header_fromkeys_with_value_and_comment()<br ALIGN="LEFT"/>test_header_fromstring_bytes()<br ALIGN="LEFT"/>test_header_fromtextfile()<br ALIGN="LEFT"/>test_header_fromtextfile_with_end_card()<br ALIGN="LEFT"/>test_header_history()<br ALIGN="LEFT"/>test_header_insert_before_keyword()<br ALIGN="LEFT"/>test_header_insert_use_blanks()<br ALIGN="LEFT"/>test_header_items()<br ALIGN="LEFT"/>test_header_iter()<br ALIGN="LEFT"/>test_header_iterkeys()<br ALIGN="LEFT"/>test_header_itervalues()<br ALIGN="LEFT"/>test_header_keys()<br ALIGN="LEFT"/>test_header_list_like_pop()<br ALIGN="LEFT"/>test_header_method_keyword_normalization()<br ALIGN="LEFT"/>test_header_set_value_to_none()<br ALIGN="LEFT"/>test_header_setitem_1tuple()<br ALIGN="LEFT"/>test_header_setitem_2tuple()<br ALIGN="LEFT"/>test_header_setitem_invalid()<br ALIGN="LEFT"/>test_header_slice()<br ALIGN="LEFT"/>test_header_slice_assignment()<br ALIGN="LEFT"/>test_header_slice_delete()<br ALIGN="LEFT"/>test_header_strip_whitespace()<br ALIGN="LEFT"/>test_hierarch_card_creation()<br ALIGN="LEFT"/>test_hierarch_card_delete()<br ALIGN="LEFT"/>test_hierarch_card_insert_delete()<br ALIGN="LEFT"/>test_hierarch_card_lookup()<br ALIGN="LEFT"/>test_hierarch_create_and_update()<br ALIGN="LEFT"/>test_hierarch_key_with_long_value()<br ALIGN="LEFT"/>test_hierarch_key_with_long_value_no_spaces()<br ALIGN="LEFT"/>test_hierarch_key_with_medium_value_and_comment()<br ALIGN="LEFT"/>test_hierarch_keyword_whitespace()<br ALIGN="LEFT"/>test_hierarch_not_warn()<br ALIGN="LEFT"/>test_hierarch_with_abbrev_value_indicator()<br ALIGN="LEFT"/>test_illegal_characters_in_key()<br ALIGN="LEFT"/>test_index_numpy_int()<br ALIGN="LEFT"/>test_indexing_case(key)<br ALIGN="LEFT"/>test_invalid_characters()<br ALIGN="LEFT"/>test_invalid_end_cards()<br ALIGN="LEFT"/>test_invalid_float_cards()<br ALIGN="LEFT"/>test_invalid_float_cards2(capsys)<br ALIGN="LEFT"/>test_invalid_keyword_cards()<br ALIGN="LEFT"/>test_keep_duplicate_history_in_orig_header()<br ALIGN="LEFT"/>test_keyword_too_long()<br ALIGN="LEFT"/>test_leading_zeros()<br ALIGN="LEFT"/>test_long_commentary_card()<br ALIGN="LEFT"/>test_long_commentary_card_appended_to_header()<br ALIGN="LEFT"/>test_long_integer_value_card()<br ALIGN="LEFT"/>test_long_string_from_file()<br ALIGN="LEFT"/>test_long_string_repr()<br ALIGN="LEFT"/>test_long_string_value()<br ALIGN="LEFT"/>test_long_string_value_via_fromstring(capsys)<br ALIGN="LEFT"/>test_long_string_value_with_multiple_long_words()<br ALIGN="LEFT"/>test_long_string_value_with_quotes()<br ALIGN="LEFT"/>test_long_unicode_string()<br ALIGN="LEFT"/>test_mislocated_equal_sign(capsys)<br ALIGN="LEFT"/>test_missing_keyword()<br ALIGN="LEFT"/>test_newlines_in_commentary()<br ALIGN="LEFT"/>test_popitem()<br ALIGN="LEFT"/>test_remove()<br ALIGN="LEFT"/>test_rename_keyword()<br ALIGN="LEFT"/>test_set_comment_only()<br ALIGN="LEFT"/>test_set_keyword_with_space()<br ALIGN="LEFT"/>test_setdefault()<br ALIGN="LEFT"/>test_short_hierarch_create_and_update()<br ALIGN="LEFT"/>test_specify_undefined_value()<br ALIGN="LEFT"/>test_string_value_card()<br ALIGN="LEFT"/>test_strip()<br ALIGN="LEFT"/>test_tofile(home_is_temp)<br ALIGN="LEFT"/>test_totxtfile(home_is_temp)<br ALIGN="LEFT"/>test_undefined_keys_values()<br ALIGN="LEFT"/>test_undefined_value_using_string_input()<br ALIGN="LEFT"/>test_unnecessary_move()<br ALIGN="LEFT"/>test_update()<br ALIGN="LEFT"/>test_update_bool()<br ALIGN="LEFT"/>test_update_comment()<br ALIGN="LEFT"/>test_update_commentary()<br ALIGN="LEFT"/>test_update_from_dict()<br ALIGN="LEFT"/>test_update_from_iterable()<br ALIGN="LEFT"/>test_update_invalid_card()<br ALIGN="LEFT"/>test_update_numeric()<br ALIGN="LEFT"/>test_verify_invalid_equal_sign()<br ALIGN="LEFT"/>test_verify_mixed_case_hierarch()<br ALIGN="LEFT"/>test_wildcard_slice()<br ALIGN="LEFT"/>test_wildcard_slice_assignment()<br ALIGN="LEFT"/>test_wildcard_slice_deletion()<br ALIGN="LEFT"/>test_wildcard_with_hyphen()<br ALIGN="LEFT"/>test_word_in_long_string_too_long()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_celestial_transformations.TestHelioBaryCentric" [color="black", fontcolor="black", label=<{TestHelioBaryCentric|obstime<br ALIGN="LEFT"/>wht_itrs<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_barycentric()<br ALIGN="LEFT"/>test_heliocentric()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_corrs.TestHelioBaryCentric" [color="black", fontcolor="black", label=<{TestHelioBaryCentric|obstime<br ALIGN="LEFT"/>obstime2<br ALIGN="LEFT"/>obstimeArr<br ALIGN="LEFT"/>star<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>setup_method()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>test_arrays()<br ALIGN="LEFT"/>test_barycentric()<br ALIGN="LEFT"/>test_ephemerides()<br ALIGN="LEFT"/>test_heliocentric()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestHistogramFunctions" [color="black", fontcolor="black", label=<{TestHistogramFunctions|weights<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|check(function)<br ALIGN="LEFT"/>setup_method()<br ALIGN="LEFT"/>test_convolve()<br ALIGN="LEFT"/>test_corrcoef()<br ALIGN="LEFT"/>test_correlate()<br ALIGN="LEFT"/>test_cov()<br ALIGN="LEFT"/>test_histogram()<br ALIGN="LEFT"/>test_histogram2d()<br ALIGN="LEFT"/>test_histogram2d_range(range)<br ALIGN="LEFT"/>test_histogram_bin_edges()<br ALIGN="LEFT"/>test_histogram_bin_edges_range(range)<br ALIGN="LEFT"/>test_histogram_range(range)<br ALIGN="LEFT"/>test_histogramdd()<br ALIGN="LEFT"/>test_histogramdd_range(range)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.tests.test_hub_proxy.TestHubProxy" [color="black", fontcolor="black", label=<{TestHubProxy|hub<br ALIGN="LEFT"/>proxy<br ALIGN="LEFT"/>|setup_method(method)<br ALIGN="LEFT"/>teardown_method(method)<br ALIGN="LEFT"/>test_disconnect()<br ALIGN="LEFT"/>test_is_connected()<br ALIGN="LEFT"/>test_ping()<br ALIGN="LEFT"/>test_registration()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitters.TestICheb2D" [color="black", fontcolor="black", label=<{TestICheb2D|cheb2<br ALIGN="LEFT"/>fitter<br ALIGN="LEFT"/>pmodel<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_chebyshev2D_nonlinear_fitting(fitter)<br ALIGN="LEFT"/>test_chebyshev2D_nonlinear_fitting_with_weights(fitter)<br ALIGN="LEFT"/>test_default_params()<br ALIGN="LEFT"/>test_poly2D_cheb2D()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.iers.tests.test_iers.TestIERS_A" [color="black", fontcolor="black", label=<{TestIERS_A|<br ALIGN="LEFT"/>|teardown_class()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.iers.tests.test_iers.TestIERS_AExcerpt" [color="black", fontcolor="black", label=<{TestIERS_AExcerpt|<br ALIGN="LEFT"/>|teardown_class()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.iers.tests.test_iers.TestIERS_Auto" [color="black", fontcolor="black", label=<{TestIERS_Auto|N : int<br ALIGN="LEFT"/>ame : float<br ALIGN="LEFT"/>iers_a_file_1 : bytes, str<br ALIGN="LEFT"/>iers_a_file_2 : bytes, str<br ALIGN="LEFT"/>iers_a_url_1<br ALIGN="LEFT"/>iers_a_url_2<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>teardown_method(method)<br ALIGN="LEFT"/>test_auto_max_age_minimum()<br ALIGN="LEFT"/>test_auto_max_age_none()<br ALIGN="LEFT"/>test_interpolate_error_formatting()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_image.TestImageFunctions" [color="black", fontcolor="black", label=<{TestImageFunctions|<br ALIGN="LEFT"/>|test_append_uint_data()<br ALIGN="LEFT"/>test_blanks()<br ALIGN="LEFT"/>test_bzero_with_floats()<br ALIGN="LEFT"/>test_constructor_copies_header()<br ALIGN="LEFT"/>test_constructor_name_arg()<br ALIGN="LEFT"/>test_constructor_ver_arg()<br ALIGN="LEFT"/>test_do_not_scale_image_data()<br ALIGN="LEFT"/>test_fortran_array()<br ALIGN="LEFT"/>test_fortran_array_non_contiguous()<br ALIGN="LEFT"/>test_hdu_creation_with_scalar()<br ALIGN="LEFT"/>test_image_none()<br ALIGN="LEFT"/>test_image_update_header()<br ALIGN="LEFT"/>test_invalid_blank()<br ALIGN="LEFT"/>test_invalid_blanks()<br ALIGN="LEFT"/>test_io_manipulation()<br ALIGN="LEFT"/>test_memory_mapping()<br ALIGN="LEFT"/>test_open()<br ALIGN="LEFT"/>test_open_2()<br ALIGN="LEFT"/>test_open_3()<br ALIGN="LEFT"/>test_open_scaled_in_update_mode()<br ALIGN="LEFT"/>test_primary_with_extname()<br ALIGN="LEFT"/>test_rewriting_large_scaled_image()<br ALIGN="LEFT"/>test_scale_back()<br ALIGN="LEFT"/>test_scale_back_uint_assignment()<br ALIGN="LEFT"/>test_scale_back_with_blanks()<br ALIGN="LEFT"/>test_scale_bzero_with_int_data()<br ALIGN="LEFT"/>test_scale_with_explicit_bzero_bscale()<br ALIGN="LEFT"/>test_scaled_image_fromfile()<br ALIGN="LEFT"/>test_section()<br ALIGN="LEFT"/>test_section_data_cube()<br ALIGN="LEFT"/>test_section_data_four()<br ALIGN="LEFT"/>test_section_data_scaled(file, expected_dtype)<br ALIGN="LEFT"/>test_section_data_single()<br ALIGN="LEFT"/>test_section_data_square()<br ALIGN="LEFT"/>test_set_data()<br ALIGN="LEFT"/>test_uint_header_consistency()<br ALIGN="LEFT"/>test_uint_header_keywords_removed_after_bitpix_change(from_file, do_not_scale)<br ALIGN="LEFT"/>test_verification_on_output()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.tests.test_norm.TestImageScaling" [color="black", fontcolor="black", label=<{TestImageScaling|<br ALIGN="LEFT"/>|test_asinh()<br ALIGN="LEFT"/>test_asinh_with_asinh_a()<br ALIGN="LEFT"/>test_invalid_stretch()<br ALIGN="LEFT"/>test_linear()<br ALIGN="LEFT"/>test_log()<br ALIGN="LEFT"/>test_log_with_log_a()<br ALIGN="LEFT"/>test_min()<br ALIGN="LEFT"/>test_percent()<br ALIGN="LEFT"/>test_power()<br ALIGN="LEFT"/>test_sinh()<br ALIGN="LEFT"/>test_sqrt()<br ALIGN="LEFT"/>test_sqrt_invalid_kw(invalid)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_index.TestIndex" [color="black", fontcolor="black", label=<{TestIndex|main_col<br ALIGN="LEFT"/>mutable<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>|make_col(name, lst)<br ALIGN="LEFT"/>make_val(val)<br ALIGN="LEFT"/>test_col_get_slice(main_col, table_types, engine)<br ALIGN="LEFT"/>test_col_rename(main_col, table_types, engine)<br ALIGN="LEFT"/>test_col_set_slice(main_col, table_types, engine)<br ALIGN="LEFT"/>test_copy_index_references(main_col, table_types, engine)<br ALIGN="LEFT"/>test_copy_indexed_table(table_types)<br ALIGN="LEFT"/>test_index_modes(main_col, table_types, engine)<br ALIGN="LEFT"/>test_index_retrieval(main_col, table_types, engine)<br ALIGN="LEFT"/>test_insert_row(main_col, table_types, engine)<br ALIGN="LEFT"/>test_invalid_search(main_col, table_types, engine)<br ALIGN="LEFT"/>test_invalid_updates(main_col, table_types, engine)<br ALIGN="LEFT"/>test_multiple_slices(main_col, table_types, engine)<br ALIGN="LEFT"/>test_remove_rows(main_col, table_types, engine)<br ALIGN="LEFT"/>test_sort(main_col, table_types, engine)<br ALIGN="LEFT"/>test_table_index(main_col, table_types, composite, engine)<br ALIGN="LEFT"/>test_table_loc(main_col, table_types, engine)<br ALIGN="LEFT"/>test_table_loc_indices(main_col, table_types, engine)<br ALIGN="LEFT"/>test_table_slicing(main_col, table_types, engine)<br ALIGN="LEFT"/>test_unique_index(main_col, table_types, engine)<br ALIGN="LEFT"/>test_updating_row_byindex(main_col, table_types, engine)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestIndexFunctions" [color="black", fontcolor="black", label=<{TestIndexFunctions|<br ALIGN="LEFT"/>|test_ix_()<br ALIGN="LEFT"/>test_ravel_multi_index()<br ALIGN="LEFT"/>test_unravel_index()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestIndicesFrom" [color="black", fontcolor="black", label=<{TestIndicesFrom|<br ALIGN="LEFT"/>|test_diag_indices_from()<br ALIGN="LEFT"/>test_tril_indices_from()<br ALIGN="LEFT"/>test_triu_indices_from()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestIndicesFrom" [color="black", fontcolor="black", label=<{TestIndicesFrom|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_diag_indices_from()<br ALIGN="LEFT"/>test_tril_indices_from()<br ALIGN="LEFT"/>test_triu_indices_from()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.TestInfo" [color="black", fontcolor="black", label=<{TestInfo|diff<br ALIGN="LEFT"/>rep<br ALIGN="LEFT"/>rep_w_diff<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_info_unit()<br ALIGN="LEFT"/>test_roundtrip(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_distribution.TestInit" [color="black", fontcolor="black", label=<{TestInit|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_numpy_init()<br ALIGN="LEFT"/>test_numpy_init_T()<br ALIGN="LEFT"/>test_quantity_init()<br ALIGN="LEFT"/>test_quantity_init_T()<br ALIGN="LEFT"/>test_quantity_init_with_distribution()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestInitFromColsList" [color="black", fontcolor="black", label=<{TestInitFromColsList|data : list<br ALIGN="LEFT"/>|test_default_names(table_type)<br ALIGN="LEFT"/>test_partial_names_dtype(table_type)<br ALIGN="LEFT"/>test_ref(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestInitFromDict" [color="black", fontcolor="black", label=<{TestInitFromDict|data : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestInitFromListOfDicts" [color="black", fontcolor="black", label=<{TestInitFromListOfDicts|data : list<br ALIGN="LEFT"/>data_acb : list<br ALIGN="LEFT"/>data_ragged : list<br ALIGN="LEFT"/>|test_missing_data_init_from_dict(table_type)<br ALIGN="LEFT"/>test_names(table_type)<br ALIGN="LEFT"/>test_names_ordered(table_type)<br ALIGN="LEFT"/>test_rows_without_names_args(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestInitFromListOfLists" [color="black", fontcolor="black", label=<{TestInitFromListOfLists|data : list<br ALIGN="LEFT"/>|setup_method(table_type)<br ALIGN="LEFT"/>test_bad_data(table_type)<br ALIGN="LEFT"/>test_default_names(table_type)<br ALIGN="LEFT"/>test_partial_names_dtype(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestInitFromListOfMapping" [color="black", fontcolor="black", label=<{TestInitFromListOfMapping|data : list<br ALIGN="LEFT"/>data_acb : list<br ALIGN="LEFT"/>data_ragged : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestInitFromMapping" [color="black", fontcolor="black", label=<{TestInitFromMapping|data : UserDict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestInitFromNdarrayHomo" [color="black", fontcolor="black", label=<{TestInitFromNdarrayHomo|data : ndarray<br ALIGN="LEFT"/>|setup_method(method)<br ALIGN="LEFT"/>test_default_names(table_type)<br ALIGN="LEFT"/>test_ndarray_ref(table_type)<br ALIGN="LEFT"/>test_partial_names_dtype(table_type)<br ALIGN="LEFT"/>test_partial_names_ref(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestInitFromNdarrayStruct" [color="black", fontcolor="black", label=<{TestInitFromNdarrayStruct|data : ndarray<br ALIGN="LEFT"/>|test_ndarray_ref(table_type)<br ALIGN="LEFT"/>test_partial_names_dtype(table_type)<br ALIGN="LEFT"/>test_partial_names_ref(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestInitFromNone" [color="black", fontcolor="black", label=<{TestInitFromNone|<br ALIGN="LEFT"/>|test_data_none_with_cols(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestInitFromOrderedDict" [color="black", fontcolor="black", label=<{TestInitFromOrderedDict|data : OrderedDict<br ALIGN="LEFT"/>|test_col_order(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestInitFromRow" [color="black", fontcolor="black", label=<{TestInitFromRow|data<br ALIGN="LEFT"/>|test_init_from_row(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestInitFromRows" [color="black", fontcolor="black", label=<{TestInitFromRows|<br ALIGN="LEFT"/>|test_init_with_rows(table_type)<br ALIGN="LEFT"/>test_init_with_rows_and_data(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestInitFromTable" [color="black", fontcolor="black", label=<{TestInitFromTable|data<br ALIGN="LEFT"/>|test_data_meta_copy(table_type)<br ALIGN="LEFT"/>test_init_from_columns(table_type)<br ALIGN="LEFT"/>test_init_from_columns_mix(table_type)<br ALIGN="LEFT"/>test_init_from_columns_slice(table_type)<br ALIGN="LEFT"/>test_partial_names_dtype(table_type)<br ALIGN="LEFT"/>test_partial_names_ref(table_type)<br ALIGN="LEFT"/>test_table_ref(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestInitFromTable" [color="black", fontcolor="black", label=<{TestInitFromTable|<br ALIGN="LEFT"/>|test_from_table_cols(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestInplaceUfuncs" [color="black", fontcolor="black", label=<{TestInplaceUfuncs|<br ALIGN="LEFT"/>|test_comparison_ufuncs_inplace(ufunc)<br ALIGN="LEFT"/>test_ndarray_inplace_op_with_quantity()<br ALIGN="LEFT"/>test_one_argument_two_output_ufunc_inplace(value)<br ALIGN="LEFT"/>test_one_argument_ufunc_inplace(value)<br ALIGN="LEFT"/>test_one_argument_ufunc_inplace_2(value)<br ALIGN="LEFT"/>test_onearg_test_ufuncs_inplace(ufunc)<br ALIGN="LEFT"/>test_sign_inplace()<br ALIGN="LEFT"/>test_two_argument_two_output_ufunc_inplace(value)<br ALIGN="LEFT"/>test_two_argument_ufunc_inplace_1(value)<br ALIGN="LEFT"/>test_two_argument_ufunc_inplace_2(value)<br ALIGN="LEFT"/>test_two_argument_ufunc_inplace_3()<br ALIGN="LEFT"/>test_ufunc_inplace_non_contiguous_data()<br ALIGN="LEFT"/>test_ufunc_inplace_non_standard_dtype()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_earth.TestInput" [color="black", fontcolor="black", label=<{TestInput|h<br ALIGN="LEFT"/>lat<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>lon<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_attribute_classes()<br ALIGN="LEFT"/>test_default_ellipsoid()<br ALIGN="LEFT"/>test_ellipsoid(ellipsoid)<br ALIGN="LEFT"/>test_geo_attributes()<br ALIGN="LEFT"/>test_input()<br ALIGN="LEFT"/>test_invalid_ellipsoid()<br ALIGN="LEFT"/>test_invalid_input()<br ALIGN="LEFT"/>test_slicing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_input.TestInputType" [color="black", fontcolor="black", label=<{TestInputType|x : float<br ALIGN="LEFT"/>x1<br ALIGN="LEFT"/>x2<br ALIGN="LEFT"/>y : float<br ALIGN="LEFT"/>y1<br ALIGN="LEFT"/>y2<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_input1D(model, params)<br ALIGN="LEFT"/>test_input2D(model, params)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_quantities_evaluation.TestInputUnits" [color="black", fontcolor="black", label=<{TestInputUnits|model<br ALIGN="LEFT"/>|setup_method(method)<br ALIGN="LEFT"/>test_evaluate()<br ALIGN="LEFT"/>test_input_units()<br ALIGN="LEFT"/>test_input_units_allow_dimensionless()<br ALIGN="LEFT"/>test_input_units_equivalencies()<br ALIGN="LEFT"/>test_input_units_strict()<br ALIGN="LEFT"/>test_return_units()<br ALIGN="LEFT"/>test_return_units_scalar()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestIntDiffFunctions" [color="black", fontcolor="black", label=<{TestIntDiffFunctions|<br ALIGN="LEFT"/>|check_trapezoid(func)<br ALIGN="LEFT"/>test_diff()<br ALIGN="LEFT"/>test_diff_prepend_append()<br ALIGN="LEFT"/>test_gradient()<br ALIGN="LEFT"/>test_gradient_spacing()<br ALIGN="LEFT"/>test_trapezoid()<br ALIGN="LEFT"/>test_trapz()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestIntDiffFunctions" [color="black", fontcolor="black", label=<{TestIntDiffFunctions|<br ALIGN="LEFT"/>|check_trapezoid(func)<br ALIGN="LEFT"/>test_diff()<br ALIGN="LEFT"/>test_diff_prepend_append()<br ALIGN="LEFT"/>test_gradient()<br ALIGN="LEFT"/>test_trapezoid()<br ALIGN="LEFT"/>test_trapz()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestInterpolationFunctions" [color="black", fontcolor="black", label=<{TestInterpolationFunctions|<br ALIGN="LEFT"/>|test_interp()<br ALIGN="LEFT"/>test_piecewise()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestInterpolationFunctions" [color="black", fontcolor="black", label=<{TestInterpolationFunctions|<br ALIGN="LEFT"/>|test_interp()<br ALIGN="LEFT"/>test_piecewise()<br ALIGN="LEFT"/>test_regression_12978()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.tests.test_interval.TestInterval" [color="black", fontcolor="black", label=<{TestInterval|data : ndarray<br ALIGN="LEFT"/>|test_asymmetric_percentile()<br ALIGN="LEFT"/>test_asymmetric_percentile_nsamples()<br ALIGN="LEFT"/>test_manual()<br ALIGN="LEFT"/>test_manual_defaults()<br ALIGN="LEFT"/>test_manual_defaults_with_nan()<br ALIGN="LEFT"/>test_manual_zero_limit()<br ALIGN="LEFT"/>test_minmax()<br ALIGN="LEFT"/>test_percentile()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.tests.test_interval.TestInterval2D" [color="black", fontcolor="black", label=<{TestInterval2D|data : ndarray<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.tests.test_interval.TestIntervalList" [color="black", fontcolor="black", label=<{TestIntervalList|data : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestInvariantUfuncs" [color="black", fontcolor="black", label=<{TestInvariantUfuncs|<br ALIGN="LEFT"/>|test_invariant_array(ufunc)<br ALIGN="LEFT"/>test_invariant_scalar(ufunc)<br ALIGN="LEFT"/>test_invariant_twoarg_array(ufunc)<br ALIGN="LEFT"/>test_invariant_twoarg_invalid_units(ufunc)<br ALIGN="LEFT"/>test_invariant_twoarg_one_arbitrary(ufunc, arbitrary)<br ALIGN="LEFT"/>test_invariant_twoarg_scalar(ufunc)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestIterator" [color="black", fontcolor="black", label=<{TestIterator|<br ALIGN="LEFT"/>|test_iterator(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_operations.TestJoin" [color="black", fontcolor="black", label=<{TestJoin|meta_merge : OrderedDict<br ALIGN="LEFT"/>t1<br ALIGN="LEFT"/>t2<br ALIGN="LEFT"/>t3<br ALIGN="LEFT"/>|test_bad_join_type(operation_table_type)<br ALIGN="LEFT"/>test_both_unmasked_inner(operation_table_type)<br ALIGN="LEFT"/>test_both_unmasked_left_right_outer(operation_table_type)<br ALIGN="LEFT"/>test_both_unmasked_single_key_inner(operation_table_type)<br ALIGN="LEFT"/>test_both_unmasked_single_key_left_right_outer(operation_table_type)<br ALIGN="LEFT"/>test_cartesian_join(operation_table_type)<br ALIGN="LEFT"/>test_classes()<br ALIGN="LEFT"/>test_col_meta_merge(operation_table_type)<br ALIGN="LEFT"/>test_col_rename(operation_table_type)<br ALIGN="LEFT"/>test_join_multidimensional(operation_table_type)<br ALIGN="LEFT"/>test_join_multidimensional_masked(operation_table_type)<br ALIGN="LEFT"/>test_join_structured_column()<br ALIGN="LEFT"/>test_join_with_join_distance_1d()<br ALIGN="LEFT"/>test_join_with_join_distance_1d_multikey()<br ALIGN="LEFT"/>test_join_with_join_distance_1d_quantity()<br ALIGN="LEFT"/>test_join_with_join_distance_2d()<br ALIGN="LEFT"/>test_join_with_join_skycoord_3d(distance_func)<br ALIGN="LEFT"/>test_join_with_join_skycoord_sky()<br ALIGN="LEFT"/>test_keys_left_right_basic()<br ALIGN="LEFT"/>test_keys_left_right_exceptions()<br ALIGN="LEFT"/>test_masked_key_column(operation_table_type)<br ALIGN="LEFT"/>test_masked_masked(operation_table_type)<br ALIGN="LEFT"/>test_masked_unmasked(operation_table_type)<br ALIGN="LEFT"/>test_missing_keys(operation_table_type)<br ALIGN="LEFT"/>test_mixin_functionality(mixin_cols)<br ALIGN="LEFT"/>test_no_common_keys(operation_table_type)<br ALIGN="LEFT"/>test_rename_conflict(operation_table_type)<br ALIGN="LEFT"/>test_table_meta_merge(operation_table_type)<br ALIGN="LEFT"/>test_table_meta_merge_conflict(operation_table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitters.TestJointFitter" [color="black", fontcolor="black", label=<{TestJointFitter|g1<br ALIGN="LEFT"/>g2<br ALIGN="LEFT"/>jf<br ALIGN="LEFT"/>ny1<br ALIGN="LEFT"/>ny2<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_joint_fitter()<br ALIGN="LEFT"/>test_joint_parameter()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestKeep" [color="black", fontcolor="black", label=<{TestKeep|<br ALIGN="LEFT"/>|test_1(table_types)<br ALIGN="LEFT"/>test_2(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.tests.test_kernel_class.TestKernels" [color="black", fontcolor="black", label=<{TestKernels|<br ALIGN="LEFT"/>|test_Gaussian1DKernel_even_size()<br ALIGN="LEFT"/>test_Gaussian2DKernel_even_size()<br ALIGN="LEFT"/>test_Gaussian2DKernel_rotated()<br ALIGN="LEFT"/>test_add_1D_kernels()<br ALIGN="LEFT"/>test_add_2D_kernels()<br ALIGN="LEFT"/>test_add_kernel_scalar()<br ALIGN="LEFT"/>test_array_keyword_not_allowed()<br ALIGN="LEFT"/>test_box_kernels_even_size(width)<br ALIGN="LEFT"/>test_check_kernel_attributes()<br ALIGN="LEFT"/>test_convolve_1D_kernels()<br ALIGN="LEFT"/>test_convolve_2D_kernels()<br ALIGN="LEFT"/>test_custom_1D_kernel()<br ALIGN="LEFT"/>test_custom_1D_kernel_list()<br ALIGN="LEFT"/>test_custom_1D_kernel_zerosum()<br ALIGN="LEFT"/>test_custom_2D_kernel()<br ALIGN="LEFT"/>test_custom_2D_kernel_list()<br ALIGN="LEFT"/>test_custom_2D_kernel_zerosum()<br ALIGN="LEFT"/>test_custom_kernel_odd_error()<br ALIGN="LEFT"/>test_delta_data(kernel_type, width)<br ALIGN="LEFT"/>test_discretize_modes(kernel_type, mode)<br ALIGN="LEFT"/>test_kernel1d_initialization()<br ALIGN="LEFT"/>test_kernel1d_int_size()<br ALIGN="LEFT"/>test_kernel2d_initialization()<br ALIGN="LEFT"/>test_kernel2d_int_xsize()<br ALIGN="LEFT"/>test_kernel2d_int_ysize()<br ALIGN="LEFT"/>test_kernel_normalization()<br ALIGN="LEFT"/>test_kernel_normalization_mode()<br ALIGN="LEFT"/>test_model_1D_kernel()<br ALIGN="LEFT"/>test_model_2D_kernel()<br ALIGN="LEFT"/>test_multiply_kernel1d()<br ALIGN="LEFT"/>test_multiply_kernel1d_kernel2d()<br ALIGN="LEFT"/>test_multiply_kernel2d()<br ALIGN="LEFT"/>test_multiply_scalar(number)<br ALIGN="LEFT"/>test_multiply_scalar_type(number)<br ALIGN="LEFT"/>test_normalize_peak()<br ALIGN="LEFT"/>test_random_data(kernel_type, width)<br ALIGN="LEFT"/>test_rmultiply_scalar_type(number)<br ALIGN="LEFT"/>test_scipy_filter_gaussian(width)<br ALIGN="LEFT"/>test_scipy_filter_gaussian_laplace(width)<br ALIGN="LEFT"/>test_smallkernel_vs_Box2DKernel(width)<br ALIGN="LEFT"/>test_uniform_smallkernel(width)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_lambdacdm.TestLambdaCDM" [color="black", fontcolor="black", label=<{TestLambdaCDM|cls<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_comoving_distance_example(cosmo_cls, args, kwargs, expected)<br ALIGN="LEFT"/>test_redshift_method_bad_input(cosmo, method, z, exc)<br ALIGN="LEFT"/>test_repr(cosmo)<br ALIGN="LEFT"/>test_str(cosmo)<br ALIGN="LEFT"/>test_w(cosmo, z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_statistics.TestLeastSquare_ND" [color="black", fontcolor="black", label=<{TestLeastSquare_ND|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_1d_no_weights()<br ALIGN="LEFT"/>test_1d_with_weights()<br ALIGN="LEFT"/>test_3d_no_weights()<br ALIGN="LEFT"/>test_3d_with_weights()<br ALIGN="LEFT"/>test_shape_mismatch()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_statistics.TestLeastSquare_XD" [color="black", fontcolor="black", label=<{TestLeastSquare_XD|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_1d_no_weights()<br ALIGN="LEFT"/>test_1d_with_weights()<br ALIGN="LEFT"/>test_2d_no_weights()<br ALIGN="LEFT"/>test_2d_with_weights()<br ALIGN="LEFT"/>test_3d_no_weights()<br ALIGN="LEFT"/>test_3d_with_weights()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestLinAlg" [color="black", fontcolor="black", label=<{TestLinAlg|q<br ALIGN="LEFT"/>tested_module<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_cholesky()<br ALIGN="LEFT"/>test_cond()<br ALIGN="LEFT"/>test_cross()<br ALIGN="LEFT"/>test_det()<br ALIGN="LEFT"/>test_diagonal()<br ALIGN="LEFT"/>test_eig()<br ALIGN="LEFT"/>test_eigh()<br ALIGN="LEFT"/>test_eigvals()<br ALIGN="LEFT"/>test_eigvalsh()<br ALIGN="LEFT"/>test_inv()<br ALIGN="LEFT"/>test_lstsq()<br ALIGN="LEFT"/>test_matmul()<br ALIGN="LEFT"/>test_matrix_inv_power()<br ALIGN="LEFT"/>test_matrix_norm()<br ALIGN="LEFT"/>test_matrix_power()<br ALIGN="LEFT"/>test_matrix_rank()<br ALIGN="LEFT"/>test_matrix_rank_with_tol()<br ALIGN="LEFT"/>test_matrix_transpose()<br ALIGN="LEFT"/>test_multi_dot()<br ALIGN="LEFT"/>test_norm()<br ALIGN="LEFT"/>test_outer()<br ALIGN="LEFT"/>test_pinv()<br ALIGN="LEFT"/>test_qr()<br ALIGN="LEFT"/>test_slogdet()<br ALIGN="LEFT"/>test_solve()<br ALIGN="LEFT"/>test_svd()<br ALIGN="LEFT"/>test_svdvals()<br ALIGN="LEFT"/>test_tensordot()<br ALIGN="LEFT"/>test_tensorinv()<br ALIGN="LEFT"/>test_tensorsolve()<br ALIGN="LEFT"/>test_trace()<br ALIGN="LEFT"/>test_vecdot()<br ALIGN="LEFT"/>test_vector_norm()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_constraints.TestLinearConstraints" [color="black", fontcolor="black", label=<{TestLinearConstraints|n<br ALIGN="LEFT"/>ny<br ALIGN="LEFT"/>p1<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitters.TestLinearLSQFitter" [color="black", fontcolor="black", label=<{TestLinearLSQFitter|<br ALIGN="LEFT"/>|test_chebyshev1D()<br ALIGN="LEFT"/>test_compound_model_raises_error()<br ALIGN="LEFT"/>test_linear_fit_2d_model_set()<br ALIGN="LEFT"/>test_linear_fit_2d_model_set_fixed_parameters()<br ALIGN="LEFT"/>test_linear_fit_2d_model_set_masked_values()<br ALIGN="LEFT"/>test_linear_fit_fixed_parameter()<br ALIGN="LEFT"/>test_linear_fit_model_set()<br ALIGN="LEFT"/>test_linear_fit_model_set_fixed_parameter()<br ALIGN="LEFT"/>test_linear_fit_model_set_masked_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_logarithmic.TestLogQuantityArithmetic" [color="black", fontcolor="black", label=<{TestLogQuantityArithmetic|<br ALIGN="LEFT"/>|test_addition_subtraction(other)<br ALIGN="LEFT"/>test_addition_subtraction_to_normal_units_fails(other)<br ALIGN="LEFT"/>test_complicated_addition_subtraction()<br ALIGN="LEFT"/>test_error_on_lq_as_power()<br ALIGN="LEFT"/>test_inplace_addition_subtraction(other)<br ALIGN="LEFT"/>test_inplace_addition_subtraction_unit_checks(other)<br ALIGN="LEFT"/>test_more_multiplication_division()<br ALIGN="LEFT"/>test_multiplication_division(other, fac)<br ALIGN="LEFT"/>test_raise_to_power(power)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_logarithmic.TestLogQuantityComparisons" [color="black", fontcolor="black", label=<{TestLogQuantityComparisons|<br ALIGN="LEFT"/>|test_comparison()<br ALIGN="LEFT"/>test_comparison_to_non_quantities_fails()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_logarithmic.TestLogQuantityCreation" [color="black", fontcolor="black", label=<{TestLogQuantityCreation|<br ALIGN="LEFT"/>|test_different_units(unit)<br ALIGN="LEFT"/>test_from_view()<br ALIGN="LEFT"/>test_function_values(value, unit)<br ALIGN="LEFT"/>test_indirect_creation(unit)<br ALIGN="LEFT"/>test_logarithmic_quantities(lq, lu)<br ALIGN="LEFT"/>test_subclass_creation(lq_cls, physical_unit)<br ALIGN="LEFT"/>test_using_quantity_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_logarithmic.TestLogQuantityFunctions" [color="black", fontcolor="black", label=<{TestLogQuantityFunctions|m1<br ALIGN="LEFT"/>mJy<br ALIGN="LEFT"/>mags : tuple<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_ptp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_logarithmic.TestLogQuantityMethods" [color="black", fontcolor="black", label=<{TestLogQuantityMethods|m1<br ALIGN="LEFT"/>mJy<br ALIGN="LEFT"/>mags : tuple<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_always_ok(method)<br ALIGN="LEFT"/>test_always_ok_ptp()<br ALIGN="LEFT"/>test_clip()<br ALIGN="LEFT"/>test_dot()<br ALIGN="LEFT"/>test_never_ok(method)<br ALIGN="LEFT"/>test_only_ok_if_dimensionless(method)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_logarithmic.TestLogQuantitySlicing" [color="black", fontcolor="black", label=<{TestLogQuantitySlicing|<br ALIGN="LEFT"/>|test_item_get_and_set()<br ALIGN="LEFT"/>test_slice_get_and_set()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_logarithmic.TestLogQuantityViews" [color="black", fontcolor="black", label=<{TestLogQuantityViews|lq<br ALIGN="LEFT"/>lq2<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_function_view()<br ALIGN="LEFT"/>test_quantity_view()<br ALIGN="LEFT"/>test_value_view()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_logarithmic.TestLogUnitArithmetic" [color="black", fontcolor="black", label=<{TestLogUnitArithmetic|<br ALIGN="LEFT"/>|test_addition_subtraction(other)<br ALIGN="LEFT"/>test_addition_subtraction_to_non_units_fails()<br ALIGN="LEFT"/>test_addition_subtraction_to_normal_units_fails(other)<br ALIGN="LEFT"/>test_complicated_addition_subtraction()<br ALIGN="LEFT"/>test_multiplication_division()<br ALIGN="LEFT"/>test_neg_pos()<br ALIGN="LEFT"/>test_raise_to_power(power)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_logarithmic.TestLogUnitConversion" [color="black", fontcolor="black", label=<{TestLogUnitConversion|<br ALIGN="LEFT"/>|test_container_unit_conversion(lu_unit)<br ALIGN="LEFT"/>test_magnitude_conversion_fails_message()<br ALIGN="LEFT"/>test_physical_unit_conversion(lu_unit, physical_unit)<br ALIGN="LEFT"/>test_subclass_conversion(flu_unit, tlu_unit, physical_unit)<br ALIGN="LEFT"/>test_unit_decomposition()<br ALIGN="LEFT"/>test_unit_multiple_possible_equivalencies()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_logarithmic.TestLogUnitCreation" [color="black", fontcolor="black", label=<{TestLogUnitCreation|<br ALIGN="LEFT"/>|test_call_invalid_unit()<br ALIGN="LEFT"/>test_call_units(lu_unit, physical_unit)<br ALIGN="LEFT"/>test_callable_units(lu_unit, lu_cls)<br ALIGN="LEFT"/>test_equality_to_normal_unit_for_dimensionless(lu_unit)<br ALIGN="LEFT"/>test_ilshift_magnitude()<br ALIGN="LEFT"/>test_logarithmic_units()<br ALIGN="LEFT"/>test_lshift_errors()<br ALIGN="LEFT"/>test_lshift_magnitude()<br ALIGN="LEFT"/>test_subclass_creation(lu_cls, physical_unit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_logarithmic.TestLogUnitStrings" [color="black", fontcolor="black", label=<{TestLogUnitStrings|<br ALIGN="LEFT"/>|test_str()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.tests.test_lupton_rgb.TestLuptonRgb" [color="black", fontcolor="black", label=<{TestLuptonRgb|Q : int<br ALIGN="LEFT"/>height : int<br ALIGN="LEFT"/>image_b<br ALIGN="LEFT"/>image_g<br ALIGN="LEFT"/>image_r<br ALIGN="LEFT"/>imagesR<br ALIGN="LEFT"/>min_ : int<br ALIGN="LEFT"/>stretch_ : int<br ALIGN="LEFT"/>width : int<br ALIGN="LEFT"/>|setup_method(method)<br ALIGN="LEFT"/>test_Asinh()<br ALIGN="LEFT"/>test_AsinhZscale()<br ALIGN="LEFT"/>test_AsinhZscaleIntensity()<br ALIGN="LEFT"/>test_AsinhZscaleIntensityBW()<br ALIGN="LEFT"/>test_AsinhZscale_incorrect_input_asserts()<br ALIGN="LEFT"/>test_AsinhZscale_incorrect_input_nonimage_asserts()<br ALIGN="LEFT"/>test_AsinhZscale_pedestal_array()<br ALIGN="LEFT"/>test_AsinhZscale_pedestal_float()<br ALIGN="LEFT"/>test_AsinhZscale_pedestal_incorrect_assert()<br ALIGN="LEFT"/>test_Asinh_Q_ceil()<br ALIGN="LEFT"/>test_Asinh_Q_machine_floor()<br ALIGN="LEFT"/>test_Asinh_incorrect_Q_asserts()<br ALIGN="LEFT"/>test_Asinh_incorrect_stretch_asserts()<br ALIGN="LEFT"/>test_different_shapes_asserts()<br ALIGN="LEFT"/>test_incorrect_input_compute_intensity_asserts()<br ALIGN="LEFT"/>test_linear()<br ALIGN="LEFT"/>test_make_rgb(tmp_path)<br ALIGN="LEFT"/>test_make_rgb_incorrect_min_input()<br ALIGN="LEFT"/>test_make_rgb_saturated_fix(tmp_path)<br ALIGN="LEFT"/>test_saturated()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_shape_manipulation.TestManipulation" [color="black", fontcolor="black", label=<{TestManipulation|location<br ALIGN="LEFT"/>obsgeoloc<br ALIGN="LEFT"/>obsgeovel<br ALIGN="LEFT"/>obstime<br ALIGN="LEFT"/>pressure<br ALIGN="LEFT"/>s0<br ALIGN="LEFT"/>s1<br ALIGN="LEFT"/>s2<br ALIGN="LEFT"/>s3<br ALIGN="LEFT"/>sc<br ALIGN="LEFT"/>temperature<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_add_dimension(method)<br ALIGN="LEFT"/>test_broadcast_to()<br ALIGN="LEFT"/>test_diagonal()<br ALIGN="LEFT"/>test_flatten()<br ALIGN="LEFT"/>test_getitem0101()<br ALIGN="LEFT"/>test_ravel()<br ALIGN="LEFT"/>test_reshape()<br ALIGN="LEFT"/>test_squeeze()<br ALIGN="LEFT"/>test_swapaxes()<br ALIGN="LEFT"/>test_take()<br ALIGN="LEFT"/>test_transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_methods.TestManipulation" [color="black", fontcolor="black", label=<{TestManipulation|<br ALIGN="LEFT"/>|test_add_dimension()<br ALIGN="LEFT"/>test_broadcast_to_via_apply()<br ALIGN="LEFT"/>test_copy(method)<br ALIGN="LEFT"/>test_diagonal()<br ALIGN="LEFT"/>test_flatten()<br ALIGN="LEFT"/>test_ravel(method)<br ALIGN="LEFT"/>test_reshape()<br ALIGN="LEFT"/>test_squeeze()<br ALIGN="LEFT"/>test_swapaxes(method)<br ALIGN="LEFT"/>test_take(method)<br ALIGN="LEFT"/>test_transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_methods.TestManipulation" [color="black", fontcolor="black", label=<{TestManipulation|<br ALIGN="LEFT"/>|test_add_dimension(use_mask)<br ALIGN="LEFT"/>test_broadcast_via_apply(use_mask)<br ALIGN="LEFT"/>test_diagonal(use_mask)<br ALIGN="LEFT"/>test_flatten(use_mask)<br ALIGN="LEFT"/>test_ravel(use_mask)<br ALIGN="LEFT"/>test_reshape(use_mask)<br ALIGN="LEFT"/>test_squeeze(use_mask)<br ALIGN="LEFT"/>test_swapaxes(use_mask)<br ALIGN="LEFT"/>test_take(use_mask)<br ALIGN="LEFT"/>test_transpose(use_mask)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.tests.test_wcs.TestMaps" [color="black", fontcolor="black", label=<{TestMaps|<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_consistency()<br ALIGN="LEFT"/>test_maps()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskSetting" [color="black", fontcolor="black", label=<{TestMaskSetting|<br ALIGN="LEFT"/>|test_part_mask_setting(item)<br ALIGN="LEFT"/>test_part_mask_setting_structured(item)<br ALIGN="LEFT"/>test_whole_mask_setting_simple()<br ALIGN="LEFT"/>test_whole_mask_setting_structured()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestMaskedArrayBroadcast" [color="black", fontcolor="black", label=<{TestMaskedArrayBroadcast|<br ALIGN="LEFT"/>|test_broadcast_arrays()<br ALIGN="LEFT"/>test_broadcast_arrays_not_all_masked()<br ALIGN="LEFT"/>test_broadcast_arrays_subok_false()<br ALIGN="LEFT"/>test_broadcast_to()<br ALIGN="LEFT"/>test_broadcast_to_using_apply()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestMaskedArrayCalculation" [color="black", fontcolor="black", label=<{TestMaskedArrayCalculation|<br ALIGN="LEFT"/>|test_diff(n, axis)<br ALIGN="LEFT"/>test_diff_explicit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestMaskedArrayConcatenation" [color="black", fontcolor="black", label=<{TestMaskedArrayConcatenation|<br ALIGN="LEFT"/>|test_append()<br ALIGN="LEFT"/>test_concatenate()<br ALIGN="LEFT"/>test_concatenate_not_all_masked()<br ALIGN="LEFT"/>test_insert(obj)<br ALIGN="LEFT"/>test_insert_masked_obj()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayCopyFilled" [color="black", fontcolor="black", label=<{TestMaskedArrayCopyFilled|<br ALIGN="LEFT"/>|test_copy()<br ALIGN="LEFT"/>test_filled(fill_value)<br ALIGN="LEFT"/>test_filled_no_fill_value()<br ALIGN="LEFT"/>test_filled_structured(fill_value)<br ALIGN="LEFT"/>test_flat()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayInitialization" [color="black", fontcolor="black", label=<{TestMaskedArrayInitialization|<br ALIGN="LEFT"/>|test_masked_input()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>test_structured()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayInteractionWithNumpyMA" [color="black", fontcolor="black", label=<{TestMaskedArrayInteractionWithNumpyMA|<br ALIGN="LEFT"/>|test_masked_array_from_masked()<br ALIGN="LEFT"/>test_view_as_masked_array()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayItems" [color="black", fontcolor="black", label=<{TestMaskedArrayItems|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_getitem_strings()<br ALIGN="LEFT"/>test_setitem_strings_np_ma_masked()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayMethods" [color="black", fontcolor="black", label=<{TestMaskedArrayMethods|<br ALIGN="LEFT"/>|test_all_and_any(array, axis, method)<br ALIGN="LEFT"/>test_all_and_any_where(method, axis)<br ALIGN="LEFT"/>test_all_explicit()<br ALIGN="LEFT"/>test_any_inplace()<br ALIGN="LEFT"/>test_argmax(axis)<br ALIGN="LEFT"/>test_argmax_keepdims()<br ALIGN="LEFT"/>test_argmin(axis)<br ALIGN="LEFT"/>test_argmin_keepdims()<br ALIGN="LEFT"/>test_argmin_only_one_unmasked_element()<br ALIGN="LEFT"/>test_argpartition(kth)<br ALIGN="LEFT"/>test_argsort(axis)<br ALIGN="LEFT"/>test_argsort_error()<br ALIGN="LEFT"/>test_clip()<br ALIGN="LEFT"/>test_clip_masked_min_max()<br ALIGN="LEFT"/>test_cumsum(axis)<br ALIGN="LEFT"/>test_diagonal(offset)<br ALIGN="LEFT"/>test_max(axis)<br ALIGN="LEFT"/>test_max_where(axis)<br ALIGN="LEFT"/>test_mean(axis)<br ALIGN="LEFT"/>test_mean_all_masked(axis)<br ALIGN="LEFT"/>test_mean_float16()<br ALIGN="LEFT"/>test_mean_hash()<br ALIGN="LEFT"/>test_mean_inplace()<br ALIGN="LEFT"/>test_mean_int16()<br ALIGN="LEFT"/>test_mean_where(axis)<br ALIGN="LEFT"/>test_min(axis)<br ALIGN="LEFT"/>test_min_where(axis)<br ALIGN="LEFT"/>test_min_with_masked_nan()<br ALIGN="LEFT"/>test_partition(kth)<br ALIGN="LEFT"/>test_round()<br ALIGN="LEFT"/>test_sort(axis)<br ALIGN="LEFT"/>test_std()<br ALIGN="LEFT"/>test_std_inplace()<br ALIGN="LEFT"/>test_std_where(axis)<br ALIGN="LEFT"/>test_structured_argsort(axis, order)<br ALIGN="LEFT"/>test_sum(axis)<br ALIGN="LEFT"/>test_sum_hash()<br ALIGN="LEFT"/>test_sum_where(axis)<br ALIGN="LEFT"/>test_trace(offset)<br ALIGN="LEFT"/>test_var(axis)<br ALIGN="LEFT"/>test_var_int16()<br ALIGN="LEFT"/>test_var_where(axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayOperators" [color="black", fontcolor="black", label=<{TestMaskedArrayOperators|<br ALIGN="LEFT"/>|test_equality_strings(op)<br ALIGN="LEFT"/>test_not_implemented()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayProductMethods" [color="black", fontcolor="black", label=<{TestMaskedArrayProductMethods|<br ALIGN="LEFT"/>|test_cumprod(axis)<br ALIGN="LEFT"/>test_prod(axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayRepr" [color="black", fontcolor="black", label=<{TestMaskedArrayRepr|<br ALIGN="LEFT"/>|test_array_repr()<br ALIGN="LEFT"/>test_array_str()<br ALIGN="LEFT"/>test_scalar_repr()<br ALIGN="LEFT"/>test_scalar_str()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayShaping" [color="black", fontcolor="black", label=<{TestMaskedArrayShaping|<br ALIGN="LEFT"/>|test_iter()<br ALIGN="LEFT"/>test_ravel()<br ALIGN="LEFT"/>test_reshape()<br ALIGN="LEFT"/>test_shape_setting()<br ALIGN="LEFT"/>test_shape_setting_failure()<br ALIGN="LEFT"/>test_transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestMaskedArraySorting" [color="black", fontcolor="black", label=<{TestMaskedArraySorting|<br ALIGN="LEFT"/>|test_lexsort1(axis)<br ALIGN="LEFT"/>test_lexsort2(axis)<br ALIGN="LEFT"/>test_lexsort_mix(axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_table.TestMaskedArrayTable" [color="black", fontcolor="black", label=<{TestMaskedArrayTable|<br ALIGN="LEFT"/>|test_info_basics()<br ALIGN="LEFT"/>test_non_existing_serialize_method(tmp_path)<br ALIGN="LEFT"/>test_table_initialization()<br ALIGN="LEFT"/>test_table_write(file_format, tmp_path)<br ALIGN="LEFT"/>test_table_write_serialization(serialize_method, tmp_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestMaskedArrayUfuncs" [color="black", fontcolor="black", label=<{TestMaskedArrayUfuncs|<br ALIGN="LEFT"/>|test_multiply_reduce(axis)<br ALIGN="LEFT"/>test_ufunc_not_implemented_for_other()<br ALIGN="LEFT"/>test_ufunc_two_out()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedClassCreation" [color="black", fontcolor="black", label=<{TestMaskedClassCreation|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>test_from_list()<br ALIGN="LEFT"/>test_masked_list()<br ALIGN="LEFT"/>test_masked_list_subclass()<br ALIGN="LEFT"/>test_setup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_masked.TestMaskedColumnInit" [color="black", fontcolor="black", label=<{TestMaskedColumnInit|<br ALIGN="LEFT"/>|test_incomplete_mask_spec()<br ALIGN="LEFT"/>test_override_existing_mask()<br ALIGN="LEFT"/>test_set_mask_and_not_ref()<br ALIGN="LEFT"/>test_set_mask_from_list()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestMaskedLongitudeBroadcast" [color="black", fontcolor="black", label=<{TestMaskedLongitudeBroadcast|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestMaskedLongitudeCalculation" [color="black", fontcolor="black", label=<{TestMaskedLongitudeCalculation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestMaskedLongitudeConcatenation" [color="black", fontcolor="black", label=<{TestMaskedLongitudeConcatenation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedLongitudeCopyFilled" [color="black", fontcolor="black", label=<{TestMaskedLongitudeCopyFilled|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedLongitudeItems" [color="black", fontcolor="black", label=<{TestMaskedLongitudeItems|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedLongitudeMethods" [color="black", fontcolor="black", label=<{TestMaskedLongitudeMethods|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedLongitudeOperators" [color="black", fontcolor="black", label=<{TestMaskedLongitudeOperators|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestMaskedLongitudeUfuncs" [color="black", fontcolor="black", label=<{TestMaskedLongitudeUfuncs|<br ALIGN="LEFT"/>|test_ufunc_inplace_quantity_initial()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedNDArraySubclassCreation" [color="black", fontcolor="black", label=<{TestMaskedNDArraySubclassCreation|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>teardown_method(method)<br ALIGN="LEFT"/>test_can_initialize_with_masked_values()<br ALIGN="LEFT"/>test_direct_creation()<br ALIGN="LEFT"/>test_indirect_creation()<br ALIGN="LEFT"/>test_initialization_with_masked_values(masked_array)<br ALIGN="LEFT"/>test_initialization_without_mask()<br ALIGN="LEFT"/>test_viewing()<br ALIGN="LEFT"/>test_viewing_independent_shape()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestMaskedQuantityBroadcast" [color="black", fontcolor="black", label=<{TestMaskedQuantityBroadcast|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestMaskedQuantityCalculation" [color="black", fontcolor="black", label=<{TestMaskedQuantityCalculation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestMaskedQuantityConcatenation" [color="black", fontcolor="black", label=<{TestMaskedQuantityConcatenation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityCopyFilled" [color="black", fontcolor="black", label=<{TestMaskedQuantityCopyFilled|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityInitialization" [color="black", fontcolor="black", label=<{TestMaskedQuantityInitialization|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_initialization_with_list_of_masked_quantity_arrays()<br ALIGN="LEFT"/>test_initialization_with_list_of_masked_quantity_scalars()<br ALIGN="LEFT"/>test_initialization_with_masked_values(masked_array)<br ALIGN="LEFT"/>test_initialization_without_mask()<br ALIGN="LEFT"/>test_masked_quantity_class_init()<br ALIGN="LEFT"/>test_masked_quantity_getting()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityInteractionWithNumpyMA" [color="black", fontcolor="black", label=<{TestMaskedQuantityInteractionWithNumpyMA|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityItems" [color="black", fontcolor="black", label=<{TestMaskedQuantityItems|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityMethods" [color="black", fontcolor="black", label=<{TestMaskedQuantityMethods|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityOperators" [color="black", fontcolor="black", label=<{TestMaskedQuantityOperators|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityRepr" [color="black", fontcolor="black", label=<{TestMaskedQuantityRepr|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_table.TestMaskedQuantityTable" [color="black", fontcolor="black", label=<{TestMaskedQuantityTable|<br ALIGN="LEFT"/>|test_table_operations_requiring_masking()<br ALIGN="LEFT"/>test_table_operations_requiring_masking_auto_promote()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestMaskedQuantityUfuncs" [color="black", fontcolor="black", label=<{TestMaskedQuantityUfuncs|<br ALIGN="LEFT"/>|test_ufunc_inplace_error2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestMaskedRecarray" [color="black", fontcolor="black", label=<{TestMaskedRecarray|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_recarray_field_getting(attr)<br ALIGN="LEFT"/>test_recarray_field_setting(attr)<br ALIGN="LEFT"/>test_recarray_repr()<br ALIGN="LEFT"/>test_recarray_represent_as_dict()<br ALIGN="LEFT"/>test_recarray_setting()<br ALIGN="LEFT"/>test_recarray_setup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestMemoryFunctions" [color="black", fontcolor="black", label=<{TestMemoryFunctions|<br ALIGN="LEFT"/>|test_may_share_memory()<br ALIGN="LEFT"/>test_shares_memory()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestMemoryFunctions" [color="black", fontcolor="black", label=<{TestMemoryFunctions|<br ALIGN="LEFT"/>|test_may_share_memory()<br ALIGN="LEFT"/>test_shares_memory()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestMeshGrid" [color="black", fontcolor="black", label=<{TestMeshGrid|<br ALIGN="LEFT"/>|test_meshgrid()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestMeshGrid" [color="black", fontcolor="black", label=<{TestMeshGrid|<br ALIGN="LEFT"/>|test_meshgrid()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_column.TestMetaColumn" [color="black", fontcolor="black", label=<{TestMetaColumn|args : tuple<br ALIGN="LEFT"/>test_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.tests.test_metadata.TestMetaExampleData" [color="black", fontcolor="black", label=<{TestMetaExampleData|args : tuple<br ALIGN="LEFT"/>test_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.tests.test_metadata.TestMetaExampleDataclass" [color="black", fontcolor="black", label=<{TestMetaExampleDataclass|args : tuple<br ALIGN="LEFT"/>test_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.metadata.tests.test_metadata.TestMetaExampleFrozenDataclass" [color="black", fontcolor="black", label=<{TestMetaExampleFrozenDataclass|args : tuple<br ALIGN="LEFT"/>test_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_column.TestMetaMaskedColumn" [color="black", fontcolor="black", label=<{TestMetaMaskedColumn|args : tuple<br ALIGN="LEFT"/>test_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.tests.test_nddata.TestMetaNDData" [color="black", fontcolor="black", label=<{TestMetaNDData|args : ndarray<br ALIGN="LEFT"/>test_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestMetaTable" [color="black", fontcolor="black", label=<{TestMetaTable|args : tuple<br ALIGN="LEFT"/>test_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestMethodLikes" [color="black", fontcolor="black", label=<{TestMethodLikes|<br ALIGN="LEFT"/>|check(function)<br ALIGN="LEFT"/>test_all()<br ALIGN="LEFT"/>test_alltrue()<br ALIGN="LEFT"/>test_amax()<br ALIGN="LEFT"/>test_amin()<br ALIGN="LEFT"/>test_any()<br ALIGN="LEFT"/>test_around()<br ALIGN="LEFT"/>test_clip()<br ALIGN="LEFT"/>test_cumprod()<br ALIGN="LEFT"/>test_cumproduct()<br ALIGN="LEFT"/>test_cumsum()<br ALIGN="LEFT"/>test_max()<br ALIGN="LEFT"/>test_mean()<br ALIGN="LEFT"/>test_min()<br ALIGN="LEFT"/>test_prod()<br ALIGN="LEFT"/>test_product()<br ALIGN="LEFT"/>test_round()<br ALIGN="LEFT"/>test_round_()<br ALIGN="LEFT"/>test_sometrue()<br ALIGN="LEFT"/>test_std()<br ALIGN="LEFT"/>test_sum()<br ALIGN="LEFT"/>test_var()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_core.test_inputless_model.TestModel" [color="black", fontcolor="black", label=<{TestModel|a<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>|evaluate(a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_core.test_custom_inverse_reset.TestModel" [color="black", fontcolor="black", label=<{TestModel|inverse<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>|evaluate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_parameters.test_non_broadcasting_parameters.TestModel" [color="black", fontcolor="black", label=<{TestModel|p1<br ALIGN="LEFT"/>p2<br ALIGN="LEFT"/>p3<br ALIGN="LEFT"/>|evaluate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_quantities_parameters.test_parameter_defaults.TestModel" [color="black", fontcolor="black", label=<{TestModel|a<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_bounding_box.TestModelBoundingBox" [color="black", fontcolor="black", label=<{TestModelBoundingBox|<br ALIGN="LEFT"/>|test___contains__()<br ALIGN="LEFT"/>test___delitem__()<br ALIGN="LEFT"/>test___eq__()<br ALIGN="LEFT"/>test___getitem__()<br ALIGN="LEFT"/>test___len__()<br ALIGN="LEFT"/>test___repr__()<br ALIGN="LEFT"/>test__n_inputs()<br ALIGN="LEFT"/>test__outside()<br ALIGN="LEFT"/>test__setitem__()<br ALIGN="LEFT"/>test__valid_index()<br ALIGN="LEFT"/>test__validate()<br ALIGN="LEFT"/>test__validate_dict()<br ALIGN="LEFT"/>test__validate_iterable()<br ALIGN="LEFT"/>test__validate_sequence()<br ALIGN="LEFT"/>test_bounding_box()<br ALIGN="LEFT"/>test_bounding_box_ignore()<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>test_create()<br ALIGN="LEFT"/>test_dimension()<br ALIGN="LEFT"/>test_domain()<br ALIGN="LEFT"/>test_fix_inputs()<br ALIGN="LEFT"/>test_intervals()<br ALIGN="LEFT"/>test_named_intervals()<br ALIGN="LEFT"/>test_prepare_inputs()<br ALIGN="LEFT"/>test_validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_sidereal.TestModelInterpretation" [color="black", fontcolor="black", label=<{TestModelInterpretation|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>test_model_uniqueness(kind)<br ALIGN="LEFT"/>test_wrong_models_raise_exceptions(kind, other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_pprint.TestMultiD" [color="black", fontcolor="black", label=<{TestMultiD|<br ALIGN="LEFT"/>|test_fake_multidim(table_type)<br ALIGN="LEFT"/>test_multidim(table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_connect.TestMultipleHDU" [color="black", fontcolor="black", label=<{TestMultipleHDU|data1 : ndarray<br ALIGN="LEFT"/>data2 : ndarray<br ALIGN="LEFT"/>data3 : ndarray<br ALIGN="LEFT"/>hdus<br ALIGN="LEFT"/>hdus1<br ALIGN="LEFT"/>hdus2<br ALIGN="LEFT"/>hdus3<br ALIGN="LEFT"/>hdusb<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>setup_method(method)<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>test_read(tmp_path)<br ALIGN="LEFT"/>test_read_from_hdulist()<br ALIGN="LEFT"/>test_read_from_hdulist_in_last_hdu(hdu)<br ALIGN="LEFT"/>test_read_from_hdulist_with_hdu_0()<br ALIGN="LEFT"/>test_read_from_hdulist_with_hdu_1(hdu)<br ALIGN="LEFT"/>test_read_from_hdulist_with_hdu_2(hdu)<br ALIGN="LEFT"/>test_read_from_hdulist_with_hdu_3(hdu)<br ALIGN="LEFT"/>test_read_from_hdulist_with_hdu_missing(hdu)<br ALIGN="LEFT"/>test_read_from_hdulist_with_hdu_warning(hdu)<br ALIGN="LEFT"/>test_read_from_hdulist_with_single_table(hdu)<br ALIGN="LEFT"/>test_read_from_single_hdu(hdu)<br ALIGN="LEFT"/>test_read_in_last_hdu(tmp_path, hdu)<br ALIGN="LEFT"/>test_read_with_hdu_0(tmp_path)<br ALIGN="LEFT"/>test_read_with_hdu_1(tmp_path, hdu)<br ALIGN="LEFT"/>test_read_with_hdu_2(tmp_path, hdu)<br ALIGN="LEFT"/>test_read_with_hdu_3(tmp_path, hdu)<br ALIGN="LEFT"/>test_read_with_hdu_4(tmp_path)<br ALIGN="LEFT"/>test_read_with_hdu_missing(tmp_path, hdu)<br ALIGN="LEFT"/>test_read_with_hdu_warning(tmp_path, hdu)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_parameters.TestMultipleParameterSets" [color="black", fontcolor="black", label=<{TestMultipleParameterSets|gmodel<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>x1<br ALIGN="LEFT"/>x11 : ndarray<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_change_par()<br ALIGN="LEFT"/>test_change_par2()<br ALIGN="LEFT"/>test_change_parameters()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestNaNFunctions" [color="black", fontcolor="black", label=<{TestNaNFunctions|a : ndarray<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>ma<br ALIGN="LEFT"/>mask_a : ndarray<br ALIGN="LEFT"/>mask_b : ndarray<br ALIGN="LEFT"/>mb<br ALIGN="LEFT"/>|check(function, exact_fill_value, masked_result)<br ALIGN="LEFT"/>check_arg(function)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test_nanargmax()<br ALIGN="LEFT"/>test_nanargmin()<br ALIGN="LEFT"/>test_nancumprod()<br ALIGN="LEFT"/>test_nancumsum()<br ALIGN="LEFT"/>test_nanmax()<br ALIGN="LEFT"/>test_nanmean()<br ALIGN="LEFT"/>test_nanmedian()<br ALIGN="LEFT"/>test_nanmin()<br ALIGN="LEFT"/>test_nanpercentile()<br ALIGN="LEFT"/>test_nanprod()<br ALIGN="LEFT"/>test_nanquantile()<br ALIGN="LEFT"/>test_nanstd()<br ALIGN="LEFT"/>test_nansum()<br ALIGN="LEFT"/>test_nanvar()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestNanFunctions" [color="black", fontcolor="black", label=<{TestNanFunctions|<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_nanargmax()<br ALIGN="LEFT"/>test_nanargmin()<br ALIGN="LEFT"/>test_nancumprod()<br ALIGN="LEFT"/>test_nancumsum()<br ALIGN="LEFT"/>test_nanmax()<br ALIGN="LEFT"/>test_nanmean()<br ALIGN="LEFT"/>test_nanmedian(axis)<br ALIGN="LEFT"/>test_nanmedian_out()<br ALIGN="LEFT"/>test_nanmin()<br ALIGN="LEFT"/>test_nanpercentile()<br ALIGN="LEFT"/>test_nanprod()<br ALIGN="LEFT"/>test_nanquantile()<br ALIGN="LEFT"/>test_nanstd()<br ALIGN="LEFT"/>test_nanstd_out(out_init)<br ALIGN="LEFT"/>test_nansum()<br ALIGN="LEFT"/>test_nanvar()<br ALIGN="LEFT"/>test_nanvar_out(out_init)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestNewFromColumns" [color="black", fontcolor="black", label=<{TestNewFromColumns|<br ALIGN="LEFT"/>|test_from_np_array(table_types)<br ALIGN="LEFT"/>test_name_none(table_types)<br ALIGN="LEFT"/>test_simple(table_types)<br ALIGN="LEFT"/>test_size_mismatch(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_constraints.TestNonLinearConstraints" [color="black", fontcolor="black", label=<{TestNonLinearConstraints|g1<br ALIGN="LEFT"/>g2<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>ny1<br ALIGN="LEFT"/>ny2<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y1<br ALIGN="LEFT"/>y2<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_fixed_par(fitter)<br ALIGN="LEFT"/>test_joint_fitter()<br ALIGN="LEFT"/>test_no_constraints(fitter)<br ALIGN="LEFT"/>test_tied_par(fitter)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitters.TestNonLinearFitters" [color="black", fontcolor="black", label=<{TestNonLinearFitters|gauss<br ALIGN="LEFT"/>initial_values : list<br ALIGN="LEFT"/>xdata<br ALIGN="LEFT"/>ydata<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_LSQ_SLSQP_with_constraints(fitter)<br ALIGN="LEFT"/>test_estimated_vs_analytic_deriv(fitter0, fitter1)<br ALIGN="LEFT"/>test_estimated_vs_analytic_deriv_with_weights(fitter0, fitter1)<br ALIGN="LEFT"/>test_fitter_against_LevMar(fitter_class, fitter)<br ALIGN="LEFT"/>test_non_linear_lsq_fitter_with_weights(fitter)<br ALIGN="LEFT"/>test_param_cov(fitter)<br ALIGN="LEFT"/>test_param_cov_with_uncertainties(fitter)<br ALIGN="LEFT"/>test_simplex_lsq_fitter()<br ALIGN="LEFT"/>test_with_optimize(fitter)<br ALIGN="LEFT"/>test_with_weights(fitter)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_nonstandard.TestNonstandardHdus" [color="black", fontcolor="black", label=<{TestNonstandardHdus|<br ALIGN="LEFT"/>|test_create_fitshdu()<br ALIGN="LEFT"/>test_create_fitshdu_from_filename()<br ALIGN="LEFT"/>test_create_fitshdu_with_compression()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.tests.test_norm.TestNormalize" [color="black", fontcolor="black", label=<{TestNormalize|<br ALIGN="LEFT"/>|test_call_clip()<br ALIGN="LEFT"/>test_clip()<br ALIGN="LEFT"/>test_implicit_autoscale()<br ALIGN="LEFT"/>test_invalid_data()<br ALIGN="LEFT"/>test_invalid_interval()<br ALIGN="LEFT"/>test_invalid_keyword(stretch)<br ALIGN="LEFT"/>test_invalid_stretch()<br ALIGN="LEFT"/>test_invalid_vmin_vmax()<br ALIGN="LEFT"/>test_masked_clip()<br ALIGN="LEFT"/>test_masked_noclip()<br ALIGN="LEFT"/>test_noclip()<br ALIGN="LEFT"/>test_scalar()<br ALIGN="LEFT"/>test_stretch_none()<br ALIGN="LEFT"/>test_vmin_vmax_equal()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_basic.TestNumericalSubFormat" [color="black", fontcolor="black", label=<{TestNumericalSubFormat|<br ALIGN="LEFT"/>|test_basic_subformat_cache_does_not_crash()<br ALIGN="LEFT"/>test_basic_subformat_setting()<br ALIGN="LEFT"/>test_decimal_context_caching()<br ALIGN="LEFT"/>test_decimal_context_does_not_affect_string(fmt)<br ALIGN="LEFT"/>test_explicit_example()<br ALIGN="LEFT"/>test_explicit_longdouble()<br ALIGN="LEFT"/>test_explicit_longdouble_one_val()<br ALIGN="LEFT"/>test_explicit_string_other_formats(fmt, string, val1, val2)<br ALIGN="LEFT"/>test_longdouble_for_other_types(fmt)<br ALIGN="LEFT"/>test_need_format_argument()<br ALIGN="LEFT"/>test_not_allowed_subfmt()<br ALIGN="LEFT"/>test_subformat_input()<br ALIGN="LEFT"/>test_subformat_output(out_subfmt)<br ALIGN="LEFT"/>test_subformat_output_not_always_preserved()<br ALIGN="LEFT"/>test_switch_to_format_with_no_out_subfmt()<br ALIGN="LEFT"/>test_timedelta_basic(f, s, t)<br ALIGN="LEFT"/>test_wrong_in_subfmt()<br ALIGN="LEFT"/>test_wrong_subfmt()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestOuterLikeFunctions" [color="black", fontcolor="black", label=<{TestOuterLikeFunctions|<br ALIGN="LEFT"/>|test_kron()<br ALIGN="LEFT"/>test_outer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_erfa_ufuncs.TestPVUfuncs" [color="black", fontcolor="black", label=<{TestPVUfuncs|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_cpv()<br ALIGN="LEFT"/>test_p2pv()<br ALIGN="LEFT"/>test_p2pv_inplace()<br ALIGN="LEFT"/>test_pv2p()<br ALIGN="LEFT"/>test_pv2s()<br ALIGN="LEFT"/>test_pv2s_non_standard_names_and_units()<br ALIGN="LEFT"/>test_pv2s_non_standard_units()<br ALIGN="LEFT"/>test_pvdpv()<br ALIGN="LEFT"/>test_pvm()<br ALIGN="LEFT"/>test_pvmpv()<br ALIGN="LEFT"/>test_pvppv()<br ALIGN="LEFT"/>test_pvstar()<br ALIGN="LEFT"/>test_pvtob()<br ALIGN="LEFT"/>test_pvu()<br ALIGN="LEFT"/>test_pvup()<br ALIGN="LEFT"/>test_pvxpv()<br ALIGN="LEFT"/>test_rxpv(r)<br ALIGN="LEFT"/>test_s2p_not_all_quantity()<br ALIGN="LEFT"/>test_s2pv()<br ALIGN="LEFT"/>test_s2xpv()<br ALIGN="LEFT"/>test_starpv()<br ALIGN="LEFT"/>test_sxpv()<br ALIGN="LEFT"/>test_trxpv(r)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestPandas" [color="black", fontcolor="black", label=<{TestPandas|<br ALIGN="LEFT"/>|test_2d()<br ALIGN="LEFT"/>test_from_pandas_index()<br ALIGN="LEFT"/>test_masking(use_nullable_int)<br ALIGN="LEFT"/>test_mixin_pandas()<br ALIGN="LEFT"/>test_mixin_pandas_masked()<br ALIGN="LEFT"/>test_nullable_int(unsigned, bits)<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>test_to_pandas_index(use_IndexedTable)<br ALIGN="LEFT"/>test_to_pandas_masked_int_data_with__index()<br ALIGN="LEFT"/>test_units()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.parameter.test_parameter.TestParameter" [color="black", fontcolor="black", label=<{TestParameter|classes : dict<br ALIGN="LEFT"/>|cosmo(cosmo_cls)<br ALIGN="LEFT"/>cosmo_cls(request)<br ALIGN="LEFT"/>param(cosmo_cls)<br ALIGN="LEFT"/>param_cls(param)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>test_Parameter_clone(param)<br ALIGN="LEFT"/>test_Parameter_derived(cosmo_cls, param)<br ALIGN="LEFT"/>test_Parameter_descriptor_get(cosmo_cls, cosmo, param)<br ALIGN="LEFT"/>test_Parameter_equality()<br ALIGN="LEFT"/>test_Parameter_equivalencies(param)<br ALIGN="LEFT"/>test_Parameter_fvalidate(cosmo, param)<br ALIGN="LEFT"/>test_Parameter_instance_attributes(param)<br ALIGN="LEFT"/>test_Parameter_name(param)<br ALIGN="LEFT"/>test_Parameter_register_validator(param_cls)<br ALIGN="LEFT"/>test_Parameter_repr(cosmo_cls, param)<br ALIGN="LEFT"/>test_Parameter_repr_roundtrip(param)<br ALIGN="LEFT"/>test_Parameter_unit(param)<br ALIGN="LEFT"/>test_Parameter_validate(cosmo, param)<br ALIGN="LEFT"/>test_Parameter_validator(param)<br ALIGN="LEFT"/>test_make_from_Parameter(cosmo_cls, clean_registry)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_parameters.TestParameterInitialization" [color="black", fontcolor="black", label=<{TestParameterInitialization|<br ALIGN="LEFT"/>|test_array_parameter1()<br ALIGN="LEFT"/>test_array_parameter2()<br ALIGN="LEFT"/>test_array_parameter4()<br ALIGN="LEFT"/>test_single_model_1d_array_different_length_parameters()<br ALIGN="LEFT"/>test_single_model_1d_array_parameters()<br ALIGN="LEFT"/>test_single_model_2d_array_parameters()<br ALIGN="LEFT"/>test_single_model_2d_broadcastable_parameters()<br ALIGN="LEFT"/>test_single_model_2d_non_square_parameters()<br ALIGN="LEFT"/>test_single_model_scalar_and_array_parameters()<br ALIGN="LEFT"/>test_single_model_scalar_parameters()<br ALIGN="LEFT"/>test_two_model_1d_array_parameters()<br ALIGN="LEFT"/>test_two_model_2d_array_parameters()<br ALIGN="LEFT"/>test_two_model_incorrect_scalar_parameters(p1, p2)<br ALIGN="LEFT"/>test_two_model_mixed_dimension_array_parameters()<br ALIGN="LEFT"/>test_two_model_nonzero_model_set_axis()<br ALIGN="LEFT"/>test_two_model_scalar_and_array_parameters(kwargs)<br ALIGN="LEFT"/>test_two_model_scalar_parameters(kwargs)<br ALIGN="LEFT"/>test_wrong_number_of_params()<br ALIGN="LEFT"/>test_wrong_number_of_params2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_parameters.TestParameters" [color="black", fontcolor="black", label=<{TestParameters|gmodel<br ALIGN="LEFT"/>icoeff<br ALIGN="LEFT"/>linear_fitter<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>yy : ndarray<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>testPolynomial1D()<br ALIGN="LEFT"/>test__create_value_wrapper()<br ALIGN="LEFT"/>test__set_unit()<br ALIGN="LEFT"/>test_bool()<br ALIGN="LEFT"/>test_bounds()<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>test_fixed()<br ALIGN="LEFT"/>test_getter_setter()<br ALIGN="LEFT"/>test_model()<br ALIGN="LEFT"/>test_modify_value()<br ALIGN="LEFT"/>test_par_against_iraf()<br ALIGN="LEFT"/>test_par_slicing()<br ALIGN="LEFT"/>test_param_repr_oneline()<br ALIGN="LEFT"/>test_poly1d_multiple_sets()<br ALIGN="LEFT"/>test_poly2d()<br ALIGN="LEFT"/>test_poly2d_multiple_sets()<br ALIGN="LEFT"/>test_quantity()<br ALIGN="LEFT"/>test_raw_value()<br ALIGN="LEFT"/>test_scale_model_parametersnd()<br ALIGN="LEFT"/>test_set_as_tuple()<br ALIGN="LEFT"/>test_set_item()<br ALIGN="LEFT"/>test_set_model_attr_num()<br ALIGN="LEFT"/>test_set_model_attr_seq()<br ALIGN="LEFT"/>test_set_parameters_as_array()<br ALIGN="LEFT"/>test_set_parameters_as_list()<br ALIGN="LEFT"/>test_shape()<br ALIGN="LEFT"/>test_shift_model_parameters1d()<br ALIGN="LEFT"/>test_size()<br ALIGN="LEFT"/>test_std()<br ALIGN="LEFT"/>test_tied()<br ALIGN="LEFT"/>test_validate()<br ALIGN="LEFT"/>test_validator()<br ALIGN="LEFT"/>test_value()<br ALIGN="LEFT"/>test_wrong_shape()<br ALIGN="LEFT"/>test_wrong_size1()<br ALIGN="LEFT"/>test_wrong_size2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.parameter.test_descriptors.TestParametersAttribute" [color="black", fontcolor="black", label=<{TestParametersAttribute|<br ALIGN="LEFT"/>|test_descriptor_attr_name_not_str(): None<br ALIGN="LEFT"/>test_get_from_class(): None<br ALIGN="LEFT"/>test_get_from_instance(): None<br ALIGN="LEFT"/>test_init(): None<br ALIGN="LEFT"/>test_set_from_instance(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tests.test_vo.TestParse" [color="black", fontcolor="black", label=<{TestParse|array<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>votable<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_array()<br ALIGN="LEFT"/>test_bit()<br ALIGN="LEFT"/>test_bit_array2()<br ALIGN="LEFT"/>test_bit_array2_mask()<br ALIGN="LEFT"/>test_bit_mask()<br ALIGN="LEFT"/>test_bitarray()<br ALIGN="LEFT"/>test_bitarray_mask()<br ALIGN="LEFT"/>test_bitvararray()<br ALIGN="LEFT"/>test_bitvararray2()<br ALIGN="LEFT"/>test_boolean()<br ALIGN="LEFT"/>test_boolean_array()<br ALIGN="LEFT"/>test_boolean_array_mask()<br ALIGN="LEFT"/>test_boolean_mask()<br ALIGN="LEFT"/>test_double()<br ALIGN="LEFT"/>test_doubleComplex()<br ALIGN="LEFT"/>test_doubleComplexArray()<br ALIGN="LEFT"/>test_double_array()<br ALIGN="LEFT"/>test_fixed_string_test()<br ALIGN="LEFT"/>test_fixed_unicode_test()<br ALIGN="LEFT"/>test_float()<br ALIGN="LEFT"/>test_floatComplex()<br ALIGN="LEFT"/>test_get_coosys_by_id()<br ALIGN="LEFT"/>test_get_field_by_utype()<br ALIGN="LEFT"/>test_get_info_by_id()<br ALIGN="LEFT"/>test_int()<br ALIGN="LEFT"/>test_long()<br ALIGN="LEFT"/>test_nulls()<br ALIGN="LEFT"/>test_nulls_array()<br ALIGN="LEFT"/>test_repr()<br ALIGN="LEFT"/>test_short()<br ALIGN="LEFT"/>test_string_test()<br ALIGN="LEFT"/>test_unicode_test()<br ALIGN="LEFT"/>test_unsignedByte()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestPartitionLikeFunctions" [color="black", fontcolor="black", label=<{TestPartitionLikeFunctions|<br ALIGN="LEFT"/>|check(function)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test_median(axis, keepdims)<br ALIGN="LEFT"/>test_percentile(axis)<br ALIGN="LEFT"/>test_quantile(axis, keepdims)<br ALIGN="LEFT"/>test_quantile_out_of_range()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_arithmetic.TestPhysicsSphericalDifferential" [color="black", fontcolor="black", label=<{TestPhysicsSphericalDifferential|e : dict<br ALIGN="LEFT"/>s<br ALIGN="LEFT"/>sf : dict<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_differential_init_errors()<br ALIGN="LEFT"/>test_name()<br ALIGN="LEFT"/>test_simple_differentials()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.TestPhysicsSphericalRepresentation" [color="black", fontcolor="black", label=<{TestPhysicsSphericalRepresentation|<br ALIGN="LEFT"/>|test_broadcasting()<br ALIGN="LEFT"/>test_broadcasting_mismatch()<br ALIGN="LEFT"/>test_empty_init()<br ALIGN="LEFT"/>test_getitem()<br ALIGN="LEFT"/>test_getitem_scalar()<br ALIGN="LEFT"/>test_init_array()<br ALIGN="LEFT"/>test_init_array_nocopy()<br ALIGN="LEFT"/>test_init_phitheta()<br ALIGN="LEFT"/>test_init_quantity()<br ALIGN="LEFT"/>test_initialize_with_nan()<br ALIGN="LEFT"/>test_name()<br ALIGN="LEFT"/>test_readonly()<br ALIGN="LEFT"/>test_representation_shortcuts()<br ALIGN="LEFT"/>test_reprobj()<br ALIGN="LEFT"/>test_to_cylindrical_at_the_origin()<br ALIGN="LEFT"/>test_transform()<br ALIGN="LEFT"/>test_transform_with_NaN()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_pickle.TestPickle" [color="black", fontcolor="black", label=<{TestPickle|<br ALIGN="LEFT"/>|test_cache_not_shared()<br ALIGN="LEFT"/>test_pickle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitters.TestPolynomial2D" [color="black", fontcolor="black", label=<{TestPolynomial2D|model<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_compare_nonlinear_fitting()<br ALIGN="LEFT"/>test_eval()<br ALIGN="LEFT"/>test_nonlinear_fitting(fitter)<br ALIGN="LEFT"/>test_poly2D_fitting()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_pprint.TestPprint" [color="black", fontcolor="black", label=<{TestPprint|tb<br ALIGN="LEFT"/>ts<br ALIGN="LEFT"/>|test_clip1(table_type)<br ALIGN="LEFT"/>test_clip2(table_type)<br ALIGN="LEFT"/>test_clip3(table_type)<br ALIGN="LEFT"/>test_clip4(table_type)<br ALIGN="LEFT"/>test_empty_table(table_type)<br ALIGN="LEFT"/>test_format0(table_type)<br ALIGN="LEFT"/>test_format1(table_type)<br ALIGN="LEFT"/>test_format2(table_type)<br ALIGN="LEFT"/>test_format3(table_type)<br ALIGN="LEFT"/>test_format4(table_type)<br ALIGN="LEFT"/>test_noclip(table_type)<br ALIGN="LEFT"/>test_pformat_all(table_type)<br ALIGN="LEFT"/>test_pprint_all(table_type, capsys)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_masked.TestPprint" [color="black", fontcolor="black", label=<{TestPprint|<br ALIGN="LEFT"/>|test_pformat()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_pprint.TestPprintColumn" [color="black", fontcolor="black", label=<{TestPprintColumn|<br ALIGN="LEFT"/>|test_pprint_scalar(scalar, exp)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestQTableColumnConversionCornerCases" [color="black", fontcolor="black", label=<{TestQTableColumnConversionCornerCases|<br ALIGN="LEFT"/>|test_do_not_replace_string_column_with_units_in_qtable()<br ALIGN="LEFT"/>test_replace_with_masked_col_with_units_in_qtable()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_array_methods.TestQuantityArrayCopy" [color="black", fontcolor="black", label=<{TestQuantityArrayCopy|<br ALIGN="LEFT"/>|test_copy_on_creation()<br ALIGN="LEFT"/>test_flat()<br ALIGN="LEFT"/>test_getitem_is_view()<br ALIGN="LEFT"/>test_si_copies()<br ALIGN="LEFT"/>test_to_copies()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.TestQuantityComparison" [color="black", fontcolor="black", label=<{TestQuantityComparison|<br ALIGN="LEFT"/>|test_quantity_comparison()<br ALIGN="LEFT"/>test_quantity_equality()<br ALIGN="LEFT"/>test_quantity_equality_array()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.TestQuantityCreation" [color="black", fontcolor="black", label=<{TestQuantityCreation|<br ALIGN="LEFT"/>|test_1()<br ALIGN="LEFT"/>test_2()<br ALIGN="LEFT"/>test_3()<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>test_creation_via_view()<br ALIGN="LEFT"/>test_float_dtype_promotion()<br ALIGN="LEFT"/>test_nan_inf()<br ALIGN="LEFT"/>test_ndmin()<br ALIGN="LEFT"/>test_non_quantity_with_unit()<br ALIGN="LEFT"/>test_numpy_style_dtype_inspect()<br ALIGN="LEFT"/>test_order()<br ALIGN="LEFT"/>test_preserve_dtype()<br ALIGN="LEFT"/>test_rshift_warns()<br ALIGN="LEFT"/>test_subok()<br ALIGN="LEFT"/>test_unit_property()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.TestQuantityDisplay" [color="black", fontcolor="black", label=<{TestQuantityDisplay|arr_complex_q<br ALIGN="LEFT"/>arrq<br ALIGN="LEFT"/>big_arr_complex_q<br ALIGN="LEFT"/>scalar_big_complex_q<br ALIGN="LEFT"/>scalar_big_neg_complex_q<br ALIGN="LEFT"/>scalar_complex_q<br ALIGN="LEFT"/>scalarfloatq<br ALIGN="LEFT"/>scalarintq<br ALIGN="LEFT"/>|test_array_quantity_repr()<br ALIGN="LEFT"/>test_array_quantity_str()<br ALIGN="LEFT"/>test_dimensionless_quantity_format()<br ALIGN="LEFT"/>test_dimensionless_quantity_repr()<br ALIGN="LEFT"/>test_dimensionless_quantity_str()<br ALIGN="LEFT"/>test_format_spec(quant, input_unit, format_spec, expected_result)<br ALIGN="LEFT"/>test_format_spec_latex(quant, input_unit, format_spec, format, expected_result)<br ALIGN="LEFT"/>test_format_spec_prohibition(format_spec)<br ALIGN="LEFT"/>test_formatter(quant, formatter, expected_result)<br ALIGN="LEFT"/>test_formatter_latex(quant, formatter, format, expected_result)<br ALIGN="LEFT"/>test_repr_latex()<br ALIGN="LEFT"/>test_repr_latex_superscript_units(q, expected)<br ALIGN="LEFT"/>test_scalar_quantity_format()<br ALIGN="LEFT"/>test_scalar_quantity_repr()<br ALIGN="LEFT"/>test_scalar_quantity_str()<br ALIGN="LEFT"/>test_to_string()<br ALIGN="LEFT"/>test_uninitialized_unit_format()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_functions.TestQuantityDistributionBroadcast" [color="black", fontcolor="black", label=<{TestQuantityDistributionBroadcast|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_functions.TestQuantityDistributionConcatenation" [color="black", fontcolor="black", label=<{TestQuantityDistributionConcatenation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_distribution.TestQuantityDistributionGetSetItemAdvancedIndex" [color="black", fontcolor="black", label=<{TestQuantityDistributionGetSetItemAdvancedIndex|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_info.TestQuantityInfo" [color="black", fontcolor="black", label=<{TestQuantityInfo|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_binary_op()<br ALIGN="LEFT"/>test_change_to_equivalent_unit()<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>test_inplace_unit_change()<br ALIGN="LEFT"/>test_insert()<br ALIGN="LEFT"/>test_item()<br ALIGN="LEFT"/>test_iter()<br ALIGN="LEFT"/>test_reshape()<br ALIGN="LEFT"/>test_slice()<br ALIGN="LEFT"/>test_unary_op()<br ALIGN="LEFT"/>test_unit_change()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestQuantityMathFuncs" [color="black", fontcolor="black", label=<{TestQuantityMathFuncs|<br ALIGN="LEFT"/>|test_cbrt_array(function)<br ALIGN="LEFT"/>test_cbrt_scalar(function)<br ALIGN="LEFT"/>test_copysign_array()<br ALIGN="LEFT"/>test_copysign_scalar()<br ALIGN="LEFT"/>test_dimensionless_twoarg_array(function)<br ALIGN="LEFT"/>test_dimensionless_twoarg_invalid_units(function)<br ALIGN="LEFT"/>test_divide_array(function)<br ALIGN="LEFT"/>test_divide_scalar(function)<br ALIGN="LEFT"/>test_exp_array(function)<br ALIGN="LEFT"/>test_exp_invalid_units(function)<br ALIGN="LEFT"/>test_exp_scalar(function)<br ALIGN="LEFT"/>test_float_power_array()<br ALIGN="LEFT"/>test_floor_divide_remainder_and_divmod()<br ALIGN="LEFT"/>test_frexp_array()<br ALIGN="LEFT"/>test_frexp_invalid_units()<br ALIGN="LEFT"/>test_frexp_scalar()<br ALIGN="LEFT"/>test_heaviside_array()<br ALIGN="LEFT"/>test_heaviside_scalar()<br ALIGN="LEFT"/>test_ldexp_array()<br ALIGN="LEFT"/>test_ldexp_invalid()<br ALIGN="LEFT"/>test_ldexp_scalar()<br ALIGN="LEFT"/>test_matmul()<br ALIGN="LEFT"/>test_matvec()<br ALIGN="LEFT"/>test_modf_array()<br ALIGN="LEFT"/>test_modf_scalar()<br ALIGN="LEFT"/>test_multiply_array()<br ALIGN="LEFT"/>test_multiply_scalar()<br ALIGN="LEFT"/>test_power_array()<br ALIGN="LEFT"/>test_power_array_array()<br ALIGN="LEFT"/>test_power_array_array2()<br ALIGN="LEFT"/>test_power_array_array3()<br ALIGN="LEFT"/>test_power_invalid()<br ALIGN="LEFT"/>test_power_scalar()<br ALIGN="LEFT"/>test_power_scalar_filledarray()<br ALIGN="LEFT"/>test_power_scalar_strarray()<br ALIGN="LEFT"/>test_reciprocal_array()<br ALIGN="LEFT"/>test_reciprocal_scalar()<br ALIGN="LEFT"/>test_sqrt_array()<br ALIGN="LEFT"/>test_sqrt_scalar()<br ALIGN="LEFT"/>test_square_array()<br ALIGN="LEFT"/>test_square_scalar()<br ALIGN="LEFT"/>test_vecdot()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.TestQuantityMimics" [color="black", fontcolor="black", label=<{TestQuantityMimics|<br ALIGN="LEFT"/>|test_mimic_function_unit()<br ALIGN="LEFT"/>test_mimic_input(Mimic)<br ALIGN="LEFT"/>test_mimic_setting(Mimic)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.TestQuantityOperations" [color="black", fontcolor="black", label=<{TestQuantityOperations|q1<br ALIGN="LEFT"/>q2<br ALIGN="LEFT"/>|test_abs()<br ALIGN="LEFT"/>test_addition()<br ALIGN="LEFT"/>test_array_converters()<br ALIGN="LEFT"/>test_commutativity()<br ALIGN="LEFT"/>test_comparison()<br ALIGN="LEFT"/>test_complicated_operation()<br ALIGN="LEFT"/>test_dimensionless_operations()<br ALIGN="LEFT"/>test_division()<br ALIGN="LEFT"/>test_incompatible_units()<br ALIGN="LEFT"/>test_index()<br ALIGN="LEFT"/>test_matrix_multiplication()<br ALIGN="LEFT"/>test_multiplication()<br ALIGN="LEFT"/>test_non_number_type()<br ALIGN="LEFT"/>test_numeric_converter_to_index_in_practice()<br ALIGN="LEFT"/>test_numeric_converters()<br ALIGN="LEFT"/>test_power()<br ALIGN="LEFT"/>test_quantity_as_power(exponent_type)<br ALIGN="LEFT"/>test_subtraction()<br ALIGN="LEFT"/>test_unary()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_array_methods.TestQuantityReshapeFuncs" [color="black", fontcolor="black", label=<{TestQuantityReshapeFuncs|<br ALIGN="LEFT"/>|test_flat_attributes()<br ALIGN="LEFT"/>test_flatten()<br ALIGN="LEFT"/>test_ravel()<br ALIGN="LEFT"/>test_reshape()<br ALIGN="LEFT"/>test_squeeze()<br ALIGN="LEFT"/>test_swapaxes()<br ALIGN="LEFT"/>test_transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_array_methods.TestQuantityStatsFuncs" [color="black", fontcolor="black", label=<{TestQuantityStatsFuncs|<br ALIGN="LEFT"/>|test_argmax()<br ALIGN="LEFT"/>test_argmax_keepdims()<br ALIGN="LEFT"/>test_argmin()<br ALIGN="LEFT"/>test_argmin_keepdims()<br ALIGN="LEFT"/>test_clip()<br ALIGN="LEFT"/>test_clip_func()<br ALIGN="LEFT"/>test_clip_inplace()<br ALIGN="LEFT"/>test_clip_meth()<br ALIGN="LEFT"/>test_conj()<br ALIGN="LEFT"/>test_cumprod()<br ALIGN="LEFT"/>test_cumsum()<br ALIGN="LEFT"/>test_cumsum_inplace()<br ALIGN="LEFT"/>test_diff()<br ALIGN="LEFT"/>test_dot_meth()<br ALIGN="LEFT"/>test_ediff1d()<br ALIGN="LEFT"/>test_max()<br ALIGN="LEFT"/>test_max_inplace()<br ALIGN="LEFT"/>test_max_where()<br ALIGN="LEFT"/>test_mean()<br ALIGN="LEFT"/>test_mean_inplace()<br ALIGN="LEFT"/>test_mean_where()<br ALIGN="LEFT"/>test_median()<br ALIGN="LEFT"/>test_median_inplace()<br ALIGN="LEFT"/>test_min()<br ALIGN="LEFT"/>test_min_inplace()<br ALIGN="LEFT"/>test_min_where()<br ALIGN="LEFT"/>test_prod()<br ALIGN="LEFT"/>test_ptp()<br ALIGN="LEFT"/>test_ptp_inplace()<br ALIGN="LEFT"/>test_round()<br ALIGN="LEFT"/>test_round_inplace()<br ALIGN="LEFT"/>test_std()<br ALIGN="LEFT"/>test_std_inplace()<br ALIGN="LEFT"/>test_std_where()<br ALIGN="LEFT"/>test_sum()<br ALIGN="LEFT"/>test_sum_dimensionless_initial()<br ALIGN="LEFT"/>test_sum_initial(initial)<br ALIGN="LEFT"/>test_sum_initial_exception(initial)<br ALIGN="LEFT"/>test_sum_inplace()<br ALIGN="LEFT"/>test_sum_where()<br ALIGN="LEFT"/>test_trace_func()<br ALIGN="LEFT"/>test_trace_meth()<br ALIGN="LEFT"/>test_var()<br ALIGN="LEFT"/>test_var_inplace()<br ALIGN="LEFT"/>test_var_where()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_info.TestQuantitySubclass" [color="black", fontcolor="black", label=<{TestQuantitySubclass|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_op()<br ALIGN="LEFT"/>test_setup()<br ALIGN="LEFT"/>test_slice()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.TestQuantitySubclassAboveAndBelow" [color="black", fontcolor="black", label=<{TestQuantitySubclassAboveAndBelow|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_attr_propagation()<br ALIGN="LEFT"/>test_setup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestQuantityTrigonometricFuncs" [color="black", fontcolor="black", label=<{TestQuantityTrigonometricFuncs|<br ALIGN="LEFT"/>|test_sin_with_quantity_out()<br ALIGN="LEFT"/>test_testcases(tc)<br ALIGN="LEFT"/>test_testexcs(te)<br ALIGN="LEFT"/>test_testwarns(tw)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_typing.TestQuantityTyping" [color="black", fontcolor="black", label=<{TestQuantityTyping|<br ALIGN="LEFT"/>|test_metadata_in_annotation()<br ALIGN="LEFT"/>test_optional_and_annotated()<br ALIGN="LEFT"/>test_quantity_subclass_typing()<br ALIGN="LEFT"/>test_quantity_typing()<br ALIGN="LEFT"/>test_union_and_annotated()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_annotations.TestQuantityUnitAnnotations" [color="black", fontcolor="black", label=<{TestQuantityUnitAnnotations|<br ALIGN="LEFT"/>|test_multiple_annotation()<br ALIGN="LEFT"/>test_not_unit_or_ptype()<br ALIGN="LEFT"/>test_optional_and_annotated()<br ALIGN="LEFT"/>test_simple_annotation()<br ALIGN="LEFT"/>test_union_and_annotated()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_arithmetic.TestRadialDifferential" [color="black", fontcolor="black", label=<{TestRadialDifferential|e : dict<br ALIGN="LEFT"/>r<br ALIGN="LEFT"/>s<br ALIGN="LEFT"/>sf : dict<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_name()<br ALIGN="LEFT"/>test_simple_differentials()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.TestRadialRepresentation" [color="black", fontcolor="black", label=<{TestRadialRepresentation|<br ALIGN="LEFT"/>|test_transform()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_ecsv.TestReadWriteECSV" [color="black", fontcolor="black", label=<{TestReadWriteECSV|functions : dict<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_html.TestReadWriteHTML" [color="black", fontcolor="black", label=<{TestReadWriteHTML|functions : dict<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_rename_direct_html_table_columns(read, write, tmp_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_json.TestReadWriteJSON" [color="black", fontcolor="black", label=<{TestReadWriteJSON|functions : dict<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_latex.TestReadWriteLaTex" [color="black", fontcolor="black", label=<{TestReadWriteLaTex|functions : dict<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_rename_direct_latex_columns(write, tmp_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.iers.tests.test_leap_second.TestReading" [color="black", fontcolor="black", label=<{TestReading|<br ALIGN="LEFT"/>|test_open_leap_second_dat()<br ALIGN="LEFT"/>test_open_leap_seconds_list(file)<br ALIGN="LEFT"/>test_open_system_file()<br ALIGN="LEFT"/>test_read_leap_second_dat()<br ALIGN="LEFT"/>test_read_leap_second_dat_locale()<br ALIGN="LEFT"/>test_read_leap_seconds_list(file)<br ALIGN="LEFT"/>verify_day_month_year(ls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestRealImag" [color="black", fontcolor="black", label=<{TestRealImag|q<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_imag()<br ALIGN="LEFT"/>test_real()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestRealImag" [color="black", fontcolor="black", label=<{TestRealImag|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_imag()<br ALIGN="LEFT"/>test_real()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestRecFunctions" [color="black", fontcolor="black", label=<{TestRecFunctions|tested_module<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_merge_array_nested_structure()<br ALIGN="LEFT"/>test_merge_arrays(flatten)<br ALIGN="LEFT"/>test_merge_arrays_asrecarray()<br ALIGN="LEFT"/>test_merge_arrays_flatten_nested_structure()<br ALIGN="LEFT"/>test_merge_arrays_repeat_dtypes()<br ALIGN="LEFT"/>test_merge_arrays_str(flatten)<br ALIGN="LEFT"/>test_merge_arrays_usemask()<br ALIGN="LEFT"/>test_structured_to_unstructured()<br ALIGN="LEFT"/>test_unstructured_to_structured()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_header.TestRecordValuedKeywordCards" [color="black", fontcolor="black", label=<{TestRecordValuedKeywordCards|<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_access_nonexistent_rvkc()<br ALIGN="LEFT"/>test_field_specifier_case_senstivity()<br ALIGN="LEFT"/>test_fitsheader_compressed_from_primary_image_ext()<br ALIGN="LEFT"/>test_fitsheader_script()<br ALIGN="LEFT"/>test_fitsheader_table_feature()<br ALIGN="LEFT"/>test_get_rvkc_by_index()<br ALIGN="LEFT"/>test_get_rvkc_by_keyword()<br ALIGN="LEFT"/>test_get_rvkc_by_keyword_and_field_specifier()<br ALIGN="LEFT"/>test_hdu_writeto_mode(mode)<br ALIGN="LEFT"/>test_initialize_rvkc()<br ALIGN="LEFT"/>test_overly_aggressive_rvkc_lookup()<br ALIGN="LEFT"/>test_overly_permissive_parsing()<br ALIGN="LEFT"/>test_parse_field_specifier()<br ALIGN="LEFT"/>test_pattern_matching_key_deletion()<br ALIGN="LEFT"/>test_pattern_matching_keys()<br ALIGN="LEFT"/>test_raw_keyword_value()<br ALIGN="LEFT"/>test_rvkc_delete()<br ALIGN="LEFT"/>test_rvkc_in_cardlist_keys()<br ALIGN="LEFT"/>test_rvkc_in_cardlist_values()<br ALIGN="LEFT"/>test_rvkc_insert_after()<br ALIGN="LEFT"/>test_rvkc_value_attribute()<br ALIGN="LEFT"/>test_successive_pattern_matching()<br ALIGN="LEFT"/>test_update_field_specifier()<br ALIGN="LEFT"/>test_update_rvkc()<br ALIGN="LEFT"/>test_update_rvkc_2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestReductionLikeFunctions" [color="black", fontcolor="black", label=<{TestReductionLikeFunctions|<br ALIGN="LEFT"/>|test_allclose()<br ALIGN="LEFT"/>test_allclose_atol_default_unit()<br ALIGN="LEFT"/>test_allclose_failures()<br ALIGN="LEFT"/>test_array_equal()<br ALIGN="LEFT"/>test_array_equal_incompatible_units()<br ALIGN="LEFT"/>test_array_equal_nan(equal_nan)<br ALIGN="LEFT"/>test_array_equiv()<br ALIGN="LEFT"/>test_array_equiv_incompatible_units()<br ALIGN="LEFT"/>test_average()<br ALIGN="LEFT"/>test_count_nonzero()<br ALIGN="LEFT"/>test_mean()<br ALIGN="LEFT"/>test_median()<br ALIGN="LEFT"/>test_median_nan_scalar()<br ALIGN="LEFT"/>test_percentile()<br ALIGN="LEFT"/>test_quantile()<br ALIGN="LEFT"/>test_std()<br ALIGN="LEFT"/>test_trace()<br ALIGN="LEFT"/>test_var()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestReductionLikeFunctions" [color="black", fontcolor="black", label=<{TestReductionLikeFunctions|<br ALIGN="LEFT"/>|test_average()<br ALIGN="LEFT"/>test_count_nonzero(axis)<br ALIGN="LEFT"/>test_ptp(kwargs)<br ALIGN="LEFT"/>test_trace()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tests.test_vo.TestReferences" [color="black", fontcolor="black", label=<{TestReferences|array<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>votable<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_fieldref()<br ALIGN="LEFT"/>test_iter_coosys()<br ALIGN="LEFT"/>test_iter_fields_and_params_on_a_group()<br ALIGN="LEFT"/>test_iter_groups()<br ALIGN="LEFT"/>test_iter_groups_on_a_group()<br ALIGN="LEFT"/>test_paramref()<br ALIGN="LEFT"/>test_ref_table()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.iers.tests.test_leap_second.TestRemoteURLs" [color="black", fontcolor="black", label=<{TestRemoteURLs|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>test_iers_url()<br ALIGN="LEFT"/>test_ietf_url()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestRemove" [color="black", fontcolor="black", label=<{TestRemove|t<br ALIGN="LEFT"/>t2<br ALIGN="LEFT"/>|test_1(table_types)<br ALIGN="LEFT"/>test_2(table_types)<br ALIGN="LEFT"/>test_3(table_types)<br ALIGN="LEFT"/>test_delitem1(table_types)<br ALIGN="LEFT"/>test_delitem2(table_types)<br ALIGN="LEFT"/>test_delitem_fail(table_types)<br ALIGN="LEFT"/>test_delitem_row(table_types)<br ALIGN="LEFT"/>test_delitem_row_fail(table_types)<br ALIGN="LEFT"/>test_delitem_row_float(table_types)<br ALIGN="LEFT"/>test_delitem_row_list(table_types, idx)<br ALIGN="LEFT"/>test_delitem_row_slice(table_types)<br ALIGN="LEFT"/>test_delitems(table_types)<br ALIGN="LEFT"/>test_remove_nonexistent_row(table_types)<br ALIGN="LEFT"/>test_remove_row_0(table_types)<br ALIGN="LEFT"/>test_remove_row_1(table_types)<br ALIGN="LEFT"/>test_remove_row_2(table_types)<br ALIGN="LEFT"/>test_remove_row_list(table_types)<br ALIGN="LEFT"/>test_remove_row_preserves_meta(table_types)<br ALIGN="LEFT"/>test_remove_row_slice(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_masked.TestRemoveColumn" [color="black", fontcolor="black", label=<{TestRemoveColumn|<br ALIGN="LEFT"/>|test_remove_masked_column()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestRename" [color="black", fontcolor="black", label=<{TestRename|<br ALIGN="LEFT"/>|test_1(table_types)<br ALIGN="LEFT"/>test_2(table_types)<br ALIGN="LEFT"/>test_rename_by_attr(table_types)<br ALIGN="LEFT"/>test_rename_columns(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_masked.TestRenameColumn" [color="black", fontcolor="black", label=<{TestRenameColumn|<br ALIGN="LEFT"/>|test_rename_masked_column()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestRepeat" [color="black", fontcolor="black", label=<{TestRepeat|<br ALIGN="LEFT"/>|test_repeat()<br ALIGN="LEFT"/>test_resize()<br ALIGN="LEFT"/>test_tile()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestRepeat" [color="black", fontcolor="black", label=<{TestRepeat|<br ALIGN="LEFT"/>|test_repeat()<br ALIGN="LEFT"/>test_resize()<br ALIGN="LEFT"/>test_tile()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestReplaceColumn" [color="black", fontcolor="black", label=<{TestReplaceColumn|<br ALIGN="LEFT"/>|test_fail_replace_column(table_types)<br ALIGN="LEFT"/>test_replace_column(table_types)<br ALIGN="LEFT"/>test_replace_column_no_copy()<br ALIGN="LEFT"/>test_replace_index_column(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_containers.TestRepresentation" [color="black", fontcolor="black", label=<{TestRepresentation|<br ALIGN="LEFT"/>|get_distribution(rep)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test_cartesian()<br ALIGN="LEFT"/>test_cartesian_roundtrip()<br ALIGN="LEFT"/>test_other_reps(rep_cls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_containers.TestRepresentationWithDifferential" [color="black", fontcolor="black", label=<{TestRepresentationWithDifferential|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_cartesian()<br ALIGN="LEFT"/>test_cartesian_roundtrip()<br ALIGN="LEFT"/>test_other_reps(diff_cls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_containers.TestRepresentations" [color="black", fontcolor="black", label=<{TestRepresentations|c<br ALIGN="LEFT"/>mask : ndarray<br ALIGN="LEFT"/>mc<br ALIGN="LEFT"/>mx<br ALIGN="LEFT"/>my<br ALIGN="LEFT"/>mz<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_initialization()<br ALIGN="LEFT"/>test_norm()<br ALIGN="LEFT"/>test_transformation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.tests.test_blocks.TestReshapeAsBlocks" [color="black", fontcolor="black", label=<{TestReshapeAsBlocks|<br ALIGN="LEFT"/>|test_1d()<br ALIGN="LEFT"/>test_2d()<br ALIGN="LEFT"/>test_3d()<br ALIGN="LEFT"/>test_invalid_block_dim()<br ALIGN="LEFT"/>test_invalid_block_size()<br ALIGN="LEFT"/>test_invalid_block_value()<br ALIGN="LEFT"/>test_view()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestReverse" [color="black", fontcolor="black", label=<{TestReverse|<br ALIGN="LEFT"/>|test_reverse(table_types)<br ALIGN="LEFT"/>test_reverse_big(table_types)<br ALIGN="LEFT"/>test_reverse_mixin()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestRound" [color="black", fontcolor="black", label=<{TestRound|<br ALIGN="LEFT"/>|test_round_dict(table_types)<br ALIGN="LEFT"/>test_round_int(table_types)<br ALIGN="LEFT"/>test_round_invalid(table_types)<br ALIGN="LEFT"/>test_round_kind(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_format.TestRoundtripCDS" [color="black", fontcolor="black", label=<{TestRoundtripCDS|format_<br ALIGN="LEFT"/>|test_roundtrip(unit)<br ALIGN="LEFT"/>test_roundtrip_dex(unit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_format.TestRoundtripFITS" [color="black", fontcolor="black", label=<{TestRoundtripFITS|format_<br ALIGN="LEFT"/>|test_roundtrip(unit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_format.TestRoundtripGeneric" [color="black", fontcolor="black", label=<{TestRoundtripGeneric|format_<br ALIGN="LEFT"/>|test_roundtrip(unit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_format.TestRoundtripOGIP" [color="black", fontcolor="black", label=<{TestRoundtripOGIP|format_<br ALIGN="LEFT"/>|test_roundtrip(unit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_format.TestRoundtripVOUnit" [color="black", fontcolor="black", label=<{TestRoundtripVOUnit|format_<br ALIGN="LEFT"/>|test_roundtrip(unit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_row.TestRow" [color="black", fontcolor="black", label=<{TestRow|t<br ALIGN="LEFT"/>|test_as_void(table_types)<br ALIGN="LEFT"/>test_bounds_checking(table_types)<br ALIGN="LEFT"/>test_convert_numpy_array(table_types)<br ALIGN="LEFT"/>test_create_rows_from_list(table_types)<br ALIGN="LEFT"/>test_format_row(table_types)<br ALIGN="LEFT"/>test_left_equal(table_types)<br ALIGN="LEFT"/>test_left_not_equal(table_types)<br ALIGN="LEFT"/>test_ref(table_types)<br ALIGN="LEFT"/>test_right_equal(table_types)<br ALIGN="LEFT"/>test_row_and_as_void_with_objects(table_types)<br ALIGN="LEFT"/>test_row_as_mapping(table_types)<br ALIGN="LEFT"/>test_row_as_sequence(table_types)<br ALIGN="LEFT"/>test_row_keys_values(table_types)<br ALIGN="LEFT"/>test_subclass(table_types)<br ALIGN="LEFT"/>test_values(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.tests.runner.TestRunner" [color="black", fontcolor="black", label=<{TestRunner|package_path : list<br ALIGN="LEFT"/>|args(args, kwargs)<br ALIGN="LEFT"/>coverage(coverage, kwargs)<br ALIGN="LEFT"/>docs_path(docs_path, kwargs)<br ALIGN="LEFT"/>package(package, kwargs)<br ALIGN="LEFT"/>packages_path(packages, base_path, error, warning)<br ALIGN="LEFT"/>parallel(parallel, kwargs)<br ALIGN="LEFT"/>pastebin(pastebin, kwargs)<br ALIGN="LEFT"/>pdb(pdb, kwargs)<br ALIGN="LEFT"/>plugins(plugins, kwargs)<br ALIGN="LEFT"/>remote_data(remote_data, kwargs)<br ALIGN="LEFT"/>repeat(repeat, kwargs)<br ALIGN="LEFT"/>run_tests()<br ALIGN="LEFT"/>skip_docs(skip_docs, kwargs)<br ALIGN="LEFT"/>test_path(test_path, kwargs)<br ALIGN="LEFT"/>verbose(verbose, kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.tests.runner.TestRunnerBase" [color="black", fontcolor="black", label=<{TestRunnerBase|RUN_TESTS_DOCSTRING : str<br ALIGN="LEFT"/>base_path : bytes, str<br ALIGN="LEFT"/>|make_test_runner_in(path)<br ALIGN="LEFT"/>run_tests()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_sidereal.TestST" [color="black", fontcolor="black", label=<{TestST|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>test_era()<br ALIGN="LEFT"/>test_gmst()<br ALIGN="LEFT"/>test_gmst_era_close()<br ALIGN="LEFT"/>test_gmst_gst_close()<br ALIGN="LEFT"/>test_gmst_independent_of_self_location()<br ALIGN="LEFT"/>test_gmst_vs_lmst()<br ALIGN="LEFT"/>test_gst()<br ALIGN="LEFT"/>test_lera()<br ALIGN="LEFT"/>test_lst(kind)<br ALIGN="LEFT"/>test_lst_needs_location()<br ALIGN="LEFT"/>test_lst_string_longitude()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_formatter_locator.TestScalarFormatterLocator" [color="black", fontcolor="black", label=<{TestScalarFormatterLocator|<br ALIGN="LEFT"/>|test_base_spacing(format, base_spacing)<br ALIGN="LEFT"/>test_format(format, string)<br ALIGN="LEFT"/>test_format_unit(format, string)<br ALIGN="LEFT"/>test_incorrect_spacing()<br ALIGN="LEFT"/>test_invalid_formats(format)<br ALIGN="LEFT"/>test_minor_locator()<br ALIGN="LEFT"/>test_no_options()<br ALIGN="LEFT"/>test_number()<br ALIGN="LEFT"/>test_spacing()<br ALIGN="LEFT"/>test_too_many_options()<br ALIGN="LEFT"/>test_values()<br ALIGN="LEFT"/>test_values_unit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestScipySpecialUfuncs" [color="black", fontcolor="black", label=<{TestScipySpecialUfuncs|jv_like_ufuncs : tuple<br ALIGN="LEFT"/>|test_cbrt_array(function)<br ALIGN="LEFT"/>test_cbrt_scalar(function)<br ALIGN="LEFT"/>test_erf_array(function)<br ALIGN="LEFT"/>test_erf_invalid_units(function)<br ALIGN="LEFT"/>test_erf_scalar(function)<br ALIGN="LEFT"/>test_jv_array(function)<br ALIGN="LEFT"/>test_jv_invalid_units(function)<br ALIGN="LEFT"/>test_jv_scalar(function)<br ALIGN="LEFT"/>test_radian(function)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_distribution.TestSetItemWithSelection" [color="black", fontcolor="black", label=<{TestSetItemWithSelection|<br ALIGN="LEFT"/>|test_inplace_operation()<br ALIGN="LEFT"/>test_setitem()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestSetMeta" [color="black", fontcolor="black", label=<{TestSetMeta|<br ALIGN="LEFT"/>|test_set_meta(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestSetOpsFunctions" [color="black", fontcolor="black", label=<{TestSetOpsFunctions|q<br ALIGN="LEFT"/>q2<br ALIGN="LEFT"/>|check(function, qs)<br ALIGN="LEFT"/>check1(function)<br ALIGN="LEFT"/>check2(function)<br ALIGN="LEFT"/>setup_method()<br ALIGN="LEFT"/>test_ediff1d()<br ALIGN="LEFT"/>test_in1d()<br ALIGN="LEFT"/>test_intersect1d(kwargs)<br ALIGN="LEFT"/>test_isin()<br ALIGN="LEFT"/>test_setdiff1d()<br ALIGN="LEFT"/>test_setxor1d()<br ALIGN="LEFT"/>test_union1d()<br ALIGN="LEFT"/>test_unique(kwargs)<br ALIGN="LEFT"/>test_unique_all()<br ALIGN="LEFT"/>test_unique_counts()<br ALIGN="LEFT"/>test_unique_inverse()<br ALIGN="LEFT"/>test_unique_more_complex(kwargs)<br ALIGN="LEFT"/>test_unique_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_methods.TestSetShape" [color="black", fontcolor="black", label=<{TestSetShape|<br ALIGN="LEFT"/>|test_shape_setting()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_methods.TestSetShape" [color="black", fontcolor="black", label=<{TestSetShape|<br ALIGN="LEFT"/>|test_shape_setting(use_mask)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestSetTableColumn" [color="black", fontcolor="black", label=<{TestSetTableColumn|<br ALIGN="LEFT"/>|test_set_new_col_existing_table(table_types)<br ALIGN="LEFT"/>test_set_new_col_existing_table_fail(table_types)<br ALIGN="LEFT"/>test_set_new_col_new_table(table_types)<br ALIGN="LEFT"/>test_set_new_col_new_table_quantity(table_types)<br ALIGN="LEFT"/>test_set_new_masked_col_existing_table(table_types)<br ALIGN="LEFT"/>test_set_new_unmasked_col_existing_table(table_types)<br ALIGN="LEFT"/>test_set_row(table_types)<br ALIGN="LEFT"/>test_set_row_existing(table_types)<br ALIGN="LEFT"/>test_set_row_fail_1(table_types)<br ALIGN="LEFT"/>test_set_row_fail_2(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_operations.TestSetdiff" [color="black", fontcolor="black", label=<{TestSetdiff|t1<br ALIGN="LEFT"/>t2<br ALIGN="LEFT"/>t3<br ALIGN="LEFT"/>|test_default_same_columns(operation_table_type)<br ALIGN="LEFT"/>test_default_same_tables(operation_table_type)<br ALIGN="LEFT"/>test_extra_col_left_table(operation_table_type)<br ALIGN="LEFT"/>test_extra_col_right_table(operation_table_type)<br ALIGN="LEFT"/>test_keys(operation_table_type)<br ALIGN="LEFT"/>test_missing_key(operation_table_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestSettingParts" [color="black", fontcolor="black", label=<{TestSettingParts|<br ALIGN="LEFT"/>|test_copyto()<br ALIGN="LEFT"/>test_fill_diagonal()<br ALIGN="LEFT"/>test_place()<br ALIGN="LEFT"/>test_put()<br ALIGN="LEFT"/>test_putmask()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestSettingParts" [color="black", fontcolor="black", label=<{TestSettingParts|<br ALIGN="LEFT"/>|test_copyto()<br ALIGN="LEFT"/>test_fill_diagonal(value)<br ALIGN="LEFT"/>test_place()<br ALIGN="LEFT"/>test_put()<br ALIGN="LEFT"/>test_putmask()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_methods.TestShapeFunctions" [color="black", fontcolor="black", label=<{TestShapeFunctions|<br ALIGN="LEFT"/>|test_atleast_1d()<br ALIGN="LEFT"/>test_atleast_2d()<br ALIGN="LEFT"/>test_atleast_3d()<br ALIGN="LEFT"/>test_broadcast_to()<br ALIGN="LEFT"/>test_delete()<br ALIGN="LEFT"/>test_fliplr()<br ALIGN="LEFT"/>test_move_axis()<br ALIGN="LEFT"/>test_roll()<br ALIGN="LEFT"/>test_roll_axis()<br ALIGN="LEFT"/>test_rot90()<br ALIGN="LEFT"/>test_shape_attribute_functions(attribute)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_methods.TestShapeFunctions" [color="black", fontcolor="black", label=<{TestShapeFunctions|<br ALIGN="LEFT"/>|test_atleast_1d(use_mask)<br ALIGN="LEFT"/>test_atleast_2d(use_mask)<br ALIGN="LEFT"/>test_atleast_3d(use_mask)<br ALIGN="LEFT"/>test_broadcast(use_mask)<br ALIGN="LEFT"/>test_delete(use_mask)<br ALIGN="LEFT"/>test_fliplr(use_mask)<br ALIGN="LEFT"/>test_move_axis(use_mask)<br ALIGN="LEFT"/>test_roll(use_mask)<br ALIGN="LEFT"/>test_roll_axis(use_mask)<br ALIGN="LEFT"/>test_rot90(use_mask)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestShapeInformation" [color="black", fontcolor="black", label=<{TestShapeInformation|<br ALIGN="LEFT"/>|test_ndim()<br ALIGN="LEFT"/>test_shape()<br ALIGN="LEFT"/>test_size()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestShapeInformation" [color="black", fontcolor="black", label=<{TestShapeInformation|<br ALIGN="LEFT"/>|test_ndim()<br ALIGN="LEFT"/>test_shape()<br ALIGN="LEFT"/>test_size()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestShapeManipulation" [color="black", fontcolor="black", label=<{TestShapeManipulation|<br ALIGN="LEFT"/>|test_atleast_1d()<br ALIGN="LEFT"/>test_atleast_2d()<br ALIGN="LEFT"/>test_atleast_3d()<br ALIGN="LEFT"/>test_broadcast_arrays()<br ALIGN="LEFT"/>test_broadcast_to()<br ALIGN="LEFT"/>test_expand_dims()<br ALIGN="LEFT"/>test_flip()<br ALIGN="LEFT"/>test_fliplr()<br ALIGN="LEFT"/>test_flipud()<br ALIGN="LEFT"/>test_matrix_transpose()<br ALIGN="LEFT"/>test_moveaxis()<br ALIGN="LEFT"/>test_ravel()<br ALIGN="LEFT"/>test_reshape()<br ALIGN="LEFT"/>test_rollaxis()<br ALIGN="LEFT"/>test_rot90()<br ALIGN="LEFT"/>test_squeeze()<br ALIGN="LEFT"/>test_swapaxes()<br ALIGN="LEFT"/>test_transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestShapeManipulation" [color="black", fontcolor="black", label=<{TestShapeManipulation|<br ALIGN="LEFT"/>|test_atleast_1d()<br ALIGN="LEFT"/>test_atleast_2d()<br ALIGN="LEFT"/>test_atleast_3d()<br ALIGN="LEFT"/>test_broadcast_arrays()<br ALIGN="LEFT"/>test_broadcast_to()<br ALIGN="LEFT"/>test_expand_dims()<br ALIGN="LEFT"/>test_flip()<br ALIGN="LEFT"/>test_fliplr()<br ALIGN="LEFT"/>test_flipud()<br ALIGN="LEFT"/>test_matrix_transpose()<br ALIGN="LEFT"/>test_moveaxis()<br ALIGN="LEFT"/>test_ravel()<br ALIGN="LEFT"/>test_reshape()<br ALIGN="LEFT"/>test_rollaxis()<br ALIGN="LEFT"/>test_rot90()<br ALIGN="LEFT"/>test_squeeze()<br ALIGN="LEFT"/>test_swapaxes()<br ALIGN="LEFT"/>test_transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.tests.test_shapes.TestSimplifyBasicIndex" [color="black", fontcolor="black", label=<{TestSimplifyBasicIndex|data<br ALIGN="LEFT"/>shape : tuple<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_indexing(index)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_input.TestSingleInputDoubleOutputSingleModel" [color="black", fontcolor="black", label=<{TestSingleInputDoubleOutputSingleModel|<br ALIGN="LEFT"/>|test_1d_array_parameters_1d_array_input()<br ALIGN="LEFT"/>test_1d_array_parameters_scalar_input()<br ALIGN="LEFT"/>test_2d_array_parameters_2d_array_input()<br ALIGN="LEFT"/>test_mixed_array_parameters_1d_array_input()<br ALIGN="LEFT"/>test_scalar_parameters_1d_array_input()<br ALIGN="LEFT"/>test_scalar_parameters_2d_array_input()<br ALIGN="LEFT"/>test_scalar_parameters_3d_array_input()<br ALIGN="LEFT"/>test_scalar_parameters_scalar_input()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_input.TestSingleInputSingleOutputSingleModel" [color="black", fontcolor="black", label=<{TestSingleInputSingleOutputSingleModel|<br ALIGN="LEFT"/>|test_1d_array_parameters_1d_array_input()<br ALIGN="LEFT"/>test_1d_array_parameters_scalar_input()<br ALIGN="LEFT"/>test_2d_array_parameters_2d_array_input()<br ALIGN="LEFT"/>test_mixed_array_parameters_1d_array_input()<br ALIGN="LEFT"/>test_scalar_parameters_1d_array_input()<br ALIGN="LEFT"/>test_scalar_parameters_2d_array_input()<br ALIGN="LEFT"/>test_scalar_parameters_3d_array_input()<br ALIGN="LEFT"/>test_scalar_parameters_scalar_input()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_input.TestSingleInputSingleOutputTwoModel" [color="black", fontcolor="black", label=<{TestSingleInputSingleOutputTwoModel|<br ALIGN="LEFT"/>|test_1d_array_parameters_1d_array_input()<br ALIGN="LEFT"/>test_1d_array_parameters_scalar_input()<br ALIGN="LEFT"/>test_2d_array_parameters_2d_array_input()<br ALIGN="LEFT"/>test_mixed_array_parameters_1d_array_input()<br ALIGN="LEFT"/>test_scalar_parameters_1d_array_input()<br ALIGN="LEFT"/>test_scalar_parameters_2d_array_input()<br ALIGN="LEFT"/>test_scalar_parameters_3d_array_input()<br ALIGN="LEFT"/>test_scalar_parameters_scalar_input()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_connect.TestSingleTable" [color="black", fontcolor="black", label=<{TestSingleTable|data : ndarray<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_character_as_bytes(tmp_path, memmap)<br ALIGN="LEFT"/>test_heterogeneous_VLA_tables(tmp_path)<br ALIGN="LEFT"/>test_mask_nans_on_read(tmp_path)<br ALIGN="LEFT"/>test_mask_null_on_read(tmp_path)<br ALIGN="LEFT"/>test_mask_str_on_read(tmp_path)<br ALIGN="LEFT"/>test_masked(tmp_path)<br ALIGN="LEFT"/>test_masked_nan(masked, tmp_path)<br ALIGN="LEFT"/>test_masked_serialize_data_mask(tmp_path)<br ALIGN="LEFT"/>test_memmap(tmp_path)<br ALIGN="LEFT"/>test_oned_single_element(tmp_path)<br ALIGN="LEFT"/>test_overwrite_with_path(tmp_path)<br ALIGN="LEFT"/>test_read_from_fileobj(tmp_path)<br ALIGN="LEFT"/>test_read_with_nonstandard_units()<br ALIGN="LEFT"/>test_read_with_unit_aliases(table_type)<br ALIGN="LEFT"/>test_simple(tmp_path)<br ALIGN="LEFT"/>test_simple_meta(tmp_path)<br ALIGN="LEFT"/>test_simple_meta_conflicting(tmp_path)<br ALIGN="LEFT"/>test_simple_noextension(tmp_path)<br ALIGN="LEFT"/>test_simple_pathlib(tmp_path)<br ALIGN="LEFT"/>test_strip_spaces(tmp_path, character_as_bytes)<br ALIGN="LEFT"/>test_with_custom_units_qtable(tmp_path)<br ALIGN="LEFT"/>test_with_format(table_type, tmp_path)<br ALIGN="LEFT"/>test_with_units(table_type, tmp_path)<br ALIGN="LEFT"/>test_write_VLA_tables_with_unified(tmp_path)<br ALIGN="LEFT"/>test_write_append(tmp_path)<br ALIGN="LEFT"/>test_write_drop_nonstandard_units(table_type, tmp_path)<br ALIGN="LEFT"/>test_write_object_tables_with_unified(tmp_path)<br ALIGN="LEFT"/>test_write_overwrite(tmp_path)<br ALIGN="LEFT"/>test_write_to_fileobj()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_containers.TestSkyCoord" [color="black", fontcolor="black", label=<{TestSkyCoord|dec<br ALIGN="LEFT"/>mask : ndarray<br ALIGN="LEFT"/>mdec<br ALIGN="LEFT"/>mra<br ALIGN="LEFT"/>msc<br ALIGN="LEFT"/>ra<br ALIGN="LEFT"/>sc<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_apply_space_motion()<br ALIGN="LEFT"/>test_initialization()<br ALIGN="LEFT"/>test_transformation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_masked.TestSkyCoord" [color="black", fontcolor="black", label=<{TestSkyCoord|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_non_frame_attribute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_containers.TestSkyCoord" [color="black", fontcolor="black", label=<{TestSkyCoord|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_convert(frame)<br ALIGN="LEFT"/>test_init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_masked.TestSkyCoordWithDifferentials" [color="black", fontcolor="black", label=<{TestSkyCoordWithDifferentials|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_apply_space_motion(dt)<br ALIGN="LEFT"/>test_filled()<br ALIGN="LEFT"/>test_filled_with_masked_value()<br ALIGN="LEFT"/>test_get_mask()<br ALIGN="LEFT"/>test_setup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_masked.TestSkyCoordWithOnlyDifferentialsMasked" [color="black", fontcolor="black", label=<{TestSkyCoordWithOnlyDifferentialsMasked|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_basic.TestSofaErrors" [color="black", fontcolor="black", label=<{TestSofaErrors|<br ALIGN="LEFT"/>|test_bad_time()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestSort" [color="black", fontcolor="black", label=<{TestSort|<br ALIGN="LEFT"/>|test_argsort(table_types)<br ALIGN="LEFT"/>test_argsort_bytes(table_types)<br ALIGN="LEFT"/>test_argsort_reverse(table_types, add_index)<br ALIGN="LEFT"/>test_argsort_unicode(table_types)<br ALIGN="LEFT"/>test_empty_reverse(table_types, reverse)<br ALIGN="LEFT"/>test_multiple(table_types)<br ALIGN="LEFT"/>test_multiple_reverse(table_types)<br ALIGN="LEFT"/>test_multiple_with_bytes(table_types)<br ALIGN="LEFT"/>test_multiple_with_unicode(table_types)<br ALIGN="LEFT"/>test_rebuild_column_view_then_rename(table_types)<br ALIGN="LEFT"/>test_single(table_types)<br ALIGN="LEFT"/>test_single_big(table_types)<br ALIGN="LEFT"/>test_single_reverse(table_types, create_index)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestSortFunctions" [color="black", fontcolor="black", label=<{TestSortFunctions|<br ALIGN="LEFT"/>|test_msort()<br ALIGN="LEFT"/>test_partition()<br ALIGN="LEFT"/>test_sort()<br ALIGN="LEFT"/>test_sort_axis()<br ALIGN="LEFT"/>test_sort_complex()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestSortFunctions" [color="black", fontcolor="black", label=<{TestSortFunctions|<br ALIGN="LEFT"/>|test_msort()<br ALIGN="LEFT"/>test_partition()<br ALIGN="LEFT"/>test_sort()<br ALIGN="LEFT"/>test_sort_complex()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestSpaceFunctions" [color="black", fontcolor="black", label=<{TestSpaceFunctions|<br ALIGN="LEFT"/>|test_geomspace()<br ALIGN="LEFT"/>test_linspace()<br ALIGN="LEFT"/>test_logspace()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestSpaceFunctions" [color="black", fontcolor="black", label=<{TestSpaceFunctions|<br ALIGN="LEFT"/>|check(function)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test_geomspace()<br ALIGN="LEFT"/>test_linspace()<br ALIGN="LEFT"/>test_logspace()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity.TestSpecificTypeQuantity" [color="black", fontcolor="black", label=<{TestSpecificTypeQuantity|Length<br ALIGN="LEFT"/>Length2<br ALIGN="LEFT"/>Length3<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_creation()<br ALIGN="LEFT"/>test_operation_precedence_and_fallback()<br ALIGN="LEFT"/>test_view()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.tests.test_wcs.TestSpectra" [color="black", fontcolor="black", label=<{TestSpectra|<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_consistency()<br ALIGN="LEFT"/>test_spectra()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_spectral_quantity.TestSpectralQuantity" [color="black", fontcolor="black", label=<{TestSpectralQuantity|<br ALIGN="LEFT"/>|test_arithmetic()<br ALIGN="LEFT"/>test_doppler_conversion()<br ALIGN="LEFT"/>test_doppler_conversion_validation()<br ALIGN="LEFT"/>test_doppler_set_parameters()<br ALIGN="LEFT"/>test_functions()<br ALIGN="LEFT"/>test_functions_std()<br ALIGN="LEFT"/>test_init_invalid(unit)<br ALIGN="LEFT"/>test_init_quantity(unit)<br ALIGN="LEFT"/>test_init_spectralquantity(unit)<br ALIGN="LEFT"/>test_init_value(unit)<br ALIGN="LEFT"/>test_spectral_conversion(unit1, unit2)<br ALIGN="LEFT"/>test_ufuncs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_arithmetic.TestSphericalDifferential" [color="black", fontcolor="black", label=<{TestSphericalDifferential|SD_cls<br ALIGN="LEFT"/>e : dict<br ALIGN="LEFT"/>s<br ALIGN="LEFT"/>sf : dict<br ALIGN="LEFT"/>|test_differential_arithmetic(omit_coslat)<br ALIGN="LEFT"/>test_differential_init_errors(omit_coslat)<br ALIGN="LEFT"/>test_name_coslat(omit_coslat)<br ALIGN="LEFT"/>test_simple_differentials(omit_coslat)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.TestSphericalRepresentation" [color="black", fontcolor="black", label=<{TestSphericalRepresentation|<br ALIGN="LEFT"/>|test_broadcasting()<br ALIGN="LEFT"/>test_broadcasting_and_nocopy()<br ALIGN="LEFT"/>test_broadcasting_mismatch()<br ALIGN="LEFT"/>test_empty_init()<br ALIGN="LEFT"/>test_getitem_len_iterable()<br ALIGN="LEFT"/>test_getitem_len_iterable_scalar()<br ALIGN="LEFT"/>test_init_array()<br ALIGN="LEFT"/>test_init_array_nocopy()<br ALIGN="LEFT"/>test_init_float32_array()<br ALIGN="LEFT"/>test_init_lonlat()<br ALIGN="LEFT"/>test_init_no_mutate_input()<br ALIGN="LEFT"/>test_init_quantity()<br ALIGN="LEFT"/>test_init_subclass()<br ALIGN="LEFT"/>test_name()<br ALIGN="LEFT"/>test_nan_distance()<br ALIGN="LEFT"/>test_negative_distance()<br ALIGN="LEFT"/>test_raise_on_extra_arguments()<br ALIGN="LEFT"/>test_readonly()<br ALIGN="LEFT"/>test_representation_shortcuts()<br ALIGN="LEFT"/>test_reprobj()<br ALIGN="LEFT"/>test_setitem()<br ALIGN="LEFT"/>test_transform()<br ALIGN="LEFT"/>test_transform_with_NaN()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_masked.TestSphericalRepresentationSeparateMasks" [color="black", fontcolor="black", label=<{TestSphericalRepresentationSeparateMasks|<br ALIGN="LEFT"/>|test_convert_to_cartesian()<br ALIGN="LEFT"/>test_convert_to_physics_spherical()<br ALIGN="LEFT"/>test_convert_to_radial()<br ALIGN="LEFT"/>test_convert_to_unit_spherical()<br ALIGN="LEFT"/>test_filled()<br ALIGN="LEFT"/>test_filled_with_masked_value()<br ALIGN="LEFT"/>test_initialization()<br ALIGN="LEFT"/>test_masked_representation_unmasked_differential()<br ALIGN="LEFT"/>test_set_mask()<br ALIGN="LEFT"/>test_set_masked_item_on_unmasked_instance()<br ALIGN="LEFT"/>test_set_np_ma_masked_on_unmasked_instance()<br ALIGN="LEFT"/>test_set_np_ma_nomasked_on_unmasked_instance()<br ALIGN="LEFT"/>test_setitem()<br ALIGN="LEFT"/>test_transform_keeps_distance_angular_masks()<br ALIGN="LEFT"/>test_unmasked_representation_masked_differential()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_spline.TestSpline" [color="black", fontcolor="black", label=<{TestSpline|Spline<br ALIGN="LEFT"/>extra_kwargs<br ALIGN="LEFT"/>num_opt : int<br ALIGN="LEFT"/>optional_inputs<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test___call__()<br ALIGN="LEFT"/>test___init__()<br ALIGN="LEFT"/>test__create_optional_inputs()<br ALIGN="LEFT"/>test__create_parameter()<br ALIGN="LEFT"/>test__create_parameters()<br ALIGN="LEFT"/>test__init_data()<br ALIGN="LEFT"/>test__init_parameters()<br ALIGN="LEFT"/>test__init_spline()<br ALIGN="LEFT"/>test__init_tck()<br ALIGN="LEFT"/>test__intercept_optional_inputs()<br ALIGN="LEFT"/>test__optional_arg()<br ALIGN="LEFT"/>test_evaluate()<br ALIGN="LEFT"/>test_param_names()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_spline.TestSpline1D" [color="black", fontcolor="black", label=<{TestSpline1D|npts_out : int<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>truth<br ALIGN="LEFT"/>x : ndarray<br ALIGN="LEFT"/>x_s<br ALIGN="LEFT"/>xs : ndarray<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>y_s<br ALIGN="LEFT"/>|check_base_spline(spl, t, c, k)<br ALIGN="LEFT"/>check_bbox(spl, fit_spl, fitter, w)<br ALIGN="LEFT"/>check_coeffs_created(spl)<br ALIGN="LEFT"/>check_knots_created(spl, k)<br ALIGN="LEFT"/>check_knots_warning(fitter, knots, k, w)<br ALIGN="LEFT"/>check_parameter(spl, base_name, name, index, value, fixed)<br ALIGN="LEFT"/>check_parameters(spl, params, base_name, value, fixed)<br ALIGN="LEFT"/>check_spline_fit(fit_spl, spline, fitter, atol_fit, atol_truth)<br ALIGN="LEFT"/>generate_spline(w, bbox, k, s, t)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test__SplineFitter_error()<br ALIGN="LEFT"/>test___init__errors()<br ALIGN="LEFT"/>test___init__with_full_custom_knots()<br ALIGN="LEFT"/>test___init__with_interior_custom_knots()<br ALIGN="LEFT"/>test___init__with_no_knot_information()<br ALIGN="LEFT"/>test___init__with_number_of_knots()<br ALIGN="LEFT"/>test___init__with_user_knots_and_coefficients()<br ALIGN="LEFT"/>test__coeff_names()<br ALIGN="LEFT"/>test__init_bounds()<br ALIGN="LEFT"/>test__init_coeffs()<br ALIGN="LEFT"/>test__init_data()<br ALIGN="LEFT"/>test__init_knots()<br ALIGN="LEFT"/>test__init_parameters()<br ALIGN="LEFT"/>test__initialized()<br ALIGN="LEFT"/>test__knot_names()<br ALIGN="LEFT"/>test_antiderivative()<br ALIGN="LEFT"/>test_bspline()<br ALIGN="LEFT"/>test_c()<br ALIGN="LEFT"/>test_coeffs()<br ALIGN="LEFT"/>test_degree()<br ALIGN="LEFT"/>test_derivative()<br ALIGN="LEFT"/>test_evaluate()<br ALIGN="LEFT"/>test_exact_knots_fitter(w, k)<br ALIGN="LEFT"/>test_interpolate_fitter(w, k)<br ALIGN="LEFT"/>test_knots()<br ALIGN="LEFT"/>test_param_names()<br ALIGN="LEFT"/>test_parameter_array_link()<br ALIGN="LEFT"/>test_smoothing_fitter(w, k, s)<br ALIGN="LEFT"/>test_splrep_fitter_no_knots(w, k, s)<br ALIGN="LEFT"/>test_splrep_fitter_with_knots(w, k)<br ALIGN="LEFT"/>test_t()<br ALIGN="LEFT"/>test_tck()<br ALIGN="LEFT"/>test_two_splines()<br ALIGN="LEFT"/>update_parameters(spl, knots, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestSplit" [color="black", fontcolor="black", label=<{TestSplit|q<br ALIGN="LEFT"/>|check(func)<br ALIGN="LEFT"/>setup_method()<br ALIGN="LEFT"/>test_array_split()<br ALIGN="LEFT"/>test_dsplit()<br ALIGN="LEFT"/>test_hsplit()<br ALIGN="LEFT"/>test_split()<br ALIGN="LEFT"/>test_unstack()<br ALIGN="LEFT"/>test_vsplit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestSplit" [color="black", fontcolor="black", label=<{TestSplit|<br ALIGN="LEFT"/>|check(func)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test_array_split()<br ALIGN="LEFT"/>test_dsplit()<br ALIGN="LEFT"/>test_hsplit()<br ALIGN="LEFT"/>test_split()<br ALIGN="LEFT"/>test_unstack()<br ALIGN="LEFT"/>test_vsplit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.tests.test_standard_profile.TestStandardProfile" [color="black", fontcolor="black", label=<{TestStandardProfile|client1<br ALIGN="LEFT"/>client1_id : NoneType<br ALIGN="LEFT"/>client2<br ALIGN="LEFT"/>client2_id : NoneType<br ALIGN="LEFT"/>client_connect_kwargs<br ALIGN="LEFT"/>client_init_kwargs<br ALIGN="LEFT"/>hub<br ALIGN="LEFT"/>hub_init_kwargs<br ALIGN="LEFT"/>metadata1 : dict<br ALIGN="LEFT"/>metadata2 : dict<br ALIGN="LEFT"/>tmpdir : str<br ALIGN="LEFT"/>|setup_method(tmp_path)<br ALIGN="LEFT"/>teardown_method()<br ALIGN="LEFT"/>test_main()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_basic.TestStardate" [color="black", fontcolor="black", label=<{TestStardate|<br ALIGN="LEFT"/>|test_iso_to_stardate()<br ALIGN="LEFT"/>test_stardate_to_iso(dates)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_core.TestStreamingFunctions" [color="black", fontcolor="black", label=<{TestStreamingFunctions|<br ALIGN="LEFT"/>|test_blank_ignore()<br ALIGN="LEFT"/>test_error_if_memmap_impossible()<br ALIGN="LEFT"/>test_fix_invalid_extname(capsys)<br ALIGN="LEFT"/>test_streaming_hdu(home_is_temp)<br ALIGN="LEFT"/>test_streaming_hdu_append_extension()<br ALIGN="LEFT"/>test_streaming_hdu_file_wrong_mode()<br ALIGN="LEFT"/>test_streaming_hdu_write_file()<br ALIGN="LEFT"/>test_streaming_hdu_write_file_like()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.tests.test_stretch.TestStretch" [color="black", fontcolor="black", label=<{TestStretch|<br ALIGN="LEFT"/>|test_chaining()<br ALIGN="LEFT"/>test_clip(stretch)<br ALIGN="LEFT"/>test_clip_ndimensional(stretch, ndim)<br ALIGN="LEFT"/>test_double_inverse(stretch)<br ALIGN="LEFT"/>test_inplace(stretch)<br ALIGN="LEFT"/>test_inplace_roundtrip(stretch)<br ALIGN="LEFT"/>test_inverted()<br ALIGN="LEFT"/>test_no_clip(stretch)<br ALIGN="LEFT"/>test_round_trip(stretch)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestStringFunctions" [color="black", fontcolor="black", label=<{TestStringFunctions|q<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_array2string()<br ALIGN="LEFT"/>test_array_repr()<br ALIGN="LEFT"/>test_array_str()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestStringFunctions" [color="black", fontcolor="black", label=<{TestStringFunctions|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_array2string()<br ALIGN="LEFT"/>test_array_repr()<br ALIGN="LEFT"/>test_array_str()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_structured.TestStructured" [color="black", fontcolor="black", label=<{TestStructured|<br ALIGN="LEFT"/>|test_structured()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_distribution.TestStructuredAdvancedIndex" [color="black", fontcolor="black", label=<{TestStructuredAdvancedIndex|<br ALIGN="LEFT"/>|test_init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_array_methods.TestStructuredArray" [color="black", fontcolor="black", label=<{TestStructuredArray|ra : ndarray<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_assignment_with_different_names()<br ALIGN="LEFT"/>test_assignment_with_non_structured()<br ALIGN="LEFT"/>test_creation()<br ALIGN="LEFT"/>test_equality()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_distribution.TestStructuredDistribution" [color="black", fontcolor="black", label=<{TestStructuredDistribution|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_getitem(item)<br ALIGN="LEFT"/>test_setitem_field(item)<br ALIGN="LEFT"/>test_setitem_index_slice(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_structured.TestStructuredLogUnit" [color="black", fontcolor="black", label=<{TestStructuredLogUnit|mag_time : ndarray<br ALIGN="LEFT"/>mag_time_dtype<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_quantity_initialization()<br ALIGN="LEFT"/>test_quantity_si()<br ALIGN="LEFT"/>test_unit_initialization()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_structured.TestStructuredMaskedQuantity" [color="black", fontcolor="black", label=<{TestStructuredMaskedQuantity|mpv<br ALIGN="LEFT"/>pv_mask : ndarray<br ALIGN="LEFT"/>qpv : ndarray<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_conversion()<br ALIGN="LEFT"/>test_init()<br ALIGN="LEFT"/>test_si()<br ALIGN="LEFT"/>test_slicing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_info.TestStructuredQuantity" [color="black", fontcolor="black", label=<{TestStructuredQuantity|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_item()<br ALIGN="LEFT"/>test_keying()<br ALIGN="LEFT"/>test_slicing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_structured.TestStructuredQuantity" [color="black", fontcolor="black", label=<{TestStructuredQuantity|<br ALIGN="LEFT"/>|test_cgs()<br ALIGN="LEFT"/>test_conversion()<br ALIGN="LEFT"/>test_conversion_via_lshift()<br ALIGN="LEFT"/>test_equality()<br ALIGN="LEFT"/>test_getitem()<br ALIGN="LEFT"/>test_initialization_and_keying()<br ALIGN="LEFT"/>test_initialization_by_multiplication_with_unit()<br ALIGN="LEFT"/>test_initialization_by_shifting_to_unit()<br ALIGN="LEFT"/>test_initialization_with_string()<br ALIGN="LEFT"/>test_initialization_with_unit_tuples()<br ALIGN="LEFT"/>test_initialization_without_unit()<br ALIGN="LEFT"/>test_inplace_conversion()<br ALIGN="LEFT"/>test_setitem()<br ALIGN="LEFT"/>test_si()<br ALIGN="LEFT"/>test_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_distribution.TestStructuredQuantityDistribution" [color="black", fontcolor="black", label=<{TestStructuredQuantityDistribution|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.uncertainty.tests.test_distribution.TestStructuredQuantityDistributionInit" [color="black", fontcolor="black", label=<{TestStructuredQuantityDistributionInit|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_init_via_structured_distribution()<br ALIGN="LEFT"/>test_init_via_structured_samples()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_structured.TestStructuredQuantityFunctions" [color="black", fontcolor="black", label=<{TestStructuredQuantityFunctions|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_empty_like()<br ALIGN="LEFT"/>test_structured_to_unstructured()<br ALIGN="LEFT"/>test_unstructured_to_structured()<br ALIGN="LEFT"/>test_zeros_ones_like(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_structured.TestStructuredSpecificTypeQuantity" [color="black", fontcolor="black", label=<{TestStructuredSpecificTypeQuantity|PositionVelocity<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_error_on_non_equivalent_unit()<br ALIGN="LEFT"/>test_init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_functions.TestStructuredUfuncs" [color="black", fontcolor="black", label=<{TestStructuredUfuncs|<br ALIGN="LEFT"/>|test_erfa_astrom()<br ALIGN="LEFT"/>test_erfa_atioq()<br ALIGN="LEFT"/>test_erfa_d2tf_tf2d()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_structured.TestStructuredUnitArithmatic" [color="black", fontcolor="black", label=<{TestStructuredUnitArithmatic|<br ALIGN="LEFT"/>|test_division()<br ALIGN="LEFT"/>test_multiplication()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_structured.TestStructuredUnitAsMapping" [color="black", fontcolor="black", label=<{TestStructuredUnitAsMapping|<br ALIGN="LEFT"/>|test_as_dict()<br ALIGN="LEFT"/>test_as_iterable(iterable)<br ALIGN="LEFT"/>test_contains()<br ALIGN="LEFT"/>test_field_names()<br ALIGN="LEFT"/>test_keys()<br ALIGN="LEFT"/>test_len()<br ALIGN="LEFT"/>test_setitem_fails()<br ALIGN="LEFT"/>test_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_structured.TestStructuredUnitBasics" [color="black", fontcolor="black", label=<{TestStructuredUnitBasics|<br ALIGN="LEFT"/>|test_equality()<br ALIGN="LEFT"/>test_extreme_recursive_initialization()<br ALIGN="LEFT"/>test_initialization_and_keying()<br ALIGN="LEFT"/>test_initialization_names_invalid_list_errors(names, invalid)<br ALIGN="LEFT"/>test_initialize_single_field()<br ALIGN="LEFT"/>test_initialize_with_float_dtype()<br ALIGN="LEFT"/>test_initialize_with_structured_unit_for_names()<br ALIGN="LEFT"/>test_looks_like_unit()<br ALIGN="LEFT"/>test_parsing()<br ALIGN="LEFT"/>test_recursive_initialization()<br ALIGN="LEFT"/>test_repr()<br ALIGN="LEFT"/>test_str()<br ALIGN="LEFT"/>test_to_string()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_structured.TestStructuredUnitMethods" [color="black", fontcolor="black", label=<{TestStructuredUnitMethods|<br ALIGN="LEFT"/>|test_cgs()<br ALIGN="LEFT"/>test_conversion()<br ALIGN="LEFT"/>test_decompose()<br ALIGN="LEFT"/>test_is_equivalent()<br ALIGN="LEFT"/>test_physical_type()<br ALIGN="LEFT"/>test_physical_type_id()<br ALIGN="LEFT"/>test_si()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_structured.TestStructuredUnitsCopyPickle" [color="black", fontcolor="black", label=<{TestStructuredUnitsCopyPickle|<br ALIGN="LEFT"/>|test_copy()<br ALIGN="LEFT"/>test_deepcopy()<br ALIGN="LEFT"/>test_pickle(pickle_protocol)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_basic.TestSubFormat" [color="black", fontcolor="black", label=<{TestSubFormat|<br ALIGN="LEFT"/>|test_bad_input_subformat()<br ALIGN="LEFT"/>test_epoch_times()<br ALIGN="LEFT"/>test_fits_format()<br ALIGN="LEFT"/>test_fits_scale()<br ALIGN="LEFT"/>test_input_subformat()<br ALIGN="LEFT"/>test_input_subformat_fail()<br ALIGN="LEFT"/>test_output_subformat()<br ALIGN="LEFT"/>test_plot_date()<br ALIGN="LEFT"/>test_scale_default()<br ALIGN="LEFT"/>test_scale_input()<br ALIGN="LEFT"/>test_yday_format()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.TestSubclass" [color="black", fontcolor="black", label=<{TestSubclass|<br ALIGN="LEFT"/>|registry()<br ALIGN="LEFT"/>test_read_table_subclass()<br ALIGN="LEFT"/>test_read_table_subclass_with_columns_attributes(tmp_path)<br ALIGN="LEFT"/>test_write_table_subclass()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.test_table_deletion.TestTable" [color="black", fontcolor="black", label=<{TestTable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestTableColumn" [color="black", fontcolor="black", label=<{TestTableColumn|<br ALIGN="LEFT"/>|test_column_view(table_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_init_table.TestTableColumnsInit" [color="black", fontcolor="black", label=<{TestTableColumnsInit|<br ALIGN="LEFT"/>|test_init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_item_access.TestTableColumnsItems" [color="black", fontcolor="black", label=<{TestTableColumnsItems|t<br ALIGN="LEFT"/>tc<br ALIGN="LEFT"/>|test_by_name(table_data)<br ALIGN="LEFT"/>test_by_position(table_data)<br ALIGN="LEFT"/>test_column_slice(table_data)<br ALIGN="LEFT"/>test_mult_columns(table_data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_table.TestTableFunctions" [color="black", fontcolor="black", label=<{TestTableFunctions|<br ALIGN="LEFT"/>|test_add_data_by_rows()<br ALIGN="LEFT"/>test_adding_a_column()<br ALIGN="LEFT"/>test_adding_a_column_inplace()<br ALIGN="LEFT"/>test_adding_a_column_to_file()<br ALIGN="LEFT"/>test_appending_a_column()<br ALIGN="LEFT"/>test_array_broadcasting()<br ALIGN="LEFT"/>test_array_slicing()<br ALIGN="LEFT"/>test_array_slicing_readonly()<br ALIGN="LEFT"/>test_ascii_floattypes()<br ALIGN="LEFT"/>test_ascii_inttypes()<br ALIGN="LEFT"/>test_ascii_table()<br ALIGN="LEFT"/>test_assign_multiple_rows_to_table()<br ALIGN="LEFT"/>test_attribute_field_shadowing()<br ALIGN="LEFT"/>test_bin_table_hdu_constructor()<br ALIGN="LEFT"/>test_bin_table_init_from_string_array_column()<br ALIGN="LEFT"/>test_bin_table_with_logical_array()<br ALIGN="LEFT"/>test_binary_table()<br ALIGN="LEFT"/>test_bintable_to_asciitable()<br ALIGN="LEFT"/>test_blank_field_zero()<br ALIGN="LEFT"/>test_bool_column_update()<br ALIGN="LEFT"/>test_column_array_type_mismatch()<br ALIGN="LEFT"/>test_column_endianness()<br ALIGN="LEFT"/>test_column_with_scaling()<br ALIGN="LEFT"/>test_columns_with_truncating_tdim()<br ALIGN="LEFT"/>test_constructor_copies_header()<br ALIGN="LEFT"/>test_constructor_name_arg()<br ALIGN="LEFT"/>test_constructor_ver_arg()<br ALIGN="LEFT"/>test_converted_copy()<br ALIGN="LEFT"/>test_dim_column_byte_order_mismatch()<br ALIGN="LEFT"/>test_dump_load_array_colums()<br ALIGN="LEFT"/>test_dump_load_round_trip(tablename)<br ALIGN="LEFT"/>test_dump_overwrite()<br ALIGN="LEFT"/>test_endianness()<br ALIGN="LEFT"/>test_fits_rec_column_access()<br ALIGN="LEFT"/>test_fits_rec_from_existing()<br ALIGN="LEFT"/>test_fits_record_len()<br ALIGN="LEFT"/>test_load_guess_format()<br ALIGN="LEFT"/>test_mask_array()<br ALIGN="LEFT"/>test_merge_tables()<br ALIGN="LEFT"/>test_mismatched_tform_and_tdim()<br ALIGN="LEFT"/>test_missing_tnull()<br ALIGN="LEFT"/>test_modify_column_attributes()<br ALIGN="LEFT"/>test_multi_dimensional_columns()<br ALIGN="LEFT"/>test_multidimension_table_from_numpy_rec_columns()<br ALIGN="LEFT"/>test_new_fitsrec()<br ALIGN="LEFT"/>test_new_table_from_recarray()<br ALIGN="LEFT"/>test_new_table_with_fits_rec()<br ALIGN="LEFT"/>test_new_table_with_nd_column()<br ALIGN="LEFT"/>test_new_table_with_ndarray()<br ALIGN="LEFT"/>test_numpy_ndarray_to_bintablehdu()<br ALIGN="LEFT"/>test_numpy_ndarray_to_bintablehdu_with_unicode()<br ALIGN="LEFT"/>test_oned_array_single_element()<br ALIGN="LEFT"/>test_open(home_is_data)<br ALIGN="LEFT"/>test_pickle()<br ALIGN="LEFT"/>test_pseudo_unsigned_ints()<br ALIGN="LEFT"/>test_recarray_to_bintablehdu()<br ALIGN="LEFT"/>test_reference_leak()<br ALIGN="LEFT"/>test_reference_leak2(tmp_path)<br ALIGN="LEFT"/>test_reference_leak_copyhdu()<br ALIGN="LEFT"/>test_removing_a_column_from_file()<br ALIGN="LEFT"/>test_removing_a_column_inplace()<br ALIGN="LEFT"/>test_row_setitem()<br ALIGN="LEFT"/>test_slice_a_row()<br ALIGN="LEFT"/>test_slicing()<br ALIGN="LEFT"/>test_string_array_round_trip()<br ALIGN="LEFT"/>test_string_column_padding()<br ALIGN="LEFT"/>test_table_from_bool_fields()<br ALIGN="LEFT"/>test_table_from_bool_fields2()<br ALIGN="LEFT"/>test_table_from_columns_of_other_table()<br ALIGN="LEFT"/>test_table_none()<br ALIGN="LEFT"/>test_table_with_zero_width_column()<br ALIGN="LEFT"/>test_table_with_zero_width_str_column()<br ALIGN="LEFT"/>test_tdim_of_size_one()<br ALIGN="LEFT"/>test_unicode_colname()<br ALIGN="LEFT"/>test_unncessary_table_load()<br ALIGN="LEFT"/>test_update_string_column_inplace()<br ALIGN="LEFT"/>test_verify_data_references()<br ALIGN="LEFT"/>test_zero_length_table()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_masked.TestTableInit" [color="black", fontcolor="black", label=<{TestTableInit|<br ALIGN="LEFT"/>|test_init_from_sequence_data_numeric_typed(dtype, shape)<br ALIGN="LEFT"/>test_init_from_sequence_data_numeric_untyped(dtype, shape)<br ALIGN="LEFT"/>test_initialization_with_all_columns()<br ALIGN="LEFT"/>test_mask_false_if_input_mask_not_true()<br ALIGN="LEFT"/>test_mask_false_if_no_input_masked()<br ALIGN="LEFT"/>test_mask_property()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_item_access.TestTableItems" [color="black", fontcolor="black", label=<{TestTableItems|t<br ALIGN="LEFT"/>tc<br ALIGN="LEFT"/>|test_column(table_data, idx)<br ALIGN="LEFT"/>test_empty_iterable_item(table_data)<br ALIGN="LEFT"/>test_fancy_index_slice(table_data)<br ALIGN="LEFT"/>test_list_index_slice(table_data)<br ALIGN="LEFT"/>test_np_integers(table_data)<br ALIGN="LEFT"/>test_np_where(table_data)<br ALIGN="LEFT"/>test_row(table_data, idx)<br ALIGN="LEFT"/>test_select_bad_column(table_data)<br ALIGN="LEFT"/>test_select_columns(table_data)<br ALIGN="LEFT"/>test_select_columns_fail(table_data)<br ALIGN="LEFT"/>test_table_slice(table_data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tests.test_vo.TestThroughBinary" [color="black", fontcolor="black", label=<{TestThroughBinary|array<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>votable<br ALIGN="LEFT"/>xmlout : BytesIO<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_bit_array2_mask()<br ALIGN="LEFT"/>test_bit_mask()<br ALIGN="LEFT"/>test_bitarray_mask()<br ALIGN="LEFT"/>test_null_integer_binary()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tests.test_vo.TestThroughBinary2" [color="black", fontcolor="black", label=<{TestThroughBinary2|array<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>votable<br ALIGN="LEFT"/>xmlout : BytesIO<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/><I>test_get_coosys_by_id</I>()<br ALIGN="LEFT"/>test_null_integer_binary2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tests.test_vo.TestThroughTableData" [color="black", fontcolor="black", label=<{TestThroughTableData|array<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>votable<br ALIGN="LEFT"/>xmlout : BytesIO<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_bit_array2_mask()<br ALIGN="LEFT"/>test_bit_mask()<br ALIGN="LEFT"/>test_bitarray_mask()<br ALIGN="LEFT"/>test_schema(tmp_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_tilde_path.TestTildePaths" [color="black", fontcolor="black", label=<{TestTildePaths|<br ALIGN="LEFT"/>|fits_tabledump(home_is_temp)<br ALIGN="LEFT"/>test_BinTableHDU_dump_load(home_is_temp)<br ALIGN="LEFT"/>test_BinTableHDU_writeto(home_is_temp)<br ALIGN="LEFT"/>test_CompImageHDU_writeto(home_is_temp)<br ALIGN="LEFT"/>test_ImageHDU_writeto(home_is_temp)<br ALIGN="LEFT"/>test_TableHDU_writeto(home_is_temp)<br ALIGN="LEFT"/>test_fits_get_data(home_is_data)<br ALIGN="LEFT"/>test_fits_get_header(home_is_data)<br ALIGN="LEFT"/>test_fits_get_set_del_val(home_is_temp)<br ALIGN="LEFT"/>test_fits_info(home_is_data)<br ALIGN="LEFT"/>test_fits_printdiff(home_is_data)<br ALIGN="LEFT"/>test_header_formatter(home_is_data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_containers.TestTime" [color="black", fontcolor="black", label=<{TestTime|mask : ndarray<br ALIGN="LEFT"/>mt<br ALIGN="LEFT"/>s : ndarray<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_different_formats(format_)<br ALIGN="LEFT"/>test_initialization()<br ALIGN="LEFT"/>test_transformation(scale)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_comparisons.TestTimeComparisons" [color="black", fontcolor="black", label=<{TestTimeComparisons|t1<br ALIGN="LEFT"/>t2<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_miscompares()<br ALIGN="LEFT"/>test_time()<br ALIGN="LEFT"/>test_time_boolean()<br ALIGN="LEFT"/>test_timedelta()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_delta.TestTimeDelta" [color="black", fontcolor="black", label=<{TestTimeDelta|dt<br ALIGN="LEFT"/>dt_array<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>t2<br ALIGN="LEFT"/>t3<br ALIGN="LEFT"/>t4<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_add()<br ALIGN="LEFT"/>test_add_vector()<br ALIGN="LEFT"/>test_copy_timedelta(values)<br ALIGN="LEFT"/>test_from_non_float()<br ALIGN="LEFT"/>test_keep_properties()<br ALIGN="LEFT"/>test_mean()<br ALIGN="LEFT"/>test_mul_div()<br ALIGN="LEFT"/>test_neg_abs()<br ALIGN="LEFT"/>test_set_format()<br ALIGN="LEFT"/>test_sub()<br ALIGN="LEFT"/>test_sub_vector()<br ALIGN="LEFT"/>test_time_delta_comp_nan_quantity()<br ALIGN="LEFT"/>test_time_delta_comp_num_quantity()<br ALIGN="LEFT"/>test_to_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_quantity_interaction.TestTimeDeltaQuantity" [color="black", fontcolor="black", label=<{TestTimeDeltaQuantity|<br ALIGN="LEFT"/>|test_invalid_quantity_broadcast()<br ALIGN="LEFT"/>test_invalid_quantity_input()<br ALIGN="LEFT"/>test_invalid_quantity_operations()<br ALIGN="LEFT"/>test_invalid_quantity_operations2()<br ALIGN="LEFT"/>test_quantity_output()<br ALIGN="LEFT"/>test_quantity_output_errors()<br ALIGN="LEFT"/>test_valid_quantity_input()<br ALIGN="LEFT"/>test_valid_quantity_operations1()<br ALIGN="LEFT"/>test_valid_quantity_operations2()<br ALIGN="LEFT"/>test_valid_quantity_operations3()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_delta.TestTimeDeltaScales" [color="black", fontcolor="black", label=<{TestTimeDeltaScales|dt<br ALIGN="LEFT"/>iso_times : list<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_delta_day_is_86400_seconds(scale)<br ALIGN="LEFT"/>test_delta_scales_definition()<br ALIGN="LEFT"/>test_local_scales_for_time_minus_time()<br ALIGN="LEFT"/>test_scales_for_delta_minus_delta()<br ALIGN="LEFT"/>test_scales_for_delta_scale_is_none(scale, op)<br ALIGN="LEFT"/>test_standard_scales_for_time_minus_time(scale1, scale2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_quantity_interaction.TestTimeQuantity" [color="black", fontcolor="black", label=<{TestTimeQuantity|<br ALIGN="LEFT"/>|test_column_with_and_without_units()<br ALIGN="LEFT"/>test_invalid_quantity_input()<br ALIGN="LEFT"/>test_invalid_quantity_operations()<br ALIGN="LEFT"/>test_no_quantity_input_allowed()<br ALIGN="LEFT"/>test_valid_quantity_input()<br ALIGN="LEFT"/>test_valid_quantity_operations()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.timeseries.tests.test_common.TestTimeSeries" [color="black", fontcolor="black", label=<{TestTimeSeries|series<br ALIGN="LEFT"/>time_attr : str<br ALIGN="LEFT"/>|setup_method(method)<br ALIGN="LEFT"/>test_column_slicing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_ut1.TestTimeUT1" [color="black", fontcolor="black", label=<{TestTimeUT1|<br ALIGN="LEFT"/>|test_delta_ut1_utc()<br ALIGN="LEFT"/>test_empty_ut1()<br ALIGN="LEFT"/>test_ut1_to_utc()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_ut1.TestTimeUT1Remote" [color="black", fontcolor="black", label=<{TestTimeUT1Remote|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>test_ut1_iers_auto()<br ALIGN="LEFT"/>test_utc_to_ut1()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_ut1.TestTimeUT1SpecificIERSTable" [color="black", fontcolor="black", label=<{TestTimeUT1SpecificIERSTable|<br ALIGN="LEFT"/>|test_ut1_iers_A()<br ALIGN="LEFT"/>test_ut1_iers_B()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_cosmology.TestToFromCosmology" [color="black", fontcolor="black", label=<{TestToFromCosmology|functions : dict<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_mapping.TestToFromMapping" [color="black", fontcolor="black", label=<{TestToFromMapping|functions : dict<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/><I>test_fromformat_subclass_partial_info_mapping</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_model.TestToFromModel" [color="black", fontcolor="black", label=<{TestToFromModel|functions : dict<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_row.TestToFromRow" [color="black", fontcolor="black", label=<{TestToFromRow|functions : dict<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_table.TestToFromTable" [color="black", fontcolor="black", label=<{TestToFromTable|functions : dict<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_yaml.TestToFromYAML" [color="black", fontcolor="black", label=<{TestToFromYAML|functions : dict<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/><I>test_from_yaml_autoidentify</I>(cosmo, to_format, from_format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.tests.test_transform_coord_meta.TestTransformCoordMeta" [color="black", fontcolor="black", label=<{TestTransformCoordMeta|<br ALIGN="LEFT"/>|test_coords_overlay()<br ALIGN="LEFT"/>test_coords_overlay_auto_coord_meta()<br ALIGN="LEFT"/>test_direct_init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_decorator.TestTypeAnnotations" [color="black", fontcolor="black", label=<{TestTypeAnnotations|<br ALIGN="LEFT"/>|test_single_annotation_unit(annot)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestUfuncAt" [color="black", fontcolor="black", label=<{TestUfuncAt|<br ALIGN="LEFT"/>|test_one_argument_ufunc_at()<br ALIGN="LEFT"/>test_two_argument_ufunc_at()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestUfuncHelpers" [color="black", fontcolor="black", label=<{TestUfuncHelpers|<br ALIGN="LEFT"/>|test_coverage()<br ALIGN="LEFT"/>test_removal_addition()<br ALIGN="LEFT"/>test_scipy_registered()<br ALIGN="LEFT"/>test_thread_safety(fast_thread_switching)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestUfuncLike" [color="black", fontcolor="black", label=<{TestUfuncLike|<br ALIGN="LEFT"/>|test_angle()<br ALIGN="LEFT"/>test_around()<br ALIGN="LEFT"/>test_choose()<br ALIGN="LEFT"/>test_clip()<br ALIGN="LEFT"/>test_fix()<br ALIGN="LEFT"/>test_i0()<br ALIGN="LEFT"/>test_nan_to_num()<br ALIGN="LEFT"/>test_nan_to_num_complex()<br ALIGN="LEFT"/>test_ptp()<br ALIGN="LEFT"/>test_real_if_close()<br ALIGN="LEFT"/>test_round()<br ALIGN="LEFT"/>test_round_()<br ALIGN="LEFT"/>test_select()<br ALIGN="LEFT"/>test_sinc()<br ALIGN="LEFT"/>test_tril()<br ALIGN="LEFT"/>test_triu()<br ALIGN="LEFT"/>test_unwrap()<br ALIGN="LEFT"/>test_where()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestUfuncLike" [color="black", fontcolor="black", label=<{TestUfuncLike|<br ALIGN="LEFT"/>|test_angle()<br ALIGN="LEFT"/>test_choose()<br ALIGN="LEFT"/>test_choose_masked()<br ALIGN="LEFT"/>test_fix()<br ALIGN="LEFT"/>test_i0()<br ALIGN="LEFT"/>test_nan_to_num()<br ALIGN="LEFT"/>test_real_if_close()<br ALIGN="LEFT"/>test_select(default)<br ALIGN="LEFT"/>test_sinc()<br ALIGN="LEFT"/>test_tril()<br ALIGN="LEFT"/>test_triu()<br ALIGN="LEFT"/>test_unwrap()<br ALIGN="LEFT"/>test_where()<br ALIGN="LEFT"/>test_where_single_arg()<br ALIGN="LEFT"/>test_where_wrong_number_of_arg()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestUfuncLikeTests" [color="black", fontcolor="black", label=<{TestUfuncLikeTests|q<br ALIGN="LEFT"/>|check(func)<br ALIGN="LEFT"/>setup_method()<br ALIGN="LEFT"/>test_allclose_atol_default_unit()<br ALIGN="LEFT"/>test_isclose()<br ALIGN="LEFT"/>test_iscomplex()<br ALIGN="LEFT"/>test_isneginf()<br ALIGN="LEFT"/>test_isposinf()<br ALIGN="LEFT"/>test_isreal()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_function_helpers.TestUfuncLikeTests" [color="black", fontcolor="black", label=<{TestUfuncLikeTests|<br ALIGN="LEFT"/>|check(func)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test_allclose()<br ALIGN="LEFT"/>test_array_equal()<br ALIGN="LEFT"/>test_array_equiv()<br ALIGN="LEFT"/>test_isclose()<br ALIGN="LEFT"/>test_iscomplex()<br ALIGN="LEFT"/>test_isneginf()<br ALIGN="LEFT"/>test_isposinf()<br ALIGN="LEFT"/>test_isreal()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestUfuncOuter" [color="black", fontcolor="black", label=<{TestUfuncOuter|<br ALIGN="LEFT"/>|test_one_argument_ufunc_outer()<br ALIGN="LEFT"/>test_two_argument_ufunc_outer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestUfuncReduceReduceatAccumulate" [color="black", fontcolor="black", label=<{TestUfuncReduceReduceatAccumulate|<br ALIGN="LEFT"/>|test_one_argument_ufunc_reduce_accumulate()<br ALIGN="LEFT"/>test_two_argument_ufunc_reduce_accumulate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestUfuncReductions" [color="black", fontcolor="black", label=<{TestUfuncReductions|<br ALIGN="LEFT"/>|test_all()<br ALIGN="LEFT"/>test_alltrue()<br ALIGN="LEFT"/>test_amax()<br ALIGN="LEFT"/>test_amin()<br ALIGN="LEFT"/>test_any()<br ALIGN="LEFT"/>test_cumprod()<br ALIGN="LEFT"/>test_cumproduct()<br ALIGN="LEFT"/>test_cumsum()<br ALIGN="LEFT"/>test_cumulative_prod()<br ALIGN="LEFT"/>test_cumulative_sum()<br ALIGN="LEFT"/>test_max()<br ALIGN="LEFT"/>test_min()<br ALIGN="LEFT"/>test_prod()<br ALIGN="LEFT"/>test_product()<br ALIGN="LEFT"/>test_sometrue()<br ALIGN="LEFT"/>test_sum()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented" [color="black", fontcolor="black", label=<{TestUfuncReturnsNotImplemented|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_uint.TestUintFunctions" [color="black", fontcolor="black", label=<{TestUintFunctions|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_uint(utype, compressed)<br ALIGN="LEFT"/>test_uint_columns(utype)<br ALIGN="LEFT"/>test_uint_slice()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestUfuncReturnsNotImplemented.TestUnaryUfuncs" [color="black", fontcolor="black", label=<{TestUnaryUfuncs|<br ALIGN="LEFT"/>|test_basic(ufunc, duck_quantity)<br ALIGN="LEFT"/>test_full(ufunc, duck_quantity, out)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.TestUnifiedIORegistry" [color="black", fontcolor="black", label=<{TestUnifiedIORegistry|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_delay_doc_updates(registry, fmtcls1)<br ALIGN="LEFT"/>test_get_formats(registry)<br ALIGN="LEFT"/>test_identifier_origin(registry, fmtcls1, fmtcls2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.TestUnifiedIORegistryBase" [color="black", fontcolor="black", label=<{TestUnifiedIORegistryBase|<br ALIGN="LEFT"/>|registry()<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test_compat_delay_doc_updates(registry, fmtcls1)<br ALIGN="LEFT"/>test_compat_get_formats(registry, fmtcls1)<br ALIGN="LEFT"/>test_compat_identify_format(registry, fmtcls1)<br ALIGN="LEFT"/>test_compat_register_identifier(registry, fmtcls1)<br ALIGN="LEFT"/>test_compat_unregister_identifier(registry, fmtcls1)<br ALIGN="LEFT"/>test_delay_doc_updates(registry, fmtcls1)<br ALIGN="LEFT"/>test_get_formats(registry)<br ALIGN="LEFT"/>test_identify_format(registry, fmtcls1)<br ALIGN="LEFT"/>test_register_identifier(registry, fmtcls1, fmtcls2)<br ALIGN="LEFT"/>test_register_identifier_force(registry, fmtcls1)<br ALIGN="LEFT"/>test_register_identifier_invalid(registry, fmtcls)<br ALIGN="LEFT"/>test_unregister_identifier(registry, fmtcls1)<br ALIGN="LEFT"/>test_unregister_identifier_invalid(registry, fmtcls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.TestUnifiedInputRegistry" [color="black", fontcolor="black", label=<{TestUnifiedInputRegistry|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_compat_get_reader(registry, fmtcls1)<br ALIGN="LEFT"/>test_compat_read(registry, fmtcls1)<br ALIGN="LEFT"/>test_compat_register_reader(registry, fmtcls1)<br ALIGN="LEFT"/>test_compat_unregister_reader(registry, fmtcls1)<br ALIGN="LEFT"/>test_delay_doc_updates(registry, fmtcls1)<br ALIGN="LEFT"/>test_get_formats(registry)<br ALIGN="LEFT"/>test_get_reader(registry, fmtcls)<br ALIGN="LEFT"/>test_get_reader_invalid(registry, fmtcls)<br ALIGN="LEFT"/>test_identify_read_format(registry)<br ALIGN="LEFT"/>test_inherited_read_registration(registry)<br ALIGN="LEFT"/>test_read_directory(tmp_path, registry, fmtcls1)<br ALIGN="LEFT"/>test_read_format_noreader(registry, fmtcls1)<br ALIGN="LEFT"/>test_read_identifier(tmp_path, registry, fmtcls1, fmtcls2)<br ALIGN="LEFT"/>test_read_noformat(registry, fmtcls1)<br ALIGN="LEFT"/>test_read_noformat_arbitrary(registry, original, fmtcls1)<br ALIGN="LEFT"/>test_read_noformat_arbitrary_file(tmp_path, registry, original)<br ALIGN="LEFT"/>test_read_non_existing_unknown_ext(fmtcls1)<br ALIGN="LEFT"/>test_read_toomanyformats(registry, fmtcls1, fmtcls2)<br ALIGN="LEFT"/>test_read_uses_priority(registry, fmtcls1, fmtcls2)<br ALIGN="LEFT"/>test_read_valid_return(registry, fmtcls)<br ALIGN="LEFT"/>test_register_reader(registry, fmtcls1, fmtcls2)<br ALIGN="LEFT"/>test_register_reader_force(registry, fmtcls1)<br ALIGN="LEFT"/>test_register_reader_invalid(registry, fmtcls1)<br ALIGN="LEFT"/>test_register_readers_with_same_name_on_different_classes(registry)<br ALIGN="LEFT"/>test_unregister_reader(registry, fmtcls1)<br ALIGN="LEFT"/>test_unregister_reader_invalid(registry, fmtcls1)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.TestUnifiedOutputRegistry" [color="black", fontcolor="black", label=<{TestUnifiedOutputRegistry|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_compat_get_writer(registry, fmtcls1)<br ALIGN="LEFT"/>test_compat_register_writer(registry, fmtcls1)<br ALIGN="LEFT"/>test_compat_unregister_writer(registry, fmtcls1)<br ALIGN="LEFT"/>test_compat_write(registry, fmtcls1)<br ALIGN="LEFT"/>test_delay_doc_updates(registry, fmtcls1)<br ALIGN="LEFT"/>test_get_formats(registry)<br ALIGN="LEFT"/>test_get_writer(registry, fmtcls1)<br ALIGN="LEFT"/>test_get_writer_invalid(registry, fmtcls1)<br ALIGN="LEFT"/>test_identify_write_format(registry, fmtcls1)<br ALIGN="LEFT"/>test_inherited_write_registration(registry)<br ALIGN="LEFT"/>test_register_writer(registry, fmtcls1, fmtcls2)<br ALIGN="LEFT"/>test_register_writer_force(registry, fmtcls1)<br ALIGN="LEFT"/>test_register_writer_invalid(registry, fmtcls)<br ALIGN="LEFT"/>test_unregister_writer(registry, fmtcls1)<br ALIGN="LEFT"/>test_unregister_writer_invalid(registry, fmtcls)<br ALIGN="LEFT"/>test_write_format_nowriter(registry, fmtcls1)<br ALIGN="LEFT"/>test_write_identifier(registry, fmtcls1, fmtcls2)<br ALIGN="LEFT"/>test_write_noformat(registry, fmtcls1)<br ALIGN="LEFT"/>test_write_noformat_arbitrary(registry, original, fmtcls1)<br ALIGN="LEFT"/>test_write_noformat_arbitrary_file(tmp_path, registry, original)<br ALIGN="LEFT"/>test_write_return(registry, fmtcls1)<br ALIGN="LEFT"/>test_write_toomanyformats(registry, fmtcls1, fmtcls2)<br ALIGN="LEFT"/>test_write_uses_priority(registry, fmtcls1, fmtcls2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.TestUnitSphericalCosLatDifferential" [color="black", fontcolor="black", label=<{TestUnitSphericalCosLatDifferential|<br ALIGN="LEFT"/>|test_transform(matrix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_arithmetic.TestUnitSphericalDifferential" [color="black", fontcolor="black", label=<{TestUnitSphericalDifferential|USD_cls<br ALIGN="LEFT"/>e : dict<br ALIGN="LEFT"/>s<br ALIGN="LEFT"/>sf : dict<br ALIGN="LEFT"/>|test_differential_arithmetic(omit_coslat)<br ALIGN="LEFT"/>test_differential_init_errors(omit_coslat)<br ALIGN="LEFT"/>test_name_coslat(omit_coslat)<br ALIGN="LEFT"/>test_simple_differentials(omit_coslat)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.TestUnitSphericalRepresentation" [color="black", fontcolor="black", label=<{TestUnitSphericalRepresentation|<br ALIGN="LEFT"/>|test_broadcasting()<br ALIGN="LEFT"/>test_broadcasting_mismatch()<br ALIGN="LEFT"/>test_empty_init()<br ALIGN="LEFT"/>test_getitem()<br ALIGN="LEFT"/>test_getitem_scalar()<br ALIGN="LEFT"/>test_init_array()<br ALIGN="LEFT"/>test_init_array_nocopy()<br ALIGN="LEFT"/>test_init_lonlat()<br ALIGN="LEFT"/>test_init_quantity()<br ALIGN="LEFT"/>test_name()<br ALIGN="LEFT"/>test_readonly()<br ALIGN="LEFT"/>test_representation_shortcuts()<br ALIGN="LEFT"/>test_reprobj()<br ALIGN="LEFT"/>test_transform()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation_arithmetic.TestUnitVectorsAndScales" [color="black", fontcolor="black", label=<{TestUnitVectorsAndScales|<br ALIGN="LEFT"/>|check_scale_factors(sf, rep)<br ALIGN="LEFT"/>check_unit_vectors(e)<br ALIGN="LEFT"/>test_cartesian()<br ALIGN="LEFT"/>test_cylindrical()<br ALIGN="LEFT"/>test_physical_spherical()<br ALIGN="LEFT"/>test_radial()<br ALIGN="LEFT"/>test_spherical()<br ALIGN="LEFT"/>test_unit_spherical()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitting_parallel.TestUnits" [color="black", fontcolor="black", label=<{TestUnits|<br ALIGN="LEFT"/>|test_basic()<br ALIGN="LEFT"/>test_units_no_input_units()<br ALIGN="LEFT"/>test_units_with_wcs()<br ALIGN="LEFT"/>test_units_with_wcs_2d()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_mappings.TestUnitsMapping" [color="black", fontcolor="black", label=<{TestUnitsMapping|<br ALIGN="LEFT"/>|test___init__()<br ALIGN="LEFT"/>test_evaluate()<br ALIGN="LEFT"/>test_repr()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_format.TestUnknownFormat" [color="black", fontcolor="black", label=<{TestUnknownFormat|UNKNOWN_MSG : str<br ALIGN="LEFT"/>|test_unknown_output_format()<br ALIGN="LEFT"/>test_unknown_parser()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.TestUpdate" [color="black", fontcolor="black", label=<{TestUpdate|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>c<br ALIGN="LEFT"/>d<br ALIGN="LEFT"/>|test_different_lengths()<br ALIGN="LEFT"/>test_invalid_inputs()<br ALIGN="LEFT"/>test_merge_operator()<br ALIGN="LEFT"/>test_metadata_conflict()<br ALIGN="LEFT"/>test_update()<br ALIGN="LEFT"/>test_update_operator()<br ALIGN="LEFT"/>test_update_without_copy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.iers.tests.test_leap_second.TestUpdateLeapSeconds" [color="black", fontcolor="black", label=<{TestUpdateLeapSeconds|erfa_ls<br ALIGN="LEFT"/>ls<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_bad_day()<br ALIGN="LEFT"/>test_bad_jump()<br ALIGN="LEFT"/>test_bad_month()<br ALIGN="LEFT"/>test_built_in_up_to_date()<br ALIGN="LEFT"/>test_update(n_short)<br ALIGN="LEFT"/>test_update_initialize_erfa()<br ALIGN="LEFT"/>test_update_overwrite()<br ALIGN="LEFT"/>test_update_with_built_in()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_update_leap_seconds.TestUpdateLeapSeconds" [color="black", fontcolor="black", label=<{TestUpdateLeapSeconds|built_in<br ALIGN="LEFT"/>erfa_ls<br ALIGN="LEFT"/>good_enough<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>teardown_method()<br ALIGN="LEFT"/>test_auto_update_always_good()<br ALIGN="LEFT"/>test_auto_update_bad_file()<br ALIGN="LEFT"/>test_auto_update_corrupt_file(tmp_path)<br ALIGN="LEFT"/>test_auto_update_expired_file(tmp_path)<br ALIGN="LEFT"/>test_auto_update_leap_seconds()<br ALIGN="LEFT"/>test_init_thread_safety(monkeypatch)<br ALIGN="LEFT"/>test_never_expired_if_connected()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_util.TestUtilMode" [color="black", fontcolor="black", label=<{TestUtilMode|<br ALIGN="LEFT"/>|test_mode_gzip()<br ALIGN="LEFT"/>test_mode_normal_buffering()<br ALIGN="LEFT"/>test_mode_normal_no_buffering()<br ALIGN="LEFT"/>test_mode_normalization()<br ALIGN="LEFT"/>test_mode_pil_image()<br ALIGN="LEFT"/>test_mode_strings()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_util.TestUtils" [color="black", fontcolor="black", label=<{TestUtils|<br ALIGN="LEFT"/>|test_ignore_sigint()<br ALIGN="LEFT"/>test_realign_dtype()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_table.TestVLATables" [color="black", fontcolor="black", label=<{TestVLATables|<br ALIGN="LEFT"/>|test_copy_vla()<br ALIGN="LEFT"/>test_empty_vla_raw_data()<br ALIGN="LEFT"/>test_extend_variable_length_array()<br ALIGN="LEFT"/>test_getdata_vla()<br ALIGN="LEFT"/>test_heapsize_P_limit()<br ALIGN="LEFT"/>test_heapsize_Q_limit()<br ALIGN="LEFT"/>test_heterogeneous_VLA_tables()<br ALIGN="LEFT"/>test_multidim_VLA_tables()<br ALIGN="LEFT"/>test_tolist()<br ALIGN="LEFT"/>test_tolist_from_file()<br ALIGN="LEFT"/>test_variable_length_columns()<br ALIGN="LEFT"/>test_variable_length_table_format_pa_from_list()<br ALIGN="LEFT"/>test_variable_length_table_format_pa_from_object_array()<br ALIGN="LEFT"/>test_variable_length_table_format_pd_from_list()<br ALIGN="LEFT"/>test_variable_length_table_format_pd_from_object_array()<br ALIGN="LEFT"/>test_vla_slice()<br ALIGN="LEFT"/>test_vla_slice2()<br ALIGN="LEFT"/>test_vla_with_gap()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_operations.TestVStack" [color="black", fontcolor="black", label=<{TestVStack|meta_merge : OrderedDict<br ALIGN="LEFT"/>t1<br ALIGN="LEFT"/>t2<br ALIGN="LEFT"/>t3<br ALIGN="LEFT"/>t4<br ALIGN="LEFT"/>t5<br ALIGN="LEFT"/>|test_bad_input_type(operation_table_type)<br ALIGN="LEFT"/>test_col_meta_merge_inner(operation_table_type)<br ALIGN="LEFT"/>test_col_meta_merge_outer(operation_table_type)<br ALIGN="LEFT"/>test_mixin_functionality(mixin_cols, empty_table1, empty_table2)<br ALIGN="LEFT"/>test_stack_basic_inner(operation_table_type)<br ALIGN="LEFT"/>test_stack_basic_outer(operation_table_type)<br ALIGN="LEFT"/>test_stack_incompatible(operation_table_type)<br ALIGN="LEFT"/>test_stack_rows(operation_table_type)<br ALIGN="LEFT"/>test_stack_table_column(operation_table_type)<br ALIGN="LEFT"/>test_table_meta_merge(operation_table_type)<br ALIGN="LEFT"/>test_table_meta_merge_conflict(operation_table_type)<br ALIGN="LEFT"/>test_validate_join_type()<br ALIGN="LEFT"/>test_vstack_different_representation()<br ALIGN="LEFT"/>test_vstack_different_sky_coordinates()<br ALIGN="LEFT"/>test_vstack_inputs_not_modified()<br ALIGN="LEFT"/>test_vstack_one_masked(operation_table_type)<br ALIGN="LEFT"/>test_vstack_one_table(operation_table_type)<br ALIGN="LEFT"/>test_vstack_structured_column()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_basic.TestVal2" [color="black", fontcolor="black", label=<{TestVal2|<br ALIGN="LEFT"/>|test_broadcast_not_writable()<br ALIGN="LEFT"/>test_broadcast_one_not_writable()<br ALIGN="LEFT"/>test_unused_val2_raises(d)<br ALIGN="LEFT"/>test_val2()<br ALIGN="LEFT"/>test_val_broadcasts_against_val2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_non_ufuncs.TestVariousProductFunctions" [color="black", fontcolor="black", label=<{TestVariousProductFunctions|<br ALIGN="LEFT"/>|test_cross()<br ALIGN="LEFT"/>test_dot()<br ALIGN="LEFT"/>test_einsum()<br ALIGN="LEFT"/>test_einsum_path()<br ALIGN="LEFT"/>test_inner()<br ALIGN="LEFT"/>test_kron()<br ALIGN="LEFT"/>test_outer()<br ALIGN="LEFT"/>test_tensordot()<br ALIGN="LEFT"/>test_vdot()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tests.test_table.TestVerifyOptions" [color="black", fontcolor="black", label=<{TestVerifyOptions|<br ALIGN="LEFT"/>|test_conf_verify_exception()<br ALIGN="LEFT"/>test_conf_verify_ignore()<br ALIGN="LEFT"/>test_conf_verify_warn()<br ALIGN="LEFT"/>test_default()<br ALIGN="LEFT"/>test_verify_exception()<br ALIGN="LEFT"/>test_verify_ignore()<br ALIGN="LEFT"/>test_verify_warn()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.TestViewing" [color="black", fontcolor="black", label=<{TestViewing|<br ALIGN="LEFT"/>|test_viewing_as_new_dtype()<br ALIGN="LEFT"/>test_viewing_as_new_dtype_not_implemented(new_dtype)<br ALIGN="LEFT"/>test_viewing_as_new_structured_dtype()<br ALIGN="LEFT"/>test_viewing_as_new_type()<br ALIGN="LEFT"/>test_viewing_as_something_impossible()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.tests.test_wcs.TestWcsWithTime" [color="black", fontcolor="black", label=<{TestWcsWithTime|header<br ALIGN="LEFT"/>w<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test_keywods2wcsprm()<br ALIGN="LEFT"/>test_transforms()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.tests.test_web_profile.TestWebProfile" [color="black", fontcolor="black", label=<{TestWebProfile|client1<br ALIGN="LEFT"/>client1_id : NoneType<br ALIGN="LEFT"/>client1_key : NoneType<br ALIGN="LEFT"/>client2<br ALIGN="LEFT"/>client2_id : NoneType<br ALIGN="LEFT"/>client2_key : NoneType<br ALIGN="LEFT"/>dialog<br ALIGN="LEFT"/>hub<br ALIGN="LEFT"/>tmpdir : str<br ALIGN="LEFT"/>|setup_method(tmp_path)<br ALIGN="LEFT"/>teardown_method()<br ALIGN="LEFT"/>test_web_profile()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitters.TestWeightedFittingWithOutlierRemoval" [color="black", fontcolor="black", label=<{TestWeightedFittingWithOutlierRemoval|weights<br ALIGN="LEFT"/>weights1d<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>x1d<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>z1d<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_1d_set_with_common_weights_with_sigma_clip()<br ALIGN="LEFT"/>test_1d_set_with_weights_with_sigma_clip()<br ALIGN="LEFT"/>test_1d_with_weights_with_sigma_clip()<br ALIGN="LEFT"/>test_1d_with_weights_without_sigma_clip()<br ALIGN="LEFT"/>test_1d_without_weights_with_sigma_clip()<br ALIGN="LEFT"/>test_1d_without_weights_without_sigma_clip()<br ALIGN="LEFT"/>test_2d_linear_with_weights_with_sigma_clip()<br ALIGN="LEFT"/>test_2d_linear_with_weights_without_sigma_clip()<br ALIGN="LEFT"/>test_2d_with_weights_with_sigma_clip(base_fitter)<br ALIGN="LEFT"/>test_2d_with_weights_without_sigma_clip(fitter)<br ALIGN="LEFT"/>test_2d_without_weights_with_sigma_clip()<br ALIGN="LEFT"/>test_2d_without_weights_without_sigma_clip()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.TestWhere" [color="black", fontcolor="black", label=<{TestWhere|<br ALIGN="LEFT"/>|test_exception_with_where_quantity()<br ALIGN="LEFT"/>test_where()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitting_parallel.TestWorld" [color="black", fontcolor="black", label=<{TestWorld|<br ALIGN="LEFT"/>|test_array()<br ALIGN="LEFT"/>test_array_dimension_mismatch()<br ALIGN="LEFT"/>test_array_length_mismatch()<br ALIGN="LEFT"/>test_array_shape_mismatch()<br ALIGN="LEFT"/>test_invalid_type()<br ALIGN="LEFT"/>test_no_world()<br ALIGN="LEFT"/>test_wcs_1d()<br ALIGN="LEFT"/>test_wcs_pixel_dimension_mismatch()<br ALIGN="LEFT"/>test_wcs_world_dimension_mismatch()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_projections.TestZenithalPerspective" [color="black", fontcolor="black", label=<{TestZenithalPerspective|azp<br ALIGN="LEFT"/>pv_kw<br ALIGN="LEFT"/>wazp<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_AZP_p2s()<br ALIGN="LEFT"/>test_AZP_s2p()<br ALIGN="LEFT"/>test_validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_bounding_box.Test_BoundingDomain" [color="black", fontcolor="black", label=<{Test_BoundingDomain|BoundingDomain<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test___call__()<br ALIGN="LEFT"/>test__all_out_output()<br ALIGN="LEFT"/>test__base_ouput()<br ALIGN="LEFT"/>test__evaluate()<br ALIGN="LEFT"/>test__evaluate_model()<br ALIGN="LEFT"/>test__get_index()<br ALIGN="LEFT"/>test__get_name()<br ALIGN="LEFT"/>test__get_order()<br ALIGN="LEFT"/>test__get_valid_outputs_unit()<br ALIGN="LEFT"/>test__modify_output()<br ALIGN="LEFT"/>test__prepare_inputs()<br ALIGN="LEFT"/>test__prepare_outputs()<br ALIGN="LEFT"/>test__set_outputs_unit()<br ALIGN="LEFT"/>test__validate_ignored()<br ALIGN="LEFT"/>test_create()<br ALIGN="LEFT"/>test_evaluate()<br ALIGN="LEFT"/>test_fix_inputs()<br ALIGN="LEFT"/>test_ignored()<br ALIGN="LEFT"/>test_ignored_inputs()<br ALIGN="LEFT"/>test_model()<br ALIGN="LEFT"/>test_order()<br ALIGN="LEFT"/>test_prepare_outputs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.tests.test_fitsdiff.Test_FITSDiff" [color="black", fontcolor="black", label=<{Test_FITSDiff|<br ALIGN="LEFT"/>|test_FITSDiff_report(home_is_temp)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_bounding_box.Test_Interval" [color="black", fontcolor="black", label=<{Test_Interval|<br ALIGN="LEFT"/>|test__ignored_interval()<br ALIGN="LEFT"/>test__validate_bounds()<br ALIGN="LEFT"/>test__validate_shape()<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>test_create()<br ALIGN="LEFT"/>test_domain()<br ALIGN="LEFT"/>test_outside()<br ALIGN="LEFT"/>test_validate()<br ALIGN="LEFT"/>test_validate_with_SpectralCoord()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.parameter.test_parameter.Test_Parameter" [color="black", fontcolor="black", label=<{Test_Parameter|<br ALIGN="LEFT"/>|test_Parameter_default()<br ALIGN="LEFT"/>test_Parameter_init(kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_bounding_box.Test_SelectorArgument" [color="black", fontcolor="black", label=<{Test_SelectorArgument|<br ALIGN="LEFT"/>|test_create()<br ALIGN="LEFT"/>test_get_fixed_value()<br ALIGN="LEFT"/>test_get_selector()<br ALIGN="LEFT"/>test_is_argument()<br ALIGN="LEFT"/>test_name()<br ALIGN="LEFT"/>test_named_tuple()<br ALIGN="LEFT"/>test_pretty_repr()<br ALIGN="LEFT"/>test_validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_bounding_box.Test_SelectorArguments" [color="black", fontcolor="black", label=<{Test_SelectorArguments|<br ALIGN="LEFT"/>|test_add_ignore()<br ALIGN="LEFT"/>test_create()<br ALIGN="LEFT"/>test_get_fixed_values()<br ALIGN="LEFT"/>test_get_selector()<br ALIGN="LEFT"/>test_ignore()<br ALIGN="LEFT"/>test_is_argument()<br ALIGN="LEFT"/>test_is_selector()<br ALIGN="LEFT"/>test_named_tuple()<br ALIGN="LEFT"/>test_pretty_repr()<br ALIGN="LEFT"/>test_reduce()<br ALIGN="LEFT"/>test_selector_index()<br ALIGN="LEFT"/>test_validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_utils.Test_SpecialOperatorsDict" [color="black", fontcolor="black", label=<{Test_SpecialOperatorsDict|key : str<br ALIGN="LEFT"/>val : str<br ALIGN="LEFT"/>|setup_method()<br ALIGN="LEFT"/>test__SpecialOperatorsDict__get_unique_id()<br ALIGN="LEFT"/>test__SpecialOperatorsDict_add()<br ALIGN="LEFT"/>test___setitem__()<br ALIGN="LEFT"/>test__set_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.funcs.test_funcs.Test_ZatValue" [color="black", fontcolor="black", label=<{Test_ZatValue|cosmo<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_bad_broadcast()<br ALIGN="LEFT"/>test_broadcast_arguments()<br ALIGN="LEFT"/>test_broadcast_bracket()<br ALIGN="LEFT"/>test_scalar_input_to_output()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_table.Test__Astropy_Table__" [color="black", fontcolor="black", label=<{Test__Astropy_Table__|<br ALIGN="LEFT"/>|test_kwargs_exception()<br ALIGN="LEFT"/>test_simple_1()<br ALIGN="LEFT"/>test_simple_2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_utils.Test_aszarr" [color="black", fontcolor="black", label=<{Test_aszarr|<br ALIGN="LEFT"/>|test_invalid(z, exc)<br ALIGN="LEFT"/>test_pandas()<br ALIGN="LEFT"/>test_valid(z, expect)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.funcs.test_comparison.Test_cosmology_equal" [color="black", fontcolor="black", label=<{Test_cosmology_equal|<br ALIGN="LEFT"/>|test_cosmology_equal_equivalent(cosmo, cosmo_eqvxflat, pert_cosmo, pert_cosmo_eqvxflat)<br ALIGN="LEFT"/>test_cosmology_equal_equivalent_format_specify(cosmo, format, converted, cosmo_eqvxflat)<br ALIGN="LEFT"/>test_cosmology_equal_format_auto(cosmo, converted, xfail_cant_autoidentify)<br ALIGN="LEFT"/>test_cosmology_equal_format_error(cosmo, converted)<br ALIGN="LEFT"/>test_cosmology_equal_format_specify(cosmo, format, converted, pert_converted)<br ALIGN="LEFT"/>test_cosmology_equal_simple(cosmo, pert_cosmo)<br ALIGN="LEFT"/>test_cosmology_equal_too_many_cosmo(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.funcs.test_comparison.Test_cosmology_not_equal" [color="black", fontcolor="black", label=<{Test_cosmology_not_equal|<br ALIGN="LEFT"/>|test_cosmology_not_equal_equivalent(cosmo, cosmo_eqvxflat, pert_cosmo, pert_cosmo_eqvxflat)<br ALIGN="LEFT"/>test_cosmology_not_equal_equivalent_format_specify(cosmo, format, converted, cosmo_eqvxflat)<br ALIGN="LEFT"/>test_cosmology_not_equal_format_auto(cosmo, pert_converted, xfail_cant_autoidentify)<br ALIGN="LEFT"/>test_cosmology_not_equal_format_error(cosmo, converted)<br ALIGN="LEFT"/>test_cosmology_not_equal_format_specify(cosmo, format, converted, pert_converted)<br ALIGN="LEFT"/>test_cosmology_not_equal_simple(cosmo, pert_cosmo)<br ALIGN="LEFT"/>test_cosmology_not_equal_too_many_cosmo(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_realizations.Test_default_cosmology" [color="black", fontcolor="black", label=<{Test_default_cosmology|<br ALIGN="LEFT"/>|test_get_current()<br ALIGN="LEFT"/>test_validate_cosmo(name)<br ALIGN="LEFT"/>test_validate_default()<br ALIGN="LEFT"/>test_validate_fail()<br ALIGN="LEFT"/>test_validate_no_default()<br ALIGN="LEFT"/>test_validate_str(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.funcs.test_comparison.Test_parse_format" [color="black", fontcolor="black", label=<{Test_parse_format|<br ALIGN="LEFT"/>|converted(to_format, format)<br ALIGN="LEFT"/>test_convert(converted, format, cosmo)<br ALIGN="LEFT"/>test_parse_format_error_noncosmology_cant_convert()<br ALIGN="LEFT"/>test_parse_format_error_wrong_format(cosmo)<br ALIGN="LEFT"/>test_parse_format_vectorized(cosmo, format, converted)<br ALIGN="LEFT"/>test_parse_formats_vectorized(cosmo)<br ALIGN="LEFT"/>test_shortcut(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_units.Test_with_redshift" [color="black", fontcolor="black", label=<{Test_with_redshift|<br ALIGN="LEFT"/>|cosmo()<br ALIGN="LEFT"/>test_cosmo_different(cosmo)<br ALIGN="LEFT"/>test_distance(kind)<br ALIGN="LEFT"/>test_distance_default()<br ALIGN="LEFT"/>test_distance_off(cosmo)<br ALIGN="LEFT"/>test_distance_wrong_kind()<br ALIGN="LEFT"/>test_hubble(cosmo)<br ALIGN="LEFT"/>test_hubble_off(cosmo)<br ALIGN="LEFT"/>test_no_equivalency(cosmo)<br ALIGN="LEFT"/>test_temperature(cosmo)<br ALIGN="LEFT"/>test_temperature_off(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.tests.test_read.test_initial_column_fill_values.Tester" [color="black", fontcolor="black", label=<{Tester|header_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_w0wacdm.Testw0waCDM" [color="black", fontcolor="black", label=<{Testw0waCDM|cls<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_clone_change_param(cosmo)<br ALIGN="LEFT"/>test_comoving_distance_example(cosmo_cls, args, kwargs, expected)<br ALIGN="LEFT"/>test_repr(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_w(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_w0wzcdm.Testw0wzCDM" [color="black", fontcolor="black", label=<{Testw0wzCDM|cls<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_Otot(cosmo, z)<br ALIGN="LEFT"/>test_Otot_overflow(cosmo)<br ALIGN="LEFT"/>test_clone_change_param(cosmo)<br ALIGN="LEFT"/>test_comoving_distance_example(cosmo_cls, args, kwargs, expected)<br ALIGN="LEFT"/>test_comoving_distance_mathematica(cosmo_cls)<br ALIGN="LEFT"/>test_repr(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_toformat_model(cosmo, to_format, method_name)<br ALIGN="LEFT"/>test_w(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_w0cdm.TestwCDM" [color="black", fontcolor="black", label=<{TestwCDM|cls<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_clone_change_param(cosmo)<br ALIGN="LEFT"/>test_comoving_distance_example(cosmo_cls, args, kwargs, expected)<br ALIGN="LEFT"/>test_repr(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_w(cosmo, z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_wpwazpcdm.TestwpwaCDM" [color="black", fontcolor="black", label=<{TestwpwaCDM|cls<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>test_clone_change_param(cosmo)<br ALIGN="LEFT"/>test_comoving_distance_example(cosmo_cls, args, kwargs, expected)<br ALIGN="LEFT"/>test_repr(cosmo_cls, cosmo)<br ALIGN="LEFT"/>test_w(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.parsing.ThreadSafeParser" [color="black", fontcolor="black", label=<{ThreadSafeParser|parser<br ALIGN="LEFT"/>|parse()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.standard_profile.ThreadingXMLRPCServer" [color="black", fontcolor="black", label=<{ThreadingXMLRPCServer|log : NoneType<br ALIGN="LEFT"/>|handle_error(request, client_address)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.ticklabels.TickLabels" [color="black", fontcolor="black", label=<{TickLabels|angle : defaultdict<br ALIGN="LEFT"/>data : defaultdict<br ALIGN="LEFT"/>disp : defaultdict<br ALIGN="LEFT"/>ha<br ALIGN="LEFT"/>text : defaultdict<br ALIGN="LEFT"/>va<br ALIGN="LEFT"/>world : defaultdict<br ALIGN="LEFT"/>xy<br ALIGN="LEFT"/>|add(axis, world, pixel, angle, text, axis_displacement, data)<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>draw(renderer, bboxes, ticklabels_bbox, tick_out_size)<br ALIGN="LEFT"/>get_pad()<br ALIGN="LEFT"/>get_visible_axes()<br ALIGN="LEFT"/>set_exclude_overlapping(exclude_overlapping)<br ALIGN="LEFT"/>set_pad(value)<br ALIGN="LEFT"/>set_simplify(simplify)<br ALIGN="LEFT"/>set_visible_axes(visible_axes)<br ALIGN="LEFT"/>simplify_labels()<br ALIGN="LEFT"/>sort()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.ticks.Ticks" [color="black", fontcolor="black", label=<{Ticks|angle : defaultdict<br ALIGN="LEFT"/>disp : defaultdict<br ALIGN="LEFT"/>minor_angle : defaultdict<br ALIGN="LEFT"/>minor_disp : defaultdict<br ALIGN="LEFT"/>minor_pixel : defaultdict<br ALIGN="LEFT"/>minor_world : defaultdict<br ALIGN="LEFT"/>out_size<br ALIGN="LEFT"/>pixel : defaultdict<br ALIGN="LEFT"/>ticks_locs : defaultdict<br ALIGN="LEFT"/>world : defaultdict<br ALIGN="LEFT"/>|add(axis, world, pixel, angle, axis_displacement)<br ALIGN="LEFT"/>add_minor(minor_axis, minor_world, minor_pixel, minor_angle, minor_axis_displacement)<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>display_minor_ticks(display_minor_ticks)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_display_minor_ticks()<br ALIGN="LEFT"/>get_minor_ticksize()<br ALIGN="LEFT"/>get_minor_world()<br ALIGN="LEFT"/>get_tick_out()<br ALIGN="LEFT"/>get_ticksize()<br ALIGN="LEFT"/>get_visible_axes()<br ALIGN="LEFT"/>set_minor_ticksize(ticksize)<br ALIGN="LEFT"/>set_tick_out(tick_out)<br ALIGN="LEFT"/>set_ticksize(ticksize)<br ALIGN="LEFT"/>set_visible_axes(visible_axes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.core.Time" [color="black", fontcolor="black", label=<{Time|FORMATS : dict<br ALIGN="LEFT"/>SCALES : tuple<br ALIGN="LEFT"/>delta_tdb_tt<br ALIGN="LEFT"/>delta_ut1_utc<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>in_subfmt : str<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>mask : bool<br ALIGN="LEFT"/>out_subfmt : str<br ALIGN="LEFT"/>precision : int<br ALIGN="LEFT"/>writeable : bool<br ALIGN="LEFT"/>|earth_rotation_angle(longitude)<br ALIGN="LEFT"/>get_delta_ut1_utc(iers_table, return_status)<br ALIGN="LEFT"/>light_travel_time(skycoord, kind, location, ephemeris)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>now()<br ALIGN="LEFT"/>sidereal_time(kind, longitude, model)<br ALIGN="LEFT"/>strftime(format_spec)<br ALIGN="LEFT"/>strptime(time_string, format_string)<br ALIGN="LEFT"/>to_datetime(timezone, leap_second_strict)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeAstropyTime" [color="black", fontcolor="black", label=<{TimeAstropyTime|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" [color="black", fontcolor="black", label=<{TimeAttribute|<br ALIGN="LEFT"/>|convert_input(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.core.TimeBase" [color="black", fontcolor="black", label=<{TimeBase|SCALES<br ALIGN="LEFT"/>cache<br ALIGN="LEFT"/>format<br ALIGN="LEFT"/>in_subfmt<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>masked<br ALIGN="LEFT"/>out_subfmt<br ALIGN="LEFT"/>precision<br ALIGN="LEFT"/>scale<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>writeable<br ALIGN="LEFT"/>|argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argsort(axis, kind)<br ALIGN="LEFT"/>copy(format)<br ALIGN="LEFT"/>insert(obj, values, axis)<br ALIGN="LEFT"/>isclose(other, atol)<br ALIGN="LEFT"/>max(axis, out, keepdims)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out, keepdims)<br ALIGN="LEFT"/>replicate(format, copy, cls)<br ALIGN="LEFT"/>sort(axis)<br ALIGN="LEFT"/>to_string()<br ALIGN="LEFT"/>to_value(format, subfmt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeBesselianEpoch" [color="black", fontcolor="black", label=<{TimeBesselianEpoch|epoch_to_jd : str<br ALIGN="LEFT"/>jd_to_epoch : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimeBesselianEpochString" [color="black", fontcolor="black", label=<{TimeBesselianEpochString|epoch_prefix : str<br ALIGN="LEFT"/>epoch_to_jd : str<br ALIGN="LEFT"/>jd_to_epoch : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimeCxcSec" [color="black", fontcolor="black", label=<{TimeCxcSec|epoch_format : str<br ALIGN="LEFT"/>epoch_scale : str<br ALIGN="LEFT"/>epoch_val : str<br ALIGN="LEFT"/>epoch_val2 : NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimeDatetime" [color="black", fontcolor="black", label=<{TimeDatetime|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val1, val2)<br ALIGN="LEFT"/>to_value(timezone, leap_second_strict, parent, out_subfmt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeDatetime64" [color="black", fontcolor="black", label=<{TimeDatetime64|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>precision : int<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val1, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeDecimalYear" [color="black", fontcolor="black", label=<{TimeDecimalYear|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val1, val2)<br ALIGN="LEFT"/>to_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.core.TimeDelta" [color="black", fontcolor="black", label=<{TimeDelta|FORMATS : dict<br ALIGN="LEFT"/>SCALES : tuple<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>precision : int<br ALIGN="LEFT"/>|isclose(other, atol, rtol)<br ALIGN="LEFT"/>replicate()<br ALIGN="LEFT"/>to(unit, equivalencies)<br ALIGN="LEFT"/>to_datetime()<br ALIGN="LEFT"/>to_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeDeltaDatetime" [color="black", fontcolor="black", label=<{TimeDeltaDatetime|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val1, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeDeltaFormat" [color="black", fontcolor="black", label=<{TimeDeltaFormat|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.core.TimeDeltaInfo" [color="black", fontcolor="black", label=<{TimeDeltaInfo|<br ALIGN="LEFT"/>|new_like(cols, length, metadata_conflicts, name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeDeltaJD" [color="black", fontcolor="black", label=<{TimeDeltaJD|name : str<br ALIGN="LEFT"/>unit : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.core.TimeDeltaMissingUnitWarning" [color="black", fontcolor="red", label=<{TimeDeltaMissingUnitWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimeDeltaNumeric" [color="black", fontcolor="black", label=<{TimeDeltaNumeric|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val1, val2)<br ALIGN="LEFT"/>to_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeDeltaQuantityString" [color="black", fontcolor="black", label=<{TimeDeltaQuantityString|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>re_float : str<br ALIGN="LEFT"/>re_ydhms<br ALIGN="LEFT"/>subfmts : tuple<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|fix_comp_vals_overflow(comp_vals)<br ALIGN="LEFT"/>get_multi_comps(jd1, jd2)<br ALIGN="LEFT"/>parse_string(timestr)<br ALIGN="LEFT"/>set_jds(val1, val2)<br ALIGN="LEFT"/>to_value(parent, out_subfmt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeDeltaSec" [color="black", fontcolor="black", label=<{TimeDeltaSec|name : str<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimeEpochDate" [color="black", fontcolor="black", label=<{TimeEpochDate|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val1, val2)<br ALIGN="LEFT"/>to_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeEpochDateString" [color="black", fontcolor="black", label=<{TimeEpochDateString|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val1, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeFITS" [color="black", fontcolor="black", label=<{TimeFITS|name : str<br ALIGN="LEFT"/>out_subfmt<br ALIGN="LEFT"/>subfmts : tuple<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|parse_string(timestr, subfmts)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeFormat" [color="black", fontcolor="black", label=<{TimeFormat|in_subfmt<br ALIGN="LEFT"/>jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>out_subfmt<br ALIGN="LEFT"/>precision<br ALIGN="LEFT"/>scale<br ALIGN="LEFT"/>subfmts : tuple<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|fill_value(subfmt)<br ALIGN="LEFT"/><I>set_jds</I>(val1, val2)<br ALIGN="LEFT"/>to_value(parent, out_subfmt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeFromEpoch" [color="black", fontcolor="black", label=<{TimeFromEpoch|epoch<br ALIGN="LEFT"/>jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val1, val2)<br ALIGN="LEFT"/>to_value(parent)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeGPS" [color="black", fontcolor="black", label=<{TimeGPS|epoch_format : str<br ALIGN="LEFT"/>epoch_scale : str<br ALIGN="LEFT"/>epoch_val : str<br ALIGN="LEFT"/>epoch_val2 : NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimeISO" [color="black", fontcolor="black", label=<{TimeISO|fast_parser_pars : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>subfmts : tuple<br ALIGN="LEFT"/>|parse_string(timestr, subfmts)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeISOT" [color="black", fontcolor="black", label=<{TimeISOT|fast_parser_pars : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>subfmts : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.core.TimeInfo" [color="black", fontcolor="black", label=<{TimeInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.core.TimeInfoBase" [color="black", fontcolor="black", label=<{TimeInfoBase|attr_names<br ALIGN="LEFT"/>info_summary_stats : staticmethod<br ALIGN="LEFT"/>mask_val<br ALIGN="LEFT"/>serialize_method : dict<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|get_sortable_arrays()<br ALIGN="LEFT"/>new_like(cols, length, metadata_conflicts, name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeJD" [color="black", fontcolor="black", label=<{TimeJD|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|set_jds(val1, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeJulianEpoch" [color="black", fontcolor="black", label=<{TimeJulianEpoch|epoch_to_jd : str<br ALIGN="LEFT"/>jd_to_epoch : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimeJulianEpochString" [color="black", fontcolor="black", label=<{TimeJulianEpochString|epoch_prefix : str<br ALIGN="LEFT"/>epoch_to_jd : str<br ALIGN="LEFT"/>jd_to_epoch : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.tests.test_basic.test_subfmts_regex.TimeLongYear" [color="black", fontcolor="black", label=<{TimeLongYear|name : str<br ALIGN="LEFT"/>subfmts : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimeMJD" [color="black", fontcolor="black", label=<{TimeMJD|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val1, val2)<br ALIGN="LEFT"/>to_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeNumeric" [color="black", fontcolor="black", label=<{TimeNumeric|subfmts : tuple<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|to_value(jd1, jd2, parent, out_subfmt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimePlotDate" [color="black", fontcolor="black", label=<{TimePlotDate|epoch<br ALIGN="LEFT"/>epoch_format : str<br ALIGN="LEFT"/>epoch_scale : str<br ALIGN="LEFT"/>epoch_val : float<br ALIGN="LEFT"/>epoch_val2 : NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>unit : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern._strptime.TimeRE" [color="black", fontcolor="black", label=<{TimeRE|locale_time : NoneType<br ALIGN="LEFT"/>|compile(format)<br ALIGN="LEFT"/>pattern(format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.timeseries.sampled.TimeSeries" [color="black", fontcolor="black", label=<{TimeSeries|time<br ALIGN="LEFT"/>|add_column()<br ALIGN="LEFT"/>add_columns()<br ALIGN="LEFT"/>fold(period, epoch_time, epoch_phase, wrap_phase, normalize_phase)<br ALIGN="LEFT"/>from_pandas(df, time_scale)<br ALIGN="LEFT"/>read(filename, time_column, time_format, time_scale, format)<br ALIGN="LEFT"/>to_pandas()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeStardate" [color="black", fontcolor="black", label=<{TimeStardate|epoch_format : str<br ALIGN="LEFT"/>epoch_scale : str<br ALIGN="LEFT"/>epoch_val : str<br ALIGN="LEFT"/>epoch_val2 : NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>unit : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimeString" [color="black", fontcolor="black", label=<{TimeString|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|format_string(str_fmt)<br ALIGN="LEFT"/>get_jds_fast(val1, val2)<br ALIGN="LEFT"/>get_jds_python(val1, val2)<br ALIGN="LEFT"/>parse_string(timestr, subfmts)<br ALIGN="LEFT"/>set_jds(val1, val2)<br ALIGN="LEFT"/>str_kwargs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tree.TimeSys" [color="black", fontcolor="black", label=<{TimeSys|ID<br ALIGN="LEFT"/>refposition<br ALIGN="LEFT"/>timeorigin<br ALIGN="LEFT"/>timescale<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimeUnique" [color="black", fontcolor="black", label=<{TimeUnique|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimeUnix" [color="black", fontcolor="black", label=<{TimeUnix|epoch_format : str<br ALIGN="LEFT"/>epoch_scale : str<br ALIGN="LEFT"/>epoch_val : str<br ALIGN="LEFT"/>epoch_val2 : NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>unit<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimeUnixTai" [color="black", fontcolor="black", label=<{TimeUnixTai|epoch_scale : str<br ALIGN="LEFT"/>epoch_val : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimeYMDHMS" [color="black", fontcolor="black", label=<{TimeYMDHMS|jd1<br ALIGN="LEFT"/>jd2<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|set_jds(val1, val2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.formats.TimeYearDayTime" [color="black", fontcolor="black", label=<{TimeYearDayTime|fast_parser_pars : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>subfmts : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.tests.test_fast_parser.test_fast_subclass.TimeYearDayTimeSubClass" [color="black", fontcolor="black", label=<{TimeYearDayTimeSubClass|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.time.formats.TimezoneInfo" [color="black", fontcolor="black", label=<{TimezoneInfo|<br ALIGN="LEFT"/>|dst(dt)<br ALIGN="LEFT"/>tzname(dt)<br ALIGN="LEFT"/>utcoffset(dt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.misc.tests.test_pickle_helpers.ToBePickled" [color="black", fontcolor="black", label=<{ToBePickled|item<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_cosmology.ToFromCosmologyTestMixin" [color="black", fontcolor="black", label=<{ToFromCosmologyTestMixin|<br ALIGN="LEFT"/>|test_from_cosmology_default(cosmo, from_format)<br ALIGN="LEFT"/>test_from_not_cosmology(cosmo, from_format)<br ALIGN="LEFT"/>test_is_equivalent_to_cosmology(cosmo, to_format, format)<br ALIGN="LEFT"/>test_to_cosmology_default(cosmo, to_format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.base.ToFromDirectTestBase" [color="black", fontcolor="black", label=<{ToFromDirectTestBase|<br ALIGN="LEFT"/>|from_format()<br ALIGN="LEFT"/>to_format(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_connect.ToFromFormatTestMixin" [color="black", fontcolor="black", label=<{ToFromFormatTestMixin|<br ALIGN="LEFT"/>|test_fromformat_subclass_complete_info(cosmo_cls, cosmo, format, totype, xfail_if_not_registered_with_yaml)<br ALIGN="LEFT"/>test_tofromformat_complete_info(cosmo, format, totype, xfail_if_not_registered_with_yaml)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_mapping.ToFromMappingTestMixin" [color="black", fontcolor="black", label=<{ToFromMappingTestMixin|<br ALIGN="LEFT"/>|test_from_mapping_default(cosmo, to_format, from_format)<br ALIGN="LEFT"/>test_from_mapping_rename_conflict(cosmo, to_format, from_format)<br ALIGN="LEFT"/>test_from_not_mapping(cosmo, from_format)<br ALIGN="LEFT"/>test_fromformat_subclass_partial_info_mapping(cosmo)<br ALIGN="LEFT"/>test_is_equivalent_to_mapping(cosmo, to_format, format)<br ALIGN="LEFT"/>test_to_mapping_cls(to_format, map_cls)<br ALIGN="LEFT"/>test_to_mapping_cosmology_as_str(cosmo_cls, to_format)<br ALIGN="LEFT"/>test_to_mapping_default(cosmo, to_format)<br ALIGN="LEFT"/>test_to_mapping_move_from_meta(to_format)<br ALIGN="LEFT"/>test_to_mapping_rename_conflict(cosmo, to_format)<br ALIGN="LEFT"/>test_to_mapping_wrong_cls(to_format)<br ALIGN="LEFT"/>test_tofrom_mapping_cosmology_as_str(cosmo, to_format, from_format)<br ALIGN="LEFT"/>test_tofrom_mapping_move_tofrom_meta(cosmo, to_format, from_format)<br ALIGN="LEFT"/>test_tofrom_mapping_rename_roundtrip(cosmo, to_format, from_format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_model.ToFromModelTestMixin" [color="black", fontcolor="black", label=<{ToFromModelTestMixin|<br ALIGN="LEFT"/>|method_name(cosmo)<br ALIGN="LEFT"/><I>test_fromformat_model_subclass_partial_info</I>(): None<br ALIGN="LEFT"/>test_fromformat_model_wrong_cls(from_format)<br ALIGN="LEFT"/>test_is_equivalent_to_model(cosmo, method_name, to_format, format)<br ALIGN="LEFT"/>test_toformat_model(cosmo, to_format, method_name)<br ALIGN="LEFT"/>test_toformat_model_not_callable(to_format)<br ALIGN="LEFT"/>test_toformat_model_not_method(to_format)<br ALIGN="LEFT"/>test_tofromformat_model_instance(cosmo_cls, cosmo, method_name, to_format, from_format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_row.ToFromRowTestMixin" [color="black", fontcolor="black", label=<{ToFromRowTestMixin|<br ALIGN="LEFT"/>|test_from_not_row(cosmo, from_format)<br ALIGN="LEFT"/><I>test_fromformat_row_subclass_partial_info</I>(cosmo: Cosmology): None<br ALIGN="LEFT"/>test_is_equivalent_to_row(cosmo, to_format, format)<br ALIGN="LEFT"/>test_to_row_in_meta(cosmo_cls, cosmo, in_meta)<br ALIGN="LEFT"/>test_tofrom_row_instance(cosmo, to_format, from_format)<br ALIGN="LEFT"/>test_tofrom_row_rename(cosmo, to_format, from_format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_table.ToFromTableTestMixin" [color="black", fontcolor="black", label=<{ToFromTableTestMixin|<br ALIGN="LEFT"/>|test_from_not_table(cosmo, from_format)<br ALIGN="LEFT"/>test_from_table_renamed_index_column(cosmo, to_format, from_format)<br ALIGN="LEFT"/>test_fromformat_table_subclass_partial_info(cosmo_cls, cosmo, from_format, to_format)<br ALIGN="LEFT"/>test_is_equivalent_to_table(cosmo, to_format, format)<br ALIGN="LEFT"/>test_to_table(cosmo_cls, cosmo, to_format)<br ALIGN="LEFT"/>test_to_table_bad_index(from_format, to_format)<br ALIGN="LEFT"/>test_to_table_cls(to_format, tbl_cls)<br ALIGN="LEFT"/>test_to_table_failed_cls(to_format)<br ALIGN="LEFT"/>test_to_table_in_meta(cosmo_cls, to_format, in_meta)<br ALIGN="LEFT"/>test_tofrom_table_instance(cosmo_cls, cosmo, from_format, to_format)<br ALIGN="LEFT"/>test_tofrom_table_mutlirow(cosmo_cls, cosmo, from_format, add_index)<br ALIGN="LEFT"/>test_tofrom_table_rename(cosmo, to_format, from_format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.base.ToFromTestMixinBase" [color="black", fontcolor="black", label=<{ToFromTestMixinBase|<br ALIGN="LEFT"/>|can_autodentify(format)<br ALIGN="LEFT"/>from_format()<br ALIGN="LEFT"/>to_format(cosmo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_yaml.ToFromYAMLTestMixin" [color="black", fontcolor="black", label=<{ToFromYAMLTestMixin|<br ALIGN="LEFT"/>|test_from_yaml_autoidentify(cosmo, to_format, from_format, xfail_if_not_registered_with_yaml)<br ALIGN="LEFT"/>test_from_yaml_default(cosmo, to_format, from_format, xfail_if_not_registered_with_yaml)<br ALIGN="LEFT"/>test_is_equivalent_to_yaml(cosmo, to_format, format, xfail_if_not_registered_with_yaml)<br ALIGN="LEFT"/>test_is_equivalent_to_yaml_specify_format(cosmo, to_format, xfail_if_not_registered_with_yaml)<br ALIGN="LEFT"/>test_to_yaml(cosmo_cls, to_format, xfail_if_not_registered_with_yaml)<br ALIGN="LEFT"/>xfail_if_not_registered_with_yaml(cosmo_cls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.Tophat2DKernel" [color="black", fontcolor="black", label=<{Tophat2DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.transformations.graph.TransformGraph" [color="black", fontcolor="black", label=<{TransformGraph|frame_attributes<br ALIGN="LEFT"/>frame_component_names<br ALIGN="LEFT"/>frame_set<br ALIGN="LEFT"/>|add_transform(fromsys, tosys, transform)<br ALIGN="LEFT"/>find_shortest_path(fromsys, tosys)<br ALIGN="LEFT"/>get_names()<br ALIGN="LEFT"/>get_transform(fromsys, tosys)<br ALIGN="LEFT"/>impose_finite_difference_dt(dt)<br ALIGN="LEFT"/>invalidate_cache()<br ALIGN="LEFT"/>lookup_name(name)<br ALIGN="LEFT"/>remove_transform(fromsys, tosys, transform)<br ALIGN="LEFT"/>to_dot_graph(priorities, addnodes, savefn, savelayout, saveformat, color_edges)<br ALIGN="LEFT"/>to_networkx_graph()<br ALIGN="LEFT"/>transform(transcls, fromsys, tosys, priority)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Trapezoid1D" [color="black", fontcolor="black", label=<{Trapezoid1D|amplitude<br ALIGN="LEFT"/>bounding_box<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>slope<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>|evaluate(x, amplitude, x_0, width, slope)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.Trapezoid1DKernel" [color="black", fontcolor="black", label=<{Trapezoid1DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.TrapezoidDisk2D" [color="black", fontcolor="black", label=<{TrapezoidDisk2D|R_0<br ALIGN="LEFT"/>amplitude<br ALIGN="LEFT"/>bounding_box<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>slope<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>y_0<br ALIGN="LEFT"/>|evaluate(x, y, amplitude, x_0, y_0, R_0, slope)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.convolution.kernels.TrapezoidDisk2DKernel" [color="black", fontcolor="black", label=<{TrapezoidDisk2DKernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.ucd.UCDWords" [color="black", fontcolor="black", label=<{UCDWords|<br ALIGN="LEFT"/>|get_description(name)<br ALIGN="LEFT"/>is_primary(name)<br ALIGN="LEFT"/>is_secondary(name)<br ALIGN="LEFT"/>normalize_capitalization(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.quantity_helper.converters.UfuncHelpers" [color="black", fontcolor="black", label=<{UfuncHelpers|UNSUPPORTED : set<br ALIGN="LEFT"/>modules : dict<br ALIGN="LEFT"/>|import_module(module)<br ALIGN="LEFT"/>register_module(module, names, importer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.test_core.CosmologyTest.test_init_subclass.UnRegisteredSubclassTest" [color="black", fontcolor="black", label=<{UnRegisteredSubclassTest|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.card.Undefined" [color="black", fontcolor="black", label=<{Undefined|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.xml.tests.test_iterparse.UngzipFileWrapper" [color="black", fontcolor="black", label=<{UngzipFileWrapper|<br ALIGN="LEFT"/>|read(requested_length)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.format.unicode_format.Unicode" [color="black", fontcolor="black", label=<{Unicode|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.converters.UnicodeChar" [color="black", fontcolor="black", label=<{UnicodeChar|arraysize : int, str<br ALIGN="LEFT"/>binoutput<br ALIGN="LEFT"/>binparse<br ALIGN="LEFT"/>default : str<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>|output(value, mask)<br ALIGN="LEFT"/>parse(value, config, pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.core.UnifiedIORegistry" [color="black", fontcolor="black", label=<{UnifiedIORegistry|<br ALIGN="LEFT"/>|get_formats(data_class, readwrite)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.tests.test_registries.UnifiedIORegistryBaseSubClass" [color="black", fontcolor="black", label=<{UnifiedIORegistryBaseSubClass|<br ALIGN="LEFT"/>|get_formats(data_class)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.core.UnifiedInputRegistry" [color="black", fontcolor="black", label=<{UnifiedInputRegistry|<br ALIGN="LEFT"/>|get_reader(data_format, data_class)<br ALIGN="LEFT"/>read(cls)<br ALIGN="LEFT"/>register_reader(data_format, data_class, function, force, priority)<br ALIGN="LEFT"/>unregister_reader(data_format, data_class)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.core.UnifiedOutputRegistry" [color="black", fontcolor="black", label=<{UnifiedOutputRegistry|<br ALIGN="LEFT"/>|get_writer(data_format, data_class)<br ALIGN="LEFT"/>register_writer(data_format, data_class, function, force, priority)<br ALIGN="LEFT"/>unregister_writer(data_format, data_class)<br ALIGN="LEFT"/>write(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.interface.UnifiedReadWrite" [color="black", fontcolor="black", label=<{UnifiedReadWrite|registry<br ALIGN="LEFT"/>|help(format, out)<br ALIGN="LEFT"/>list_formats(out)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.registry.interface.UnifiedReadWriteMethod" [color="black", fontcolor="black", label=<{UnifiedReadWriteMethod|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.UnimplementedWarning" [color="black", fontcolor="red", label=<{UnimplementedWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.core.Unit" [color="black", fontcolor="black", label=<{Unit|represents<br ALIGN="LEFT"/>|decompose(bases: Collection[UnitBase]): UnitBase<br ALIGN="LEFT"/>is_unity(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.core.UnitBase" [color="black", fontcolor="black", label=<{UnitBase|bases<br ALIGN="LEFT"/>cgs<br ALIGN="LEFT"/>physical_type<br ALIGN="LEFT"/>powers<br ALIGN="LEFT"/>scale<br ALIGN="LEFT"/>si<br ALIGN="LEFT"/>|compose(equivalencies, units, max_depth, include_prefix_units)<br ALIGN="LEFT"/><I>decompose</I>(bases: Collection[UnitBase]): UnitBase<br ALIGN="LEFT"/>find_equivalent_units(equivalencies, units, include_prefix_units)<br ALIGN="LEFT"/>get_converter(other, equivalencies)<br ALIGN="LEFT"/>in_units(other, value, equivalencies)<br ALIGN="LEFT"/>is_equivalent(other, equivalencies)<br ALIGN="LEFT"/>is_unity(): bool<br ALIGN="LEFT"/>to(other, value, equivalencies)<br ALIGN="LEFT"/>to_string(format: type[Base] \| str \| None): str<br ALIGN="LEFT"/>to_system(system)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.errors.UnitConversionError" [color="black", fontcolor="red", label=<{UnitConversionError|args<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.errors.UnitParserWarning" [color="black", fontcolor="red", label=<{UnitParserWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.unitphysics.UnitPhysicsSphericalRepresentation" [color="black", fontcolor="black", label=<{UnitPhysicsSphericalRepresentation|attr_classes : dict<br ALIGN="LEFT"/>phi<br ALIGN="LEFT"/>theta<br ALIGN="LEFT"/>|from_cartesian(cart)<br ALIGN="LEFT"/>norm()<br ALIGN="LEFT"/>scale_factors()<br ALIGN="LEFT"/>to_cartesian()<br ALIGN="LEFT"/>unit_vectors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.core.UnitPrefix" [color="black", fontcolor="black", label=<{UnitPrefix|factor<br ALIGN="LEFT"/>names : tuple[str, ...]<br ALIGN="LEFT"/>symbols : tuple[str, ...]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.errors.UnitScaleError" [color="black", fontcolor="red", label=<{UnitScaleError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.representation.spherical.UnitSphericalCosLatDifferential" [color="black", fontcolor="black", label=<{UnitSphericalCosLatDifferential|attr_classes : dict<br ALIGN="LEFT"/>base_representation<br ALIGN="LEFT"/>|from_cartesian(other, base)<br ALIGN="LEFT"/>from_representation(representation, base)<br ALIGN="LEFT"/>represent_as(other_class, base)<br ALIGN="LEFT"/>to_cartesian(base)<br ALIGN="LEFT"/>transform(matrix, base, transformed_base)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.spherical.UnitSphericalDifferential" [color="black", fontcolor="black", label=<{UnitSphericalDifferential|base_representation<br ALIGN="LEFT"/>|from_cartesian(other, base)<br ALIGN="LEFT"/>from_representation(representation, base)<br ALIGN="LEFT"/>represent_as(other_class, base)<br ALIGN="LEFT"/>to_cartesian(base)<br ALIGN="LEFT"/>transform(matrix, base, transformed_base)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_representation.test_duplicate_warning.UnitSphericalRepresentation" [color="black", fontcolor="black", label=<{UnitSphericalRepresentation|attr_classes : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.representation.spherical.UnitSphericalRepresentation" [color="black", fontcolor="black", label=<{UnitSphericalRepresentation|attr_classes : dict<br ALIGN="LEFT"/>lat<br ALIGN="LEFT"/>lon<br ALIGN="LEFT"/>|cross(other)<br ALIGN="LEFT"/>from_cartesian(cart)<br ALIGN="LEFT"/>mean()<br ALIGN="LEFT"/>norm()<br ALIGN="LEFT"/>represent_as(other_class, differential_class)<br ALIGN="LEFT"/>scale_factors(omit_coslat)<br ALIGN="LEFT"/>sum()<br ALIGN="LEFT"/>to_cartesian()<br ALIGN="LEFT"/>transform(matrix)<br ALIGN="LEFT"/>unit_vectors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_unit_representation.test_unit_representation_subclass.UnitSphericalWrap180Representation" [color="black", fontcolor="black", label=<{UnitSphericalWrap180Representation|attr_classes : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.errors.UnitTypeError" [color="black", fontcolor="red", label=<{UnitTypeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.errors.UnitsError" [color="black", fontcolor="red", label=<{UnitsError|args<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.errors.UnitsError" [color="black", fontcolor="red", label=<{UnitsError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.mappings.UnitsMapping" [color="black", fontcolor="black", label=<{UnitsMapping|input_units<br ALIGN="LEFT"/>input_units_equivalencies : NoneType<br ALIGN="LEFT"/>inputs<br ALIGN="LEFT"/>mapping<br ALIGN="LEFT"/>n_inputs<br ALIGN="LEFT"/>n_outputs<br ALIGN="LEFT"/>outputs<br ALIGN="LEFT"/>|evaluate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.errors.UnitsWarning" [color="black", fontcolor="red", label=<{UnitsWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.errors.UnknownSiteException" [color="black", fontcolor="red", label=<{UnknownSiteException|attribute<br ALIGN="LEFT"/>close_names : NoneType<br ALIGN="LEFT"/>site<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.UnknownType" [color="black", fontcolor="red", label=<{UnknownType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.nddata.nduncertainty.UnknownUncertainty" [color="black", fontcolor="black", label=<{UnknownUncertainty|parent_nddata<br ALIGN="LEFT"/>supports_correlated<br ALIGN="LEFT"/>uncertainty_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_quantities_fitting.test_fitting_missing_data_units.UnorderedGaussian1D" [color="black", fontcolor="black", label=<{UnorderedGaussian1D|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.core.UnrecognizedUnit" [color="black", fontcolor="black", label=<{UnrecognizedUnit|<br ALIGN="LEFT"/>|get_converter(other, equivalencies)<br ALIGN="LEFT"/>is_equivalent(other, equivalencies)<br ALIGN="LEFT"/>is_unity(): Literal[False]<br ALIGN="LEFT"/>to_string(format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.configobj.configobj.UnreprError" [color="black", fontcolor="red", label=<{UnreprError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.converters.UnsignedByte" [color="black", fontcolor="black", label=<{UnsignedByte|bit_size : str<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>val_range : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.fitting.UnsupportedConstraintError" [color="black", fontcolor="red", label=<{UnsupportedConstraintError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.VOTableChangeWarning" [color="black", fontcolor="red", label=<{VOTableChangeWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree.VOTableFile" [color="black", fontcolor="black", label=<{VOTableFile|ID : NoneType<br ALIGN="LEFT"/>coordinate_systems<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>get_coosys_by_id<br ALIGN="LEFT"/>get_field_by_id<br ALIGN="LEFT"/>get_field_by_id_or_name<br ALIGN="LEFT"/>get_fields_by_utype<br ALIGN="LEFT"/>get_group_by_id<br ALIGN="LEFT"/>get_groups_by_utype<br ALIGN="LEFT"/>get_info_by_id<br ALIGN="LEFT"/>get_infos_by_name<br ALIGN="LEFT"/>get_table_by_id<br ALIGN="LEFT"/>get_tables_by_utype<br ALIGN="LEFT"/>get_timesys_by_id<br ALIGN="LEFT"/>get_values_by_id<br ALIGN="LEFT"/>groups<br ALIGN="LEFT"/>infos<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>resources<br ALIGN="LEFT"/>time_systems<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|from_table(table, table_id)<br ALIGN="LEFT"/>get_first_table()<br ALIGN="LEFT"/>get_table_by_index(idx)<br ALIGN="LEFT"/>iter_coosys()<br ALIGN="LEFT"/>iter_fields_and_params()<br ALIGN="LEFT"/>iter_groups()<br ALIGN="LEFT"/>iter_info()<br ALIGN="LEFT"/>iter_tables()<br ALIGN="LEFT"/>iter_timesys()<br ALIGN="LEFT"/>iter_values()<br ALIGN="LEFT"/>parse(iterator, config)<br ALIGN="LEFT"/>set_all_tables_format(format)<br ALIGN="LEFT"/>to_xml(fd, compressed, tabledata_format, _debug_python_based_parser, _astropy_version)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.VOTableSpecError" [color="black", fontcolor="red", label=<{VOTableSpecError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.VOTableSpecWarning" [color="black", fontcolor="red", label=<{VOTableSpecWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.format.vounit.VOUnit" [color="black", fontcolor="black", label=<{VOUnit|<br ALIGN="LEFT"/>|format_exponential_notation(val: UnitScale \| np.number, format_spec: str): str<br ALIGN="LEFT"/>parse(s: str, debug: bool): UnitBase<br ALIGN="LEFT"/>to_string(unit: UnitBase, fraction: bool \| Literal['inline', 'multiline']): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.VOWarning" [color="black", fontcolor="red", label=<{VOWarning|default_args : tuple<br ALIGN="LEFT"/>formatted_message<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|get_short_name()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.configobj.validate.ValidateError" [color="black", fontcolor="red", label=<{ValidateError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.validate.Validator" [color="black", fontcolor="black", label=<{Validator|baseErrorClass<br ALIGN="LEFT"/>functions : dict<br ALIGN="LEFT"/>|check(check, value, missing)<br ALIGN="LEFT"/>get_default_value(check)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_parameters.test__tofloat.Value" [color="black", fontcolor="black", label=<{Value|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree.Values" [color="black", fontcolor="black", label=<{Values|ID : NoneType<br ALIGN="LEFT"/>max<br ALIGN="LEFT"/>max_inclusive<br ALIGN="LEFT"/>min<br ALIGN="LEFT"/>min_inclusive<br ALIGN="LEFT"/>null<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>ref<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|from_table_column(column)<br ALIGN="LEFT"/>is_defaults()<br ALIGN="LEFT"/>parse(iterator, config)<br ALIGN="LEFT"/>to_table_column(column)<br ALIGN="LEFT"/>to_xml(w)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.converters.VarArray" [color="black", fontcolor="black", label=<{VarArray|default : ndarray<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>|binoutput(value, mask)<br ALIGN="LEFT"/>binparse(read)<br ALIGN="LEFT"/>output(value, mask)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.nduncertainty.VarianceUncertainty" [color="black", fontcolor="black", label=<{VarianceUncertainty|supports_correlated<br ALIGN="LEFT"/>uncertainty_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.validate.VdtMissingValue" [color="black", fontcolor="red", label=<{VdtMissingValue|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.validate.VdtParamError" [color="black", fontcolor="red", label=<{VdtParamError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.validate.VdtTypeError" [color="black", fontcolor="red", label=<{VdtTypeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.validate.VdtUnknownCheckError" [color="black", fontcolor="red", label=<{VdtUnknownCheckError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.validate.VdtValueError" [color="black", fontcolor="red", label=<{VdtValueError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.validate.VdtValueTooBigError" [color="black", fontcolor="red", label=<{VdtValueTooBigError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.validate.VdtValueTooLongError" [color="black", fontcolor="red", label=<{VdtValueTooLongError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.validate.VdtValueTooShortError" [color="black", fontcolor="red", label=<{VdtValueTooShortError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.configobj.validate.VdtValueTooSmallError" [color="black", fontcolor="red", label=<{VdtValueTooSmallError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.verify.VerifyError" [color="black", fontcolor="red", label=<{VerifyError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.verify.VerifyWarning" [color="black", fontcolor="red", label=<{VerifyWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.VersionError" [color="black", fontcolor="red", label=<{VersionError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models.Voigt1D" [color="black", fontcolor="black", label=<{Voigt1D|amplitude_L<br ALIGN="LEFT"/>fwhm_G<br ALIGN="LEFT"/>fwhm_L<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>method : str<br ALIGN="LEFT"/>sqrt_ln2<br ALIGN="LEFT"/>sqrt_ln2pi<br ALIGN="LEFT"/>sqrt_pi<br ALIGN="LEFT"/>x_0<br ALIGN="LEFT"/>|evaluate(x, x_0, amplitude_L, fwhm_L, fwhm_G)<br ALIGN="LEFT"/>fit_deriv(x, x_0, amplitude_L, fwhm_L, fwhm_G)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W01" [color="black", fontcolor="red", label=<{W01|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W02" [color="black", fontcolor="red", label=<{W02|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W03" [color="black", fontcolor="red", label=<{W03|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W04" [color="black", fontcolor="red", label=<{W04|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W05" [color="black", fontcolor="red", label=<{W05|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W06" [color="black", fontcolor="red", label=<{W06|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W07" [color="black", fontcolor="red", label=<{W07|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W08" [color="black", fontcolor="red", label=<{W08|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W09" [color="black", fontcolor="red", label=<{W09|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_w.W1" [color="black", fontcolor="black", label=<{W1|<br ALIGN="LEFT"/>|w(z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W10" [color="black", fontcolor="red", label=<{W10|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W11" [color="black", fontcolor="red", label=<{W11|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W12" [color="black", fontcolor="red", label=<{W12|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W13" [color="black", fontcolor="red", label=<{W13|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W15" [color="black", fontcolor="red", label=<{W15|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W17" [color="black", fontcolor="red", label=<{W17|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W18" [color="black", fontcolor="red", label=<{W18|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W19" [color="black", fontcolor="red", label=<{W19|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.flrw.test_w.W1nu" [color="black", fontcolor="black", label=<{W1nu|<br ALIGN="LEFT"/>|w(z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W20" [color="black", fontcolor="red", label=<{W20|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W21" [color="black", fontcolor="red", label=<{W21|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W22" [color="black", fontcolor="red", label=<{W22|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W23" [color="black", fontcolor="red", label=<{W23|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W24" [color="black", fontcolor="red", label=<{W24|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W25" [color="black", fontcolor="red", label=<{W25|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W26" [color="black", fontcolor="red", label=<{W26|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W27" [color="black", fontcolor="red", label=<{W27|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W28" [color="black", fontcolor="red", label=<{W28|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W29" [color="black", fontcolor="red", label=<{W29|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W30" [color="black", fontcolor="red", label=<{W30|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W31" [color="black", fontcolor="red", label=<{W31|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W32" [color="black", fontcolor="red", label=<{W32|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W33" [color="black", fontcolor="red", label=<{W33|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W34" [color="black", fontcolor="red", label=<{W34|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W35" [color="black", fontcolor="red", label=<{W35|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W36" [color="black", fontcolor="red", label=<{W36|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W37" [color="black", fontcolor="red", label=<{W37|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W38" [color="black", fontcolor="red", label=<{W38|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W39" [color="black", fontcolor="red", label=<{W39|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W40" [color="black", fontcolor="red", label=<{W40|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W41" [color="black", fontcolor="red", label=<{W41|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W42" [color="black", fontcolor="red", label=<{W42|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W43" [color="black", fontcolor="red", label=<{W43|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W44" [color="black", fontcolor="red", label=<{W44|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W45" [color="black", fontcolor="red", label=<{W45|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W46" [color="black", fontcolor="red", label=<{W46|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W47" [color="black", fontcolor="red", label=<{W47|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W48" [color="black", fontcolor="red", label=<{W48|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W49" [color="black", fontcolor="red", label=<{W49|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W50" [color="black", fontcolor="red", label=<{W50|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W51" [color="black", fontcolor="red", label=<{W51|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W52" [color="black", fontcolor="red", label=<{W52|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W53" [color="black", fontcolor="red", label=<{W53|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W54" [color="black", fontcolor="red", label=<{W54|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W55" [color="black", fontcolor="red", label=<{W55|default_args : tuple<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W56" [color="black", fontcolor="red", label=<{W56|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.exceptions.W57" [color="black", fontcolor="red", label=<{W57|message_template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcs.WCS" [color="black", fontcolor="black", label=<{WCS|array_shape : tuple<br ALIGN="LEFT"/>axis_type_names<br ALIGN="LEFT"/>celestial<br ALIGN="LEFT"/>cpdis1 : object<br ALIGN="LEFT"/>cpdis2 : object<br ALIGN="LEFT"/>det2im1<br ALIGN="LEFT"/>det2im2<br ALIGN="LEFT"/>extra : int<br ALIGN="LEFT"/>has_celestial<br ALIGN="LEFT"/>has_distortion<br ALIGN="LEFT"/>has_spectral<br ALIGN="LEFT"/>has_temporal<br ALIGN="LEFT"/>is_celestial<br ALIGN="LEFT"/>is_spectral<br ALIGN="LEFT"/>is_temporal<br ALIGN="LEFT"/>naxis : int<br ALIGN="LEFT"/>pixel_bounds : list, tuple<br ALIGN="LEFT"/>pixel_scale_matrix<br ALIGN="LEFT"/>pixel_shape : NoneType, list, tuple<br ALIGN="LEFT"/>sip : NoneType, object<br ALIGN="LEFT"/>spectral<br ALIGN="LEFT"/>temporal<br ALIGN="LEFT"/>wcs<br ALIGN="LEFT"/>|all_pix2world()<br ALIGN="LEFT"/>all_world2pix()<br ALIGN="LEFT"/>calc_footprint(header, undistort, axes, center)<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>deepcopy()<br ALIGN="LEFT"/>det2im()<br ALIGN="LEFT"/>dropaxis(dropax)<br ALIGN="LEFT"/>fix(translate_units, naxis)<br ALIGN="LEFT"/>footprint_contains(coord)<br ALIGN="LEFT"/>footprint_to_file(filename, color, width, coordsys)<br ALIGN="LEFT"/>get_axis_types()<br ALIGN="LEFT"/>p4_pix2foc()<br ALIGN="LEFT"/>pix2foc()<br ALIGN="LEFT"/>printwcs()<br ALIGN="LEFT"/>proj_plane_pixel_area()<br ALIGN="LEFT"/>proj_plane_pixel_scales()<br ALIGN="LEFT"/>reorient_celestial_first()<br ALIGN="LEFT"/>sip_foc2pix()<br ALIGN="LEFT"/>sip_pix2foc()<br ALIGN="LEFT"/>slice(view, numpy_order)<br ALIGN="LEFT"/>sub(axes)<br ALIGN="LEFT"/>swapaxes(ax0, ax1)<br ALIGN="LEFT"/>to_fits(relax, key)<br ALIGN="LEFT"/>to_header(relax, key)<br ALIGN="LEFT"/>to_header_string(relax)<br ALIGN="LEFT"/>wcs_pix2world()<br ALIGN="LEFT"/>wcs_world2pix()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.core.WCSAxes" [color="black", fontcolor="black", label=<{WCSAxes|coords<br ALIGN="LEFT"/>format_coord<br ALIGN="LEFT"/>frame_class<br ALIGN="LEFT"/>overlay_coords<br ALIGN="LEFT"/>patch<br ALIGN="LEFT"/>transData<br ALIGN="LEFT"/>wcs : NoneType<br ALIGN="LEFT"/>|contour()<br ALIGN="LEFT"/>contourf()<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>draw_wcsaxes(renderer)<br ALIGN="LEFT"/>get_coords_overlay(frame, coord_meta)<br ALIGN="LEFT"/>get_tightbbox(renderer)<br ALIGN="LEFT"/>get_transform(frame)<br ALIGN="LEFT"/>get_xlabel()<br ALIGN="LEFT"/>get_ylabel()<br ALIGN="LEFT"/>grid(b, axis)<br ALIGN="LEFT"/>imshow(X)<br ALIGN="LEFT"/>plot_coord()<br ALIGN="LEFT"/>reset_wcs(wcs, slices, transform, coord_meta)<br ALIGN="LEFT"/>scatter_coord()<br ALIGN="LEFT"/>set_xlabel(xlabel, labelpad, loc)<br ALIGN="LEFT"/>set_ylabel(ylabel, labelpad, loc)<br ALIGN="LEFT"/>text_coord()<br ALIGN="LEFT"/>tick_params(axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.core.WCSAxesSubplot" [color="black", fontcolor="black", label=<{WCSAxesSubplot|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.wcsapi.WCSPixel2WorldTransform" [color="black", fontcolor="black", label=<{WCSPixel2WorldTransform|frame_out<br ALIGN="LEFT"/>has_inverse : bool<br ALIGN="LEFT"/>invert_xy : bool<br ALIGN="LEFT"/>output_dims<br ALIGN="LEFT"/>transform_non_affine<br ALIGN="LEFT"/>wcs<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform(pixel)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.wcsapi.WCSWorld2PixelTransform" [color="black", fontcolor="black", label=<{WCSWorld2PixelTransform|frame_in : NoneType<br ALIGN="LEFT"/>has_inverse : bool<br ALIGN="LEFT"/>input_dims<br ALIGN="LEFT"/>invert_xy : bool<br ALIGN="LEFT"/>transform_non_affine<br ALIGN="LEFT"/>wcs<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform(world)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.representation.geodetic.WGS72GeodeticRepresentation" [color="black", fontcolor="black", label=<{WGS72GeodeticRepresentation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.representation.geodetic.WGS84GeodeticRepresentation" [color="black", fontcolor="black", label=<{WGS84GeodeticRepresentation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.samp.hub.WebProfileDialog" [color="black", fontcolor="black", label=<{WebProfileDialog|<br ALIGN="LEFT"/>|consent()<br ALIGN="LEFT"/>handle_queue()<br ALIGN="LEFT"/>reject()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.web_profile.WebProfileRequestHandler" [color="black", fontcolor="black", label=<{WebProfileRequestHandler|<br ALIGN="LEFT"/>|do_GET()<br ALIGN="LEFT"/>do_HEAD()<br ALIGN="LEFT"/>do_OPTIONS()<br ALIGN="LEFT"/>do_POST()<br ALIGN="LEFT"/>end_headers()<br ALIGN="LEFT"/>is_http_path_valid()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.web_profile.WebProfileXMLRPCServer" [color="black", fontcolor="black", label=<{WebProfileXMLRPCServer|clients : list<br ALIGN="LEFT"/>|add_client(client_id)<br ALIGN="LEFT"/>remove_client(client_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.ascii.core.WhitespaceSplitter" [color="black", fontcolor="black", label=<{WhitespaceSplitter|<br ALIGN="LEFT"/>|process_line(line: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.transforms.World2PixelTransform" [color="black", fontcolor="black", label=<{World2PixelTransform|frame_in : NoneType<br ALIGN="LEFT"/>has_inverse : bool<br ALIGN="LEFT"/>input_dims<br ALIGN="LEFT"/>|<I>inverted</I>()<br ALIGN="LEFT"/><I>transform</I>(world)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.tests.io.test_latex.WriteLATEXTestMixin" [color="black", fontcolor="black", label=<{WriteLATEXTestMixin|<br ALIGN="LEFT"/>|test_latex_columns(write, tmp_path)<br ALIGN="LEFT"/>test_to_latex_cls(write, tbl_cls, tmp_path)<br ALIGN="LEFT"/>test_to_latex_failed_cls(write, tmp_path)<br ALIGN="LEFT"/>test_write_latex_false_overwrite(write, tmp_path)<br ALIGN="LEFT"/>test_write_latex_invalid_path(write)<br ALIGN="LEFT"/>test_write_latex_unsupported_format(write, tmp_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.typing.WriteableFileLike" [color="black", fontcolor="black", label=<{WriteableFileLike|<br ALIGN="LEFT"/>|write(data: _T_contra): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.xml.writer.XMLWriter" [color="black", fontcolor="black", label=<{XMLWriter|flush<br ALIGN="LEFT"/>write<br ALIGN="LEFT"/>xml_escape<br ALIGN="LEFT"/>xml_escape_cdata<br ALIGN="LEFT"/>|close(id)<br ALIGN="LEFT"/>comment(comment)<br ALIGN="LEFT"/>data(text)<br ALIGN="LEFT"/>element(tag, text, wrap, attrib)<br ALIGN="LEFT"/>end(tag, indent, wrap)<br ALIGN="LEFT"/><I>flush</I>()<br ALIGN="LEFT"/>get_indentation()<br ALIGN="LEFT"/>get_indentation_spaces(offset)<br ALIGN="LEFT"/>object_attrs(obj, attrs)<br ALIGN="LEFT"/>start(tag, attrib)<br ALIGN="LEFT"/>string_element(xml_string)<br ALIGN="LEFT"/>tag(tag, attrib)<br ALIGN="LEFT"/>xml_cleaning_method(method)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.YaccError" [color="black", fontcolor="red", label=<{YaccError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.YaccProduction" [color="black", fontcolor="black", label=<{YaccProduction|lexer : NoneType<br ALIGN="LEFT"/>parser : NoneType<br ALIGN="LEFT"/>slice : list<br ALIGN="LEFT"/>stack : NoneType, list<br ALIGN="LEFT"/>|error()<br ALIGN="LEFT"/>lexpos(n)<br ALIGN="LEFT"/>lexspan(n)<br ALIGN="LEFT"/>lineno(n)<br ALIGN="LEFT"/>linespan(n)<br ALIGN="LEFT"/>set_lexpos(n, lexpos)<br ALIGN="LEFT"/>set_lineno(n, lineno)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.extern.ply.yacc.YaccSymbol" [color="black", fontcolor="black", label=<{YaccSymbol|endlexpos : int<br ALIGN="LEFT"/>endlineno : int<br ALIGN="LEFT"/>lexpos : int<br ALIGN="LEFT"/>lineno : int<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>value : NoneType, str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.meta.YamlParseError" [color="black", fontcolor="red", label=<{YamlParseError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.visualization.interval.ZScaleInterval" [color="black", fontcolor="black", label=<{ZScaleInterval|contrast : float<br ALIGN="LEFT"/>krej : float<br ALIGN="LEFT"/>max_iterations : int<br ALIGN="LEFT"/>max_reject : float<br ALIGN="LEFT"/>min_npixels : int<br ALIGN="LEFT"/>n_samples : int<br ALIGN="LEFT"/>|get_limits(values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.projections.Zenithal" [color="black", fontcolor="black", label=<{Zenithal|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.angles.formats._AngleParser" [color="black", fontcolor="black", label=<{_AngleParser|<br ALIGN="LEFT"/>|parse(angle, unit, debug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.column._AsciiColDefs" [color="black", fontcolor="black", label=<{_AsciiColDefs|dtype<br ALIGN="LEFT"/>spans<br ALIGN="LEFT"/>|add_col(column)<br ALIGN="LEFT"/>del_col(col_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.column._AsciiColumnFormat" [color="black", fontcolor="black", label=<{_AsciiColumnFormat|canonical<br ALIGN="LEFT"/>format<br ALIGN="LEFT"/>precision : int<br ALIGN="LEFT"/>recformat<br ALIGN="LEFT"/>width : int<br ALIGN="LEFT"/>|from_column_format(format)<br ALIGN="LEFT"/>from_recformat(recformat)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.logger._AstLogIPYExc" [color="black", fontcolor="red", label=<{_AstLogIPYExc|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.base._BaryonComponent" [color="black", fontcolor="black", label=<{_BaryonComponent|Ob0 : float<br ALIGN="LEFT"/>inv_efunc : Callable[[NDArray[Any]], NDArray[Any]]<br ALIGN="LEFT"/>|Ob(z: Quantity \| ArrayLike): NDArray[Any] \| float<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.column._BaseColumnFormat" [color="black", fontcolor="black", label=<{_BaseColumnFormat|dtype<br ALIGN="LEFT"/>|from_column_format(format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.diff._BaseDiff" [color="black", fontcolor="black", label=<{_BaseDiff|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>identical<br ALIGN="LEFT"/>|fromdiff(other, a, b)<br ALIGN="LEFT"/>report(fileobj, indent, overwrite)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.base._BaseHDU" [color="black", fontcolor="black", label=<{_BaseHDU|header<br ALIGN="LEFT"/>is_image<br ALIGN="LEFT"/>level<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>ver<br ALIGN="LEFT"/>|fromstring(data, checksum, ignore_missing_end)<br ALIGN="LEFT"/><I>match_header</I>(header)<br ALIGN="LEFT"/>readfrom(fileobj, checksum, ignore_missing_end)<br ALIGN="LEFT"/>register_hdu(hducls)<br ALIGN="LEFT"/>unregister_hdu(hducls)<br ALIGN="LEFT"/>writeto(name, output_verify, overwrite, checksum)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.bounding_box._BaseInterval" [color="black", fontcolor="black", label=<{_BaseInterval|lower : float<br ALIGN="LEFT"/>upper : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.bounding_box._BaseSelectorArgument" [color="black", fontcolor="black", label=<{_BaseSelectorArgument|ignore : bool<br ALIGN="LEFT"/>index : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.header._BasicHeader" [color="black", fontcolor="black", label=<{_BasicHeader|cards<br ALIGN="LEFT"/>data_size<br ALIGN="LEFT"/>data_size_padded<br ALIGN="LEFT"/>|fromfile(fileobj)<br ALIGN="LEFT"/>index(keyword)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.header._BasicHeaderCards" [color="black", fontcolor="black", label=<{_BasicHeaderCards|header<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.bounding_box._BoundingDomain" [color="black", fontcolor="black", label=<{_BoundingDomain|ignored<br ALIGN="LEFT"/>ignored_inputs<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>order<br ALIGN="LEFT"/>|evaluate(evaluate: Callable, inputs, fill_value)<br ALIGN="LEFT"/><I>fix_inputs</I>(model, fixed_inputs: dict)<br ALIGN="LEFT"/><I>prepare_inputs</I>(input_shape, inputs): tuple[Any, Any, Any]<br ALIGN="LEFT"/>prepare_outputs(valid_outputs, valid_index, input_shape, fill_value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.header._CardAccessor" [color="black", fontcolor="black", label=<{_CardAccessor|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.column._ColumnFormat" [color="black", fontcolor="black", label=<{_ColumnFormat|canonical<br ALIGN="LEFT"/>format<br ALIGN="LEFT"/>option<br ALIGN="LEFT"/>p_format : NoneType<br ALIGN="LEFT"/>recformat<br ALIGN="LEFT"/>repeat : int<br ALIGN="LEFT"/>|from_recformat(recformat)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.compressed.compbintable._CompBinTableHDU" [color="black", fontcolor="black", label=<{_CompBinTableHDU|columns<br ALIGN="LEFT"/>|match_header(header)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.utils._ConstraintsDict" [color="black", fontcolor="black", label=<{_ConstraintsDict|constraint_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_compound._ConstraintsTestA" [color="black", fontcolor="black", label=<{_ConstraintsTestA|mean<br ALIGN="LEFT"/>stddev<br ALIGN="LEFT"/>|evaluate(stddev, mean)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_compound._ConstraintsTestB" [color="black", fontcolor="black", label=<{_ConstraintsTestB|mean<br ALIGN="LEFT"/>|evaluate(mean)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.table.PprintIncludeExclude.set._Context" [color="black", fontcolor="black", label=<{_Context|descriptor_self<br ALIGN="LEFT"/>names_orig<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.base._CorruptedHDU" [color="black", fontcolor="black", label=<{_CorruptedHDU|size<br ALIGN="LEFT"/>|<I>verify</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.io.builtin.model._CosmologyModel" [color="black", fontcolor="black", label=<{_CosmologyModel|cosmology<br ALIGN="LEFT"/>cosmology_class<br ALIGN="LEFT"/>method_name<br ALIGN="LEFT"/>|evaluate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.funcs.comparison._CosmologyWrapper" [color="black", fontcolor="black", label=<{_CosmologyWrapper|wrapped : Any<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.base._CriticalDensity" [color="black", fontcolor="black", label=<{_CriticalDensity|critical_density0<br ALIGN="LEFT"/>efunc : Callable[[Any], NDArray[Any]]<br ALIGN="LEFT"/>|critical_density(z: Quantity \| ArrayLike): Quantity<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_pickle._CustomICRS" [color="black", fontcolor="black", label=<{_CustomICRS|default_representation<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.funcs.optimize._CustomSolverCallable" [color="black", fontcolor="black", label=<{_CustomSolverCallable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.base._Delayed" [color="black", fontcolor="black", label=<{_Delayed|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.header._DelayedHeader" [color="black", fontcolor="black", label=<{_DelayedHeader|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree._DescriptionProperty" [color="black", fontcolor="black", label=<{_DescriptionProperty|description<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.uncertainty.core._DistributionRepr" [color="black", fontcolor="black", label=<{_DistributionRepr|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.misc._DummyFile" [color="black", fontcolor="black", label=<{_DummyFile|<br ALIGN="LEFT"/>|<I>write</I>(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.verify._ErrList" [color="black", fontcolor="black", label=<{_ErrList|unit : str<br ALIGN="LEFT"/>|iter_lines(filter, shift)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.rotations._EulerRotation" [color="black", fontcolor="black", label=<{_EulerRotation|input_units<br ALIGN="LEFT"/>return_units<br ALIGN="LEFT"/>|evaluate(alpha, delta, phi, theta, psi, axes_order)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_units_mapping._ExampleModel" [color="black", fontcolor="black", label=<{_ExampleModel|n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>|evaluate(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_models._ExtendedModelMeta" [color="black", fontcolor="black", label=<{_ExtendedModelMeta|model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.data._FTPTLSHandler" [color="black", fontcolor="black", label=<{_FTPTLSHandler|<br ALIGN="LEFT"/>|connect_ftp(user, passwd, host, port, dirs, timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.parameter.core._FValidateField" [color="black", fontcolor="black", label=<{_FValidateField|default : FValidateCallable \| str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.file._File" [color="black", fontcolor="black", label=<{_File|binary : bool<br ALIGN="LEFT"/>close_on_error : bool<br ALIGN="LEFT"/>closed : bool<br ALIGN="LEFT"/>compression : NoneType, str<br ALIGN="LEFT"/>file_like : bool<br ALIGN="LEFT"/>fileobj_mode<br ALIGN="LEFT"/>memmap : NoneType, bool<br ALIGN="LEFT"/>mode : NoneType, str<br ALIGN="LEFT"/>name : bytes, str<br ALIGN="LEFT"/>readonly : bool<br ALIGN="LEFT"/>simulateonly : bool<br ALIGN="LEFT"/>size : int<br ALIGN="LEFT"/>strict_memmap : bool<br ALIGN="LEFT"/>writeonly : bool<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>read(size)<br ALIGN="LEFT"/>readable()<br ALIGN="LEFT"/>readarray(size, offset, dtype, shape)<br ALIGN="LEFT"/>seek(offset, whence)<br ALIGN="LEFT"/>tell()<br ALIGN="LEFT"/>truncate(size)<br ALIGN="LEFT"/>writable()<br ALIGN="LEFT"/>write(string)<br ALIGN="LEFT"/>writearray(array)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.column._FormatP" [color="black", fontcolor="black", label=<{_FormatP|tform<br ALIGN="LEFT"/>|from_tform(format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.column._FormatQ" [color="black", fontcolor="black", label=<{_FormatQ|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.column._FormatX" [color="black", fontcolor="black", label=<{_FormatX|tform<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.format.generic._GenericParserMixin" [color="black", fontcolor="black", label=<{_GenericParserMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.console._GetchUnix" [color="black", fontcolor="black", label=<{_GetchUnix|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.console._GetchWindows" [color="black", fontcolor="black", label=<{_GetchWindows|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.header._HeaderCommentaryCards" [color="black", fontcolor="black", label=<{_HeaderCommentaryCards|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.header._HeaderComments" [color="black", fontcolor="black", label=<{_HeaderComments|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.samp.utils._HubAsClient" [color="black", fontcolor="black", label=<{_HubAsClient|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.samp.utils._HubAsClientMethod" [color="black", fontcolor="black", label=<{_HubAsClientMethod|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree._IDProperty" [color="black", fontcolor="black", label=<{_IDProperty|ID<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.console._IPython" [color="black", fontcolor="black", label=<{_IPython|OutStream<br ALIGN="LEFT"/>ipyio<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.image._ImageBaseHDU" [color="black", fontcolor="black", label=<{_ImageBaseHDU|data<br ALIGN="LEFT"/>header<br ALIGN="LEFT"/>is_image<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>section<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>standard_keyword_comments : dict<br ALIGN="LEFT"/>ver<br ALIGN="LEFT"/>|<I>match_header</I>(header)<br ALIGN="LEFT"/>scale(type, option, bscale, bzero)<br ALIGN="LEFT"/>update_header()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.image._IndexInfo" [color="black", fontcolor="black", label=<{_IndexInfo|contiguous : bool<br ALIGN="LEFT"/>npts : int<br ALIGN="LEFT"/>offset : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.index._IndexModeContext" [color="black", fontcolor="black", label=<{_IndexModeContext|mode<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.bounding_box._Interval" [color="black", fontcolor="black", label=<{_Interval|<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/>domain(resolution)<br ALIGN="LEFT"/>outside(_input: np.ndarray)<br ALIGN="LEFT"/>validate(interval)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.functional_models._InverseTrigonometric1D" [color="black", fontcolor="black", label=<{_InverseTrigonometric1D|input_units<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.stats.histogram._KnuthF" [color="black", fontcolor="black", label=<{_KnuthF|data : ndarray<br ALIGN="LEFT"/>gammaln<br ALIGN="LEFT"/>n : NoneType<br ALIGN="LEFT"/>|bins(M: int): NDArray<br ALIGN="LEFT"/>eval(M: int): float<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.core._LeapSecondsCheck" [color="black", fontcolor="black", label=<{_LeapSecondsCheck|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.core._ModelMeta" [color="black", fontcolor="black", label=<{_ModelMeta|name<br ALIGN="LEFT"/>param_names : tuple<br ALIGN="LEFT"/>|rename(name, inputs, outputs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.fitting._NLLSQFitter" [color="black", fontcolor="black", label=<{_NLLSQFitter|fit_info<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.math_functions._NPUfuncModel" [color="black", fontcolor="black", label=<{_NPUfuncModel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.core._NameField" [color="black", fontcolor="black", label=<{_NameField|default : str \| None<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree._NameProperty" [color="black", fontcolor="black", label=<{_NameProperty|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.exceptions._NoValue" [color="black", fontcolor="black", label=<{_NoValue|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.data._NonClosingBufferedReader" [color="black", fontcolor="black", label=<{_NonClosingBufferedReader|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.data._NonClosingTextIOWrapper" [color="black", fontcolor="black", label=<{_NonClosingTextIOWrapper|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.fitting._NonLinearLSQFitter" [color="black", fontcolor="black", label=<{_NonLinearLSQFitter|fit_info : NoneType<br ALIGN="LEFT"/>supported_constraints : list<br ALIGN="LEFT"/>|objective_function(fps)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.base._NonstandardHDU" [color="black", fontcolor="black", label=<{_NonstandardHDU|data<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>|match_header(header)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.projections._ParameterDS" [color="black", fontcolor="black", label=<{_ParameterDS|dirty : bool<br ALIGN="LEFT"/>|validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.format.base._ParsingFormatMixin" [color="black", fontcolor="black", label=<{_ParsingFormatMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.polynomial._PolyDomainWindow1D" [color="black", fontcolor="black", label=<{_PolyDomainWindow1D|domain<br ALIGN="LEFT"/>window<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.polynomial._SIP1D" [color="black", fontcolor="black", label=<{_SIP1D|coeff_prefix<br ALIGN="LEFT"/>n_inputs : int<br ALIGN="LEFT"/>n_outputs : int<br ALIGN="LEFT"/>order : int<br ALIGN="LEFT"/>|evaluate(x, y)<br ALIGN="LEFT"/>get_num_coeff(ndim)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.base._ScaleFactor" [color="black", fontcolor="black", label=<{_ScaleFactor|scale_factor0<br ALIGN="LEFT"/>|scale_factor(z: Quantity \| ArrayLike): Quantity \| NDArray[Any] \| float<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.state._ScienceStateContext" [color="black", fontcolor="black", label=<{_ScienceStateContext|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.bounding_box._SelectorArgument" [color="black", fontcolor="black", label=<{_SelectorArgument|<br ALIGN="LEFT"/>|get_fixed_value(model, values: dict)<br ALIGN="LEFT"/>get_selector()<br ALIGN="LEFT"/>is_argument(model, argument): bool<br ALIGN="LEFT"/>name(model): str<br ALIGN="LEFT"/>named_tuple(model)<br ALIGN="LEFT"/>pretty_repr(model)<br ALIGN="LEFT"/>validate(model, argument, ignored: bool): Self<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.bounding_box._SelectorArguments" [color="black", fontcolor="black", label=<{_SelectorArguments|ignore<br ALIGN="LEFT"/>kept_ignore<br ALIGN="LEFT"/>|add_ignore(model, argument)<br ALIGN="LEFT"/>get_fixed_values(model, values: dict)<br ALIGN="LEFT"/>get_selector()<br ALIGN="LEFT"/>is_argument(model, argument): bool<br ALIGN="LEFT"/>is_selector(_selector)<br ALIGN="LEFT"/>named_tuple(model)<br ALIGN="LEFT"/>pretty_repr(model)<br ALIGN="LEFT"/>reduce(model, argument)<br ALIGN="LEFT"/>selector_index(model, argument)<br ALIGN="LEFT"/>validate(model, arguments, kept_ignore: list \| None): Self<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.samp.utils._ServerProxyPoolMethod" [color="black", fontcolor="black", label=<{_ServerProxyPoolMethod|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.config.paths._SetTempPath" [color="black", fontcolor="black", label=<{_SetTempPath|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.rotations._SkyRotation" [color="black", fontcolor="black", label=<{_SkyRotation|axes_order : str<br ALIGN="LEFT"/>lat<br ALIGN="LEFT"/>lon<br ALIGN="LEFT"/>lon_pole<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.utils._SpecialOperatorsDict" [color="black", fontcolor="black", label=<{_SpecialOperatorsDict|<br ALIGN="LEFT"/>|add(operator_name, operator)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.spline._Spline" [color="black", fontcolor="black", label=<{_Spline|optional_inputs : dict<br ALIGN="LEFT"/>param_names<br ALIGN="LEFT"/>|evaluate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.spline._SplineFitter" [color="black", fontcolor="black", label=<{_SplineFitter|fit_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.galactocentric._StateProxy" [color="black", fontcolor="black", label=<{_StateProxy|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.hdu.table._TableBaseHDU" [color="black", fontcolor="black", label=<{_TableBaseHDU|columns<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>ver<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/><I>match_header</I>(header)<br ALIGN="LEFT"/>update_header()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.table._TableLikeHDU" [color="black", fontcolor="black", label=<{_TableLikeHDU|columns<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>|from_columns(columns, header, nrows, fill, character_as_bytes)<br ALIGN="LEFT"/><I>match_header</I>(header)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.serialize._TableLite" [color="black", fontcolor="black", label=<{_TableLite|colnames<br ALIGN="LEFT"/>|add_column(col, index)<br ALIGN="LEFT"/>itercols()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tabular._Tabular" [color="black", fontcolor="black", label=<{_Tabular|bounding_box<br ALIGN="LEFT"/>bounds_error : bool<br ALIGN="LEFT"/>fill_value<br ALIGN="LEFT"/>fittable : bool<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>inverse<br ALIGN="LEFT"/>linear : bool<br ALIGN="LEFT"/>lookup_table : NoneType<br ALIGN="LEFT"/>method : str<br ALIGN="LEFT"/>outputs : tuple<br ALIGN="LEFT"/>points : NoneType, tuple<br ALIGN="LEFT"/>return_units<br ALIGN="LEFT"/>standard_broadcasting : bool<br ALIGN="LEFT"/>|evaluate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.base._TemperatureCMB" [color="black", fontcolor="black", label=<{_TemperatureCMB|Tcmb0<br ALIGN="LEFT"/>|Tcmb(z: Quantity \| ArrayLike): Quantity<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.time.tests.test_basic.test_subclass._Time" [color="black", fontcolor="black", label=<{_Time|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.functional_models._Trigonometric1D" [color="black", fontcolor="black", label=<{_Trigonometric1D|amplitude<br ALIGN="LEFT"/>frequency<br ALIGN="LEFT"/>input_units<br ALIGN="LEFT"/>phase<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree._UcdProperty" [color="black", fontcolor="black", label=<{_UcdProperty|ucd<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.fitsrec._UnicodeArrayEncodeError" [color="black", fontcolor="red", label=<{_UnicodeArrayEncodeError|index<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.registry.base._UnifiedIORegistryBase" [color="black", fontcolor="black", label=<{_UnifiedIORegistryBase|available_registries<br ALIGN="LEFT"/>|delay_doc_updates(cls)<br ALIGN="LEFT"/>get_formats(data_class, filter_on)<br ALIGN="LEFT"/>identify_format(origin, data_class_required, path, fileobj, args, kwargs)<br ALIGN="LEFT"/>register_identifier(data_format, data_class, identifier, force)<br ALIGN="LEFT"/>unregister_identifier(data_format, data_class)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.core._UnitContext" [color="black", fontcolor="black", label=<{_UnitContext|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.parameter.core._UnitField" [color="black", fontcolor="black", label=<{_UnitField|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.core._UnitMetaClass" [color="black", fontcolor="black", label=<{_UnitMetaClass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.core._UnitRegistry" [color="black", fontcolor="black", label=<{_UnitRegistry|aliases<br ALIGN="LEFT"/>all_units<br ALIGN="LEFT"/>equivalencies<br ALIGN="LEFT"/>non_prefix_units<br ALIGN="LEFT"/>registry<br ALIGN="LEFT"/>|add_enabled_aliases(aliases: dict[str, UnitBase]): None<br ALIGN="LEFT"/>add_enabled_equivalencies(equivalencies)<br ALIGN="LEFT"/>add_enabled_units(units: object): None<br ALIGN="LEFT"/>get_units_with_physical_type(unit: UnitBase): set[UnitBase]<br ALIGN="LEFT"/>set_enabled_aliases(aliases: dict[str, UnitBase]): None<br ALIGN="LEFT"/>set_enabled_equivalencies(equivalencies)<br ALIGN="LEFT"/>set_enabled_units(units: object): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.votable.tree._UtypeProperty" [color="black", fontcolor="black", label=<{_UtypeProperty|utype<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.column._VLF" [color="black", fontcolor="black", label=<{_VLF|element_dtype<br ALIGN="LEFT"/>max<br ALIGN="LEFT"/>|tolist()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.io.fits.hdu.base._ValidHDU" [color="black", fontcolor="black", label=<{_ValidHDU|name<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>ver<br ALIGN="LEFT"/>|add_checksum(when, override_datasum, checksum_keyword, datasum_keyword)<br ALIGN="LEFT"/>add_datasum(when, datasum_keyword)<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>filebytes()<br ALIGN="LEFT"/>fileinfo()<br ALIGN="LEFT"/>match_header(header)<br ALIGN="LEFT"/>req_cards(keyword, pos, test, fix_value, option, errlist)<br ALIGN="LEFT"/>verify_checksum()<br ALIGN="LEFT"/>verify_datasum()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.nddata.nduncertainty._VariancePropagationMixin" [color="black", fontcolor="black", label=<{_VariancePropagationMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.fits.verify._Verify" [color="black", fontcolor="black", label=<{_Verify|<br ALIGN="LEFT"/>|run_option(option, err_text, fix_text, fix, fixable)<br ALIGN="LEFT"/>verify(option)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.visualization.wcsaxes.core._WCSAxesArtist" [color="black", fontcolor="black", label=<{_WCSAxesArtist|<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.wcs.wcs.validate._WcsValidateHduResult" [color="black", fontcolor="black", label=<{_WcsValidateHduResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcs.validate._WcsValidateResults" [color="black", fontcolor="black", label=<{_WcsValidateResults|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcs.validate._WcsValidateWcsResult" [color="black", fontcolor="black", label=<{_WcsValidateWcsResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.io.votable.tree._XtypeProperty" [color="black", fontcolor="black", label=<{_XtypeProperty|xtype<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.funcs.optimize._ZAtValueKWArgs" [color="black", fontcolor="black", label=<{_ZAtValueKWArgs|bracket : NotRequired[npt.NDArray[np.void] \| _BracketSingle \| None]<br ALIGN="LEFT"/>maxfun : NotRequired[int \| npt.NDArray[np.integer]]<br ALIGN="LEFT"/>method : NotRequired[str \| _CustomSolverCallable]<br ALIGN="LEFT"/>verbose : NotRequired[bool]<br ALIGN="LEFT"/>zmax : NotRequired[npt.ArrayLike]<br ALIGN="LEFT"/>zmin : NotRequired[npt.ArrayLike]<br ALIGN="LEFT"/>ztol : NotRequired[float \| npt.NDArray[np.float64]]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.data._ftptlswrapper" [color="black", fontcolor="black", label=<{_ftptlswrapper|busy : int<br ALIGN="LEFT"/>ftp : FTP_TLS<br ALIGN="LEFT"/>|init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.console._mapfunc" [color="black", fontcolor="black", label=<{_mapfunc|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.astronomical_constants" [color="black", fontcolor="black", label=<{astronomical_constants|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.tests.tests.test_runner.test_invalid_kwarg.bad_return" [color="black", fontcolor="black", label=<{bad_return|<br ALIGN="LEFT"/>|remote_data(remote_data, kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitters.TestEntryPoint.returnbadclass.badclass" [color="black", fontcolor="black", label=<{badclass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.base_constants_version" [color="black", fontcolor="black", label=<{base_constants_version|<br ALIGN="LEFT"/>|set(value)<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_models.classmodel" [color="black", fontcolor="black", label=<{classmodel|f<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|<I>evaluate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.decorators.classproperty" [color="black", fontcolor="black", label=<{classproperty|<br ALIGN="LEFT"/>|<I>deleter</I>(fdel)<br ALIGN="LEFT"/>getter(fget)<br ALIGN="LEFT"/><I>setter</I>(fset)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_sky_coord.test_subclass_property_exception_error.custom_coord" [color="black", fontcolor="black", label=<{custom_coord|prop<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.wcsapi.fitswcs.custom_ctype_to_ucd_mapping" [color="black", fontcolor="black", label=<{custom_ctype_to_ucd_mapping|mapping<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.utils.custom_frame_to_wcs_mappings" [color="black", fontcolor="black", label=<{custom_frame_to_wcs_mappings|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.wcs.utils.custom_wcs_to_frame_mappings" [color="black", fontcolor="black", label=<{custom_wcs_to_frame_mappings|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.cosmology._src.default.default_cosmology" [color="black", fontcolor="black", label=<{default_cosmology|<br ALIGN="LEFT"/>|validate(value: Cosmology \| str \| None): Cosmology \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.angles.core.dms_tuple" [color="black", fontcolor="black", label=<{dms_tuple|d : float \| np.floating[Any]<br ALIGN="LEFT"/>m : float \| np.floating[Any]<br ALIGN="LEFT"/>s : float \| np.floating[Any]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.samp.hub_script.hub_script.dummy_context" [color="black", fontcolor="black", label=<{dummy_context|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.iers.iers.earth_orientation_table" [color="black", fontcolor="black", label=<{earth_orientation_table|<br ALIGN="LEFT"/>|validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.erfa_astrom.erfa_astrom" [color="black", fontcolor="black", label=<{erfa_astrom|<br ALIGN="LEFT"/>|validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.table.tests.test_pprint.TestFormat.test_column_format_callable.format" [color="black", fontcolor="black", label=<{format|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.table.tests.test_pprint.TestFormatWithMaskedElements.test_column_format_callable.format" [color="black", fontcolor="black", label=<{format|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.builtin_frames.galactocentric.galactocentric_frame_defaults" [color="black", fontcolor="black", label=<{galactocentric_frame_defaults|parameters<br ALIGN="LEFT"/>references<br ALIGN="LEFT"/>|get_from_registry(name: str): dict[str, dict]<br ALIGN="LEFT"/>register(name: str, parameters: dict, references): None<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_fitters.TestEntryPoint.successfulimport.goodclass" [color="black", fontcolor="black", label=<{goodclass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.angles.core.hms_tuple" [color="black", fontcolor="black", label=<{hms_tuple|h : float \| np.floating[Any]<br ALIGN="LEFT"/>m : float \| np.floating[Any]<br ALIGN="LEFT"/>s : float \| np.floating[Any]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.tests.runner.keyword" [color="black", fontcolor="black", label=<{keyword|default_value : NoneType<br ALIGN="LEFT"/>priority : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.decorators.lazyproperty" [color="black", fontcolor="black", label=<{lazyproperty|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.modeling.tests.test_core.test_custom_model_subclass.model_b" [color="black", fontcolor="black", label=<{model_b|<br ALIGN="LEFT"/>|evaluate(x, a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.utils.masked.tests.test_masked.test_cannot_just_use_anything_with_a_mask_attribute.my_array" [color="black", fontcolor="black", label=<{my_array|mask : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.tests.tests.test_runner.test_disable_kwarg.no_remote_data" [color="black", fontcolor="black", label=<{no_remote_data|<br ALIGN="LEFT"/>|remote_data(remote_data, kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.physical_constants" [color="black", fontcolor="black", label=<{physical_constants|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.name_resolve.sesame_database" [color="black", fontcolor="black", label=<{sesame_database|<br ALIGN="LEFT"/>|validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.coordinates.name_resolve.sesame_url" [color="black", fontcolor="black", label=<{sesame_url|<br ALIGN="LEFT"/>|validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.config.paths.set_temp_cache" [color="black", fontcolor="black", label=<{set_temp_cache|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.config.paths.set_temp_config" [color="black", fontcolor="black", label=<{set_temp_config|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.utils.decorators.sharedmethod" [color="black", fontcolor="black", label=<{sharedmethod|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.angles.core.signed_dms_tuple" [color="black", fontcolor="black", label=<{signed_dms_tuple|d : float \| np.floating[Any]<br ALIGN="LEFT"/>m : float \| np.floating[Any]<br ALIGN="LEFT"/>s : float \| np.floating[Any]<br ALIGN="LEFT"/>sign : float \| np.integer[Any]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.solar_system.solar_system_ephemeris" [color="black", fontcolor="black", label=<{solar_system_ephemeris|bodies<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>|get_kernel(value)<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.modeling.tests.test_models.subclassmodel" [color="black", fontcolor="black", label=<{subclassmodel|f<br ALIGN="LEFT"/>h<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|<I>evaluate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_decorator.test_no_equivalent.test_quantity" [color="black", fontcolor="black", label=<{test_quantity|unit<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_decorator.test_no_equivalent.test_unit" [color="black", fontcolor="black", label=<{test_unit|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.testcase" [color="black", fontcolor="black", label=<{testcase|f : Callable<br ALIGN="LEFT"/>q_in : tuple[u.Quantity]<br ALIGN="LEFT"/>q_out : tuple[u.Quantity]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.testexc" [color="black", fontcolor="black", label=<{testexc|exc : type<br ALIGN="LEFT"/>f : Callable<br ALIGN="LEFT"/>msg : str \| None<br ALIGN="LEFT"/>q_in : tuple[u.Quantity]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.units.tests.test_quantity_ufuncs.testwarn" [color="black", fontcolor="black", label=<{testwarn|f : Callable<br ALIGN="LEFT"/>q_in : tuple[u.Quantity]<br ALIGN="LEFT"/>wfilter : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"astropy.coordinates.tests.test_transformations.transfunc" [color="black", fontcolor="black", label=<{transfunc|dif<br ALIGN="LEFT"/>rep<br ALIGN="LEFT"/>rep0<br ALIGN="LEFT"/>|both(coo, fr)<br ALIGN="LEFT"/>just_matrix(coo, fr)<br ALIGN="LEFT"/>no_matrix(coo, fr)<br ALIGN="LEFT"/>no_pos(coo, fr)<br ALIGN="LEFT"/>no_vel(coo, fr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.w0wacdm.w0waCDM" [color="black", fontcolor="black", label=<{w0waCDM|w0<br ALIGN="LEFT"/>wa<br ALIGN="LEFT"/>|de_density_scale(z)<br ALIGN="LEFT"/>w(z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.w0wzcdm.w0wzCDM" [color="black", fontcolor="black", label=<{w0wzCDM|w0<br ALIGN="LEFT"/>wz<br ALIGN="LEFT"/>|de_density_scale(z)<br ALIGN="LEFT"/>w(z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.w0cdm.wCDM" [color="black", fontcolor="black", label=<{wCDM|w0<br ALIGN="LEFT"/>|de_density_scale(z)<br ALIGN="LEFT"/>efunc(z)<br ALIGN="LEFT"/>inv_efunc(z)<br ALIGN="LEFT"/>w(z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.cosmology._src.flrw.wpwazpcdm.wpwaCDM" [color="black", fontcolor="black", label=<{wpwaCDM|wa<br ALIGN="LEFT"/>wp<br ALIGN="LEFT"/>zp<br ALIGN="LEFT"/>|de_density_scale(z)<br ALIGN="LEFT"/>w(z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"astropy.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.astronomical_constants" -> "astropy.base_constants_version" [arrowhead="empty", arrowtail="none"];
"astropy.base_constants_version" -> "astropy.utils.state.ScienceState" [arrowhead="empty", arrowtail="none"];
"astropy.config.configuration.ConfigurationChangedWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.config.configuration.ConfigurationDefaultMissingWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.config.configuration.InvalidConfigurationItemWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.config.paths.set_temp_cache" -> "astropy.config.paths._SetTempPath" [arrowhead="empty", arrowtail="none"];
"astropy.config.paths.set_temp_config" -> "astropy.config.paths._SetTempPath" [arrowhead="empty", arrowtail="none"];
"astropy.config.tests.test_configs.test_configitem.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.config.tests.test_configs.test_configitem_options.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.config.tests.test_configs.test_configitem_setters.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.config.tests.test_configs.test_configitem_types.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.config.tests.test_configs.test_configitem_unicode.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.constants.codata2010.CODATA2010" -> "astropy.constants.constant.Constant" [arrowhead="empty", arrowtail="none"];
"astropy.constants.codata2010.EMCODATA2010" -> "astropy.constants.codata2010.CODATA2010" [arrowhead="empty", arrowtail="none"];
"astropy.constants.codata2010.EMCODATA2010" -> "astropy.constants.constant.EMConstant" [arrowhead="empty", arrowtail="none"];
"astropy.constants.codata2014.CODATA2014" -> "astropy.constants.constant.Constant" [arrowhead="empty", arrowtail="none"];
"astropy.constants.codata2014.EMCODATA2014" -> "astropy.constants.codata2014.CODATA2014" [arrowhead="empty", arrowtail="none"];
"astropy.constants.codata2014.EMCODATA2014" -> "astropy.constants.constant.EMConstant" [arrowhead="empty", arrowtail="none"];
"astropy.constants.codata2018.CODATA2018" -> "astropy.constants.constant.Constant" [arrowhead="empty", arrowtail="none"];
"astropy.constants.codata2018.EMCODATA2018" -> "astropy.constants.codata2018.CODATA2018" [arrowhead="empty", arrowtail="none"];
"astropy.constants.codata2018.EMCODATA2018" -> "astropy.constants.constant.EMConstant" [arrowhead="empty", arrowtail="none"];
"astropy.constants.constant.Constant" -> "astropy.units.quantity.Quantity" [arrowhead="empty", arrowtail="none"];
"astropy.constants.constant.EMConstant" -> "astropy.constants.constant.Constant" [arrowhead="empty", arrowtail="none"];
"astropy.constants.iau2012.IAU2012" -> "astropy.constants.constant.Constant" [arrowhead="empty", arrowtail="none"];
"astropy.constants.iau2015.IAU2015" -> "astropy.constants.constant.Constant" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.core.Kernel1D" -> "astropy.convolution.core.Kernel" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.core.Kernel2D" -> "astropy.convolution.core.Kernel" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.AiryDisk2DKernel" -> "astropy.convolution.core.Kernel2D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.Box1DKernel" -> "astropy.convolution.core.Kernel1D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.Box2DKernel" -> "astropy.convolution.core.Kernel2D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.CustomKernel" -> "astropy.convolution.core.Kernel" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.Gaussian1DKernel" -> "astropy.convolution.core.Kernel1D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.Gaussian2DKernel" -> "astropy.convolution.core.Kernel2D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.Model1DKernel" -> "astropy.convolution.core.Kernel1D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.Model2DKernel" -> "astropy.convolution.core.Kernel2D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.Moffat2DKernel" -> "astropy.convolution.core.Kernel2D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.RickerWavelet1DKernel" -> "astropy.convolution.core.Kernel1D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.RickerWavelet2DKernel" -> "astropy.convolution.core.Kernel2D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.Ring2DKernel" -> "astropy.convolution.core.Kernel2D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.Tophat2DKernel" -> "astropy.convolution.core.Kernel2D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.Trapezoid1DKernel" -> "astropy.convolution.core.Kernel1D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.kernels.TrapezoidDisk2DKernel" -> "astropy.convolution.core.Kernel2D" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.utils.KernelArithmeticError" -> "astropy.convolution.utils.KernelError" [arrowhead="empty", arrowtail="none"];
"astropy.convolution.utils.KernelSizeError" -> "astropy.convolution.utils.KernelError" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.angles.core.Angle" -> "astropy.units.quantity.SpecificTypeQuantity" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.angles.core.Latitude" -> "astropy.coordinates.angles.core.Angle" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.angles.core.Longitude" -> "astropy.coordinates.angles.core.Angle" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.angles.core.LongitudeInfo" -> "astropy.units.quantity.QuantityInfo" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.angles.errors.BoundsError" -> "astropy.coordinates.angles.errors.RangeError" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.angles.errors.IllegalHourError" -> "astropy.coordinates.angles.errors.RangeError" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.angles.errors.IllegalHourWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.angles.errors.IllegalMinuteError" -> "astropy.coordinates.angles.errors.RangeError" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.angles.errors.IllegalMinuteWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.angles.errors.IllegalSecondError" -> "astropy.coordinates.angles.errors.RangeError" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.angles.errors.IllegalSecondWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.attributes.CartesianRepresentationAttribute" -> "astropy.coordinates.attributes.Attribute" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.attributes.CoordinateAttribute" -> "astropy.coordinates.attributes.Attribute" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.attributes.DifferentialAttribute" -> "astropy.coordinates.attributes.Attribute" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.attributes.EarthLocationAttribute" -> "astropy.coordinates.attributes.Attribute" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.attributes.Attribute" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.attributes.Attribute" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.baseframe.BaseCoordinateFrame" -> "astropy.utils.masked.core.MaskableShapedLikeNDArray" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.baseframe.CoordinateFrameInfo" -> "astropy.utils.data_info.MixinInfo" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.baseframe.GenericFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.altaz.AltAz" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.cirs.CIRS" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.ecliptic.BarycentricMeanEcliptic" -> "astropy.coordinates.builtin_frames.ecliptic.BaseEclipticFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.ecliptic.BarycentricTrueEcliptic" -> "astropy.coordinates.builtin_frames.ecliptic.BaseEclipticFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.ecliptic.BaseEclipticFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.ecliptic.CustomBarycentricEcliptic" -> "astropy.coordinates.builtin_frames.ecliptic.BaseEclipticFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.ecliptic.GeocentricMeanEcliptic" -> "astropy.coordinates.builtin_frames.ecliptic.BaseEclipticFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.ecliptic.GeocentricTrueEcliptic" -> "astropy.coordinates.builtin_frames.ecliptic.BaseEclipticFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.ecliptic.HeliocentricEclipticIAU76" -> "astropy.coordinates.builtin_frames.ecliptic.BaseEclipticFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.ecliptic.HeliocentricMeanEcliptic" -> "astropy.coordinates.builtin_frames.ecliptic.BaseEclipticFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.ecliptic.HeliocentricTrueEcliptic" -> "astropy.coordinates.builtin_frames.ecliptic.BaseEclipticFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.equatorial.TEME" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.equatorial.TETE" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.fk4.FK4" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.fk4.FK4NoETerms" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.fk5.FK5" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.galactic.Galactic" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.galactocentric.Galactocentric" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.galactocentric.galactocentric_frame_defaults" -> "astropy.utils.state.ScienceState" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.gcrs.GCRS" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.gcrs.PrecessedGeocentric" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.hadec.HADec" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.hcrs.HCRS" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.icrs.ICRS" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.itrs.ITRS" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.lsr.GalacticLSR" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.lsr.LSR" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.lsr.LSRD" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.lsr.LSRK" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.skyoffset.SkyOffsetFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.builtin_frames.supergalactic.Supergalactic" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.distances.Distance" -> "astropy.units.quantity.SpecificTypeQuantity" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.earth.EarthLocation" -> "astropy.units.quantity.Quantity" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.earth.EarthLocationInfo" -> "astropy.units.quantity.QuantityInfoBase" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.erfa_astrom.ErfaAstromInterpolator" -> "astropy.coordinates.erfa_astrom.ErfaAstrom" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.erfa_astrom.erfa_astrom" -> "astropy.utils.state.ScienceState" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.errors.NonRotationTransformationWarning" -> "astropy.utils.exceptions.AstropyUserWarning" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.name_resolve.sesame_database" -> "astropy.utils.state.ScienceState" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.name_resolve.sesame_url" -> "astropy.utils.state.ScienceState" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.polarization.StokesCoord" -> "astropy.utils.shapes.ShapedLikeNDArray" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.polarization.StokesCoordInfo" -> "astropy.utils.data_info.MixinInfo" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.base.BaseDifferential" -> "astropy.coordinates.representation.base.BaseRepresentationOrDifferential" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.base.BaseRepresentation" -> "astropy.coordinates.representation.base.BaseRepresentationOrDifferential" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.base.BaseRepresentationOrDifferential" -> "astropy.utils.masked.core.MaskableShapedLikeNDArray" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.base.BaseRepresentationOrDifferentialInfo" -> "astropy.utils.data_info.MixinInfo" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.base.RepresentationInfo" -> "astropy.coordinates.representation.base.BaseRepresentationOrDifferentialInfo" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.cartesian.CartesianDifferential" -> "astropy.coordinates.representation.base.BaseDifferential" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.representation.base.BaseRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.cylindrical.CylindricalDifferential" -> "astropy.coordinates.representation.base.BaseDifferential" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.cylindrical.CylindricalRepresentation" -> "astropy.coordinates.representation.base.BaseRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.geodetic.BaseBodycentricRepresentation" -> "astropy.coordinates.representation.base.BaseRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.geodetic.BaseGeodeticRepresentation" -> "astropy.coordinates.representation.base.BaseRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.geodetic.GRS80GeodeticRepresentation" -> "astropy.coordinates.representation.geodetic.BaseGeodeticRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.geodetic.WGS72GeodeticRepresentation" -> "astropy.coordinates.representation.geodetic.BaseGeodeticRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.geodetic.WGS84GeodeticRepresentation" -> "astropy.coordinates.representation.geodetic.BaseGeodeticRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.spherical.BaseSphericalCosLatDifferential" -> "astropy.coordinates.representation.base.BaseDifferential" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.spherical.BaseSphericalDifferential" -> "astropy.coordinates.representation.base.BaseDifferential" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.spherical.PhysicsSphericalDifferential" -> "astropy.coordinates.representation.base.BaseDifferential" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.spherical.PhysicsSphericalRepresentation" -> "astropy.coordinates.representation.base.BaseRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.spherical.RadialDifferential" -> "astropy.coordinates.representation.base.BaseDifferential" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.spherical.RadialRepresentation" -> "astropy.coordinates.representation.base.BaseRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.spherical.SphericalCosLatDifferential" -> "astropy.coordinates.representation.spherical.BaseSphericalCosLatDifferential" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.spherical.SphericalDifferential" -> "astropy.coordinates.representation.spherical.BaseSphericalDifferential" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.representation.base.BaseRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.spherical.UnitSphericalCosLatDifferential" -> "astropy.coordinates.representation.spherical.BaseSphericalCosLatDifferential" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.spherical.UnitSphericalDifferential" -> "astropy.coordinates.representation.spherical.BaseSphericalDifferential" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.representation.spherical.UnitSphericalRepresentation" -> "astropy.coordinates.representation.base.BaseRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.sky_coordinate.SkyCoord" -> "astropy.utils.masked.core.MaskableShapedLikeNDArray" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.sky_coordinate.SkyCoordInfo" -> "astropy.coordinates.baseframe.CoordinateFrameInfo" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.solar_system.solar_system_ephemeris" -> "astropy.utils.state.ScienceState" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.spectral_coordinate.NoDistanceWarning" -> "astropy.utils.exceptions.AstropyUserWarning" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.spectral_coordinate.NoVelocityWarning" -> "astropy.utils.exceptions.AstropyUserWarning" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.spectral_coordinate.SpectralCoord" -> "astropy.coordinates.spectral_quantity.SpectralQuantity" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.spectral_quantity.SpectralQuantity" -> "astropy.units.quantity.SpecificTypeQuantity" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_api_ape5.test_transform_api.SomeNewSystem" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_finite_difference_velocities.test_faux_fk5_galactic.Galactic2" -> "astropy.coordinates.builtin_frames.galactic.Galactic" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_finite_difference_velocities.test_faux_lsr.LSR2" -> "astropy.coordinates.builtin_frames.lsr.LSR" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_attribute_repr.TestFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_component_names_repr.NameChangeFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_converting_units.FakeICRS" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_coordinateattribute_transformation.FrameWithCoordinateAttribute" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_differentialattribute.TestFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_differentialattribute.TestFrame2" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_equivalent_frame_coordinateattribute.FrameWithCoordinateAttribute" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_equivalent_frame_locationattribute.FrameWithLocationAttribute" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame1" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame2" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame3" -> "astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame1" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame3" -> "astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame2" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame4" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame5" -> "astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame1" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame5" -> "astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame4" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_frame_subclass_attribute_descriptor.MyFK4" -> "astropy.coordinates.builtin_frames.fk4.FK4" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_nameless_frame_subclass.NewFrame" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_nameless_frame_subclass.NewFrame" -> "astropy.coordinates.tests.test_frames.test_nameless_frame_subclass.Test" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_non_spherical_representation_unit_creation.PhysicsICRS" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_quantity_attribute_default.MyCoord" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_quantity_attribute_default.MyCoord2" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_quantity_attribute_default.MyCoord3" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_representation_info.NewICRS1" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_representation_info.NewICRS2" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_representation_info.NewICRS3" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_representation_subclass.NewSphericalRepresentation" -> "astropy.coordinates.representation.spherical.SphericalRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_frames.test_representation_subclass.NewUnitSphericalRepresentation" -> "astropy.coordinates.representation.spherical.UnitSphericalRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations.setup_class.CustomGeodetic" -> "astropy.coordinates.representation.geodetic.BaseGeodeticRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations.setup_class.CustomSphericBodycentric" -> "astropy.coordinates.representation.geodetic.BaseBodycentricRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations.setup_class.CustomSphericGeodetic" -> "astropy.coordinates.representation.geodetic.BaseGeodeticRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations.setup_class.IAUMARS2000BodycentricRepresentation" -> "astropy.coordinates.representation.geodetic.BaseBodycentricRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations.setup_class.IAUMARS2000GeodeticRepresentation" -> "astropy.coordinates.representation.geodetic.BaseGeodeticRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_geodetic_representations.TestCustomGeodeticRepresentations.test_subclass_bad_ellipsoid.InvalidCustomEllipsoid" -> "astropy.coordinates.representation.geodetic.BaseGeodeticRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_masked.TestFrame" -> "astropy.coordinates.tests.test_masked.MaskedSphericalSetup" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_masked.TestSkyCoord" -> "astropy.coordinates.tests.test_masked.TestFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_masked.TestSkyCoordWithOnlyDifferentialsMasked" -> "astropy.coordinates.tests.test_masked.TestSkyCoordWithDifferentials" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_masked.TestSphericalRepresentationSeparateMasks" -> "astropy.coordinates.tests.test_masked.MaskedSphericalSetup" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_pickle._CustomICRS" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_regression.test_regression_6236.MyFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_regression.test_regression_6236.MySpecialFrame" -> "astropy.coordinates.tests.test_regression.test_regression_6236.MyFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_regression.test_regression_8276.MyFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_representation.TestSphericalRepresentation.test_init_subclass.Longitude180" -> "astropy.coordinates.angles.core.Longitude" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_representation.test_duplicate_warning.UnitSphericalRepresentation" -> "astropy.coordinates.representation.base.BaseRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_representation.test_minimal_subclass.LogDRepresentation" -> "astropy.coordinates.representation.base.BaseRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_representation.test_subclass_representation.ICRSWrap180" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_representation.test_subclass_representation.Longitude180" -> "astropy.coordinates.angles.core.Longitude" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_representation.test_subclass_representation.SphericalWrap180Representation" -> "astropy.coordinates.representation.spherical.SphericalRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_representation.unitphysics.UnitPhysicsSphericalRepresentation" -> "astropy.coordinates.representation.base.BaseRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_representation_methods.TestManipulation" -> "astropy.coordinates.tests.test_representation_methods.ShapeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_representation_methods.TestSetShape" -> "astropy.coordinates.tests.test_representation_methods.ShapeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_representation_methods.TestShapeFunctions" -> "astropy.coordinates.tests.test_representation_methods.ShapeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_sites.test_non_EarthLocation.EarthLocation2" -> "astropy.coordinates.earth.EarthLocation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_sky_coord.test_custom_frame_skycoord.BlahBleeBlopFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_sky_coord.test_frame_attr_changes.FakeFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_sky_coord.test_multiple_aliases.MultipleAliasesFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_sky_coord.test_none_differential_type.MockHeliographicStonyhurst" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_sky_coord.test_setitem_exceptions.SkyCoordSub" -> "astropy.coordinates.sky_coordinate.SkyCoord" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_sky_coord.test_subclass_property_exception_error.custom_coord" -> "astropy.coordinates.sky_coordinate.SkyCoord" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_sky_coord.test_wcs_methods.SkyCoord2" -> "astropy.coordinates.sky_coordinate.SkyCoord" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_transformations.TCoo1" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_transformations.TCoo2" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_transformations.TCoo3" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_transformations.test_frame_override_component_with_attribute.BorkedFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_transformations.test_impose_finite_difference_dt.H1" -> "astropy.coordinates.builtin_frames.hcrs.HCRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_transformations.test_impose_finite_difference_dt.H2" -> "astropy.coordinates.builtin_frames.hcrs.HCRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_transformations.test_impose_finite_difference_dt.H3" -> "astropy.coordinates.builtin_frames.hcrs.HCRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_transformations.test_multiple_aliases.MultipleAliasesFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_transformations.test_static_matrix_combine_paths.AFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_transformations.test_static_matrix_combine_paths.BFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_unit_representation.test_unit_representation_subclass.Longitude180" -> "astropy.coordinates.angles.core.Longitude" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_unit_representation.test_unit_representation_subclass.MyFrame" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_unit_representation.test_unit_representation_subclass.SphericalWrap180Representation" -> "astropy.coordinates.representation.spherical.SphericalRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.tests.test_unit_representation.test_unit_representation_subclass.UnitSphericalWrap180Representation" -> "astropy.coordinates.representation.spherical.UnitSphericalRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.transformations.affine.AffineTransform" -> "astropy.coordinates.transformations.affine.BaseAffineTransform" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.transformations.affine.BaseAffineTransform" -> "astropy.coordinates.transformations.base.CoordinateTransform" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.transformations.affine.DynamicMatrixTransform" -> "astropy.coordinates.transformations.affine.BaseAffineTransform" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.transformations.affine.StaticMatrixTransform" -> "astropy.coordinates.transformations.affine.BaseAffineTransform" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.transformations.composite.CompositeTransform" -> "astropy.coordinates.transformations.base.CoordinateTransform" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.transformations.function.FunctionTransform" -> "astropy.coordinates.transformations.base.CoordinateTransform" [arrowhead="empty", arrowtail="none"];
"astropy.coordinates.transformations.function.FunctionTransformWithFiniteDifference" -> "astropy.coordinates.transformations.function.FunctionTransform" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.default.default_cosmology" -> "astropy.utils.state.ScienceState" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.base.FLRW" -> "astropy.cosmology._src.core.Cosmology" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.base.FLRW" -> "astropy.cosmology._src.flrw.base._BaryonComponent" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.base.FLRW" -> "astropy.cosmology._src.flrw.base._CriticalDensity" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.base.FLRW" -> "astropy.cosmology._src.flrw.base._ScaleFactor" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.base.FLRW" -> "astropy.cosmology._src.flrw.base._TemperatureCMB" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.base.FlatFLRWMixin" -> "astropy.cosmology._src.core.FlatCosmologyMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.lambdacdm.FlatLambdaCDM" -> "astropy.cosmology._src.flrw.base.FlatFLRWMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.lambdacdm.FlatLambdaCDM" -> "astropy.cosmology._src.flrw.lambdacdm.LambdaCDM" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.lambdacdm.LambdaCDM" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.w0cdm.FlatwCDM" -> "astropy.cosmology._src.flrw.base.FlatFLRWMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.w0cdm.FlatwCDM" -> "astropy.cosmology._src.flrw.w0cdm.wCDM" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.w0cdm.wCDM" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.w0wacdm.Flatw0waCDM" -> "astropy.cosmology._src.flrw.base.FlatFLRWMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.w0wacdm.Flatw0waCDM" -> "astropy.cosmology._src.flrw.w0wacdm.w0waCDM" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.w0wacdm.w0waCDM" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.w0wzcdm.Flatw0wzCDM" -> "astropy.cosmology._src.flrw.base.FlatFLRWMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.w0wzcdm.Flatw0wzCDM" -> "astropy.cosmology._src.flrw.w0wzcdm.w0wzCDM" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.w0wzcdm.w0wzCDM" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.wpwazpcdm.FlatwpwaCDM" -> "astropy.cosmology._src.flrw.base.FlatFLRWMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.wpwazpcdm.FlatwpwaCDM" -> "astropy.cosmology._src.flrw.wpwazpcdm.wpwaCDM" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.flrw.wpwazpcdm.wpwaCDM" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.io.builtin.model._CosmologyModel" -> "astropy.modeling.core.FittableModel" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.io.connect.CosmologyFromFormat" -> "astropy.io.registry.interface.UnifiedReadWrite" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.io.connect.CosmologyRead" -> "astropy.io.registry.interface.UnifiedReadWrite" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.io.connect.CosmologyToFormat" -> "astropy.io.registry.interface.UnifiedReadWrite" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.io.connect.CosmologyWrite" -> "astropy.io.registry.interface.UnifiedReadWrite" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_base.FLRWTest" -> "astropy.cosmology._src.tests.flrw.test_parameters.ParameterH0TestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_base.FLRWTest" -> "astropy.cosmology._src.tests.flrw.test_parameters.ParameterNeffTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_base.FLRWTest" -> "astropy.cosmology._src.tests.flrw.test_parameters.ParameterOb0TestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_base.FLRWTest" -> "astropy.cosmology._src.tests.flrw.test_parameters.ParameterOde0TestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_base.FLRWTest" -> "astropy.cosmology._src.tests.flrw.test_parameters.ParameterOm0TestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_base.FLRWTest" -> "astropy.cosmology._src.tests.flrw.test_parameters.ParameterTcmb0TestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_base.FLRWTest" -> "astropy.cosmology._src.tests.flrw.test_parameters.Parameterm_nuTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_base.FLRWTest" -> "astropy.cosmology._src.tests.test_core.CosmologyTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_base.FlatFLRWMixinTest" -> "astropy.cosmology._src.tests.flrw.test_parameters.ParameterFlatOde0TestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_base.FlatFLRWMixinTest" -> "astropy.cosmology._src.tests.test_core.FlatCosmologyMixinTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_flrw.SubFLRW" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_flrw.TestFLRW" -> "astropy.cosmology._src.tests.flrw.test_base.FLRWTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_lambdacdm.TestFlatLambdaCDM" -> "astropy.cosmology._src.tests.flrw.test_base.FlatFLRWMixinTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_lambdacdm.TestFlatLambdaCDM" -> "astropy.cosmology._src.tests.flrw.test_lambdacdm.TestLambdaCDM" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_lambdacdm.TestLambdaCDM" -> "astropy.cosmology._src.tests.flrw.test_base.FLRWTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterFlatOde0TestMixin" -> "astropy.cosmology._src.tests.flrw.test_parameters.ParameterOde0TestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterH0TestMixin" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterNeffTestMixin" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterOb0TestMixin" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterOde0TestMixin" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterOm0TestMixin" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_parameters.ParameterTcmb0TestMixin" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_parameters.Parameterm_nuTestMixin" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w.W1" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w.W1nu" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0cdm.Parameterw0TestMixin" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0cdm.TestFlatwCDM" -> "astropy.cosmology._src.tests.flrw.test_base.FlatFLRWMixinTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0cdm.TestFlatwCDM" -> "astropy.cosmology._src.tests.flrw.test_w0cdm.TestwCDM" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0cdm.TestwCDM" -> "astropy.cosmology._src.tests.flrw.test_base.FLRWTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0cdm.TestwCDM" -> "astropy.cosmology._src.tests.flrw.test_w0cdm.Parameterw0TestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0wacdm.ParameterwaTestMixin" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0wacdm.TestFlatw0waCDM" -> "astropy.cosmology._src.tests.flrw.test_base.FlatFLRWMixinTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0wacdm.TestFlatw0waCDM" -> "astropy.cosmology._src.tests.flrw.test_w0wacdm.Testw0waCDM" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0wacdm.Testw0waCDM" -> "astropy.cosmology._src.tests.flrw.test_base.FLRWTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0wacdm.Testw0waCDM" -> "astropy.cosmology._src.tests.flrw.test_w0cdm.Parameterw0TestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0wacdm.Testw0waCDM" -> "astropy.cosmology._src.tests.flrw.test_w0wacdm.ParameterwaTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0wzcdm.ParameterwzTestMixin" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0wzcdm.TestFlatw0wzCDM" -> "astropy.cosmology._src.tests.flrw.test_base.FlatFLRWMixinTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0wzcdm.TestFlatw0wzCDM" -> "astropy.cosmology._src.tests.flrw.test_w0wzcdm.Testw0wzCDM" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0wzcdm.Testw0wzCDM" -> "astropy.cosmology._src.tests.flrw.test_base.FLRWTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0wzcdm.Testw0wzCDM" -> "astropy.cosmology._src.tests.flrw.test_w0cdm.Parameterw0TestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_w0wzcdm.Testw0wzCDM" -> "astropy.cosmology._src.tests.flrw.test_w0wzcdm.ParameterwzTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_wpwazpcdm.ParameterwpTestMixin" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_wpwazpcdm.ParameterzpTestMixin" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_wpwazpcdm.TestFlatwpwaCDM" -> "astropy.cosmology._src.tests.flrw.test_base.FlatFLRWMixinTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_wpwazpcdm.TestFlatwpwaCDM" -> "astropy.cosmology._src.tests.flrw.test_wpwazpcdm.TestwpwaCDM" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_wpwazpcdm.TestwpwaCDM" -> "astropy.cosmology._src.tests.flrw.test_base.FLRWTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_wpwazpcdm.TestwpwaCDM" -> "astropy.cosmology._src.tests.flrw.test_w0wacdm.ParameterwaTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_wpwazpcdm.TestwpwaCDM" -> "astropy.cosmology._src.tests.flrw.test_wpwazpcdm.ParameterwpTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.flrw.test_wpwazpcdm.TestwpwaCDM" -> "astropy.cosmology._src.tests.flrw.test_wpwazpcdm.ParameterzpTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.funcs.test_comparison.ComparisonFunctionTestBase" -> "astropy.cosmology._src.tests.io.base.ToFromTestMixinBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.funcs.test_comparison.Test_cosmology_equal" -> "astropy.cosmology._src.tests.funcs.test_comparison.ComparisonFunctionTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.funcs.test_comparison.Test_cosmology_not_equal" -> "astropy.cosmology._src.tests.funcs.test_comparison.ComparisonFunctionTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.funcs.test_comparison.Test_parse_format" -> "astropy.cosmology._src.tests.funcs.test_comparison.ComparisonFunctionTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.base.IODirectTestBase" -> "astropy.cosmology._src.tests.io.base.IOTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.base.IODirectTestBase.setup.CosmologyWithKwargs" -> "astropy.cosmology._src.core.Cosmology" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.base.ReadWriteDirectTestBase" -> "astropy.cosmology._src.tests.io.base.IODirectTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.base.ReadWriteDirectTestBase" -> "astropy.cosmology._src.tests.io.base.ToFromTestMixinBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.base.ReadWriteTestMixinBase" -> "astropy.cosmology._src.tests.io.base.IOTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.base.ToFromDirectTestBase" -> "astropy.cosmology._src.tests.io.base.IODirectTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.base.ToFromDirectTestBase" -> "astropy.cosmology._src.tests.io.base.ToFromTestMixinBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.base.ToFromTestMixinBase" -> "astropy.cosmology._src.tests.io.base.IOTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_connect.ReadWriteTestMixin" -> "astropy.cosmology._src.tests.io.test_ecsv.ReadWriteECSVTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_connect.ReadWriteTestMixin" -> "astropy.cosmology._src.tests.io.test_html.ReadWriteHTMLTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_connect.ReadWriteTestMixin" -> "astropy.cosmology._src.tests.io.test_json.ReadWriteJSONTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_connect.ReadWriteTestMixin" -> "astropy.cosmology._src.tests.io.test_latex.WriteLATEXTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_connect.TestCosmologyReadWrite" -> "astropy.cosmology._src.tests.io.test_connect.ReadWriteTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_connect.TestCosmologyToFromFormat" -> "astropy.cosmology._src.tests.io.test_connect.ToFromFormatTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_connect.ToFromFormatTestMixin" -> "astropy.cosmology._src.tests.io.test_cosmology.ToFromCosmologyTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_connect.ToFromFormatTestMixin" -> "astropy.cosmology._src.tests.io.test_mapping.ToFromMappingTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_connect.ToFromFormatTestMixin" -> "astropy.cosmology._src.tests.io.test_model.ToFromModelTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_connect.ToFromFormatTestMixin" -> "astropy.cosmology._src.tests.io.test_row.ToFromRowTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_connect.ToFromFormatTestMixin" -> "astropy.cosmology._src.tests.io.test_table.ToFromTableTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_connect.ToFromFormatTestMixin" -> "astropy.cosmology._src.tests.io.test_yaml.ToFromYAMLTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_cosmology.TestToFromCosmology" -> "astropy.cosmology._src.tests.io.base.IODirectTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_cosmology.TestToFromCosmology" -> "astropy.cosmology._src.tests.io.test_cosmology.ToFromCosmologyTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_cosmology.ToFromCosmologyTestMixin" -> "astropy.cosmology._src.tests.io.base.ToFromTestMixinBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_ecsv.ReadWriteECSVTestMixin" -> "astropy.cosmology._src.tests.io.base.ReadWriteTestMixinBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_ecsv.TestReadWriteECSV" -> "astropy.cosmology._src.tests.io.base.ReadWriteDirectTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_ecsv.TestReadWriteECSV" -> "astropy.cosmology._src.tests.io.test_ecsv.ReadWriteECSVTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_html.ReadWriteHTMLTestMixin" -> "astropy.cosmology._src.tests.io.base.ReadWriteTestMixinBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_html.TestReadWriteHTML" -> "astropy.cosmology._src.tests.io.base.ReadWriteDirectTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_html.TestReadWriteHTML" -> "astropy.cosmology._src.tests.io.test_html.ReadWriteHTMLTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_json.ReadWriteJSONTestMixin" -> "astropy.cosmology._src.tests.io.base.ReadWriteTestMixinBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_json.TestReadWriteJSON" -> "astropy.cosmology._src.tests.io.base.ReadWriteDirectTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_json.TestReadWriteJSON" -> "astropy.cosmology._src.tests.io.test_json.ReadWriteJSONTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_latex.TestReadWriteLaTex" -> "astropy.cosmology._src.tests.io.base.ReadWriteDirectTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_latex.TestReadWriteLaTex" -> "astropy.cosmology._src.tests.io.test_latex.WriteLATEXTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_latex.WriteLATEXTestMixin" -> "astropy.cosmology._src.tests.io.base.ReadWriteTestMixinBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_mapping.TestToFromMapping" -> "astropy.cosmology._src.tests.io.base.ToFromDirectTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_mapping.TestToFromMapping" -> "astropy.cosmology._src.tests.io.test_mapping.ToFromMappingTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_mapping.ToFromMappingTestMixin" -> "astropy.cosmology._src.tests.io.base.ToFromTestMixinBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_model.TestToFromModel" -> "astropy.cosmology._src.tests.io.base.ToFromDirectTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_model.TestToFromModel" -> "astropy.cosmology._src.tests.io.test_model.ToFromModelTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_model.ToFromModelTestMixin" -> "astropy.cosmology._src.tests.io.base.ToFromTestMixinBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_row.TestToFromRow" -> "astropy.cosmology._src.tests.io.base.ToFromDirectTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_row.TestToFromRow" -> "astropy.cosmology._src.tests.io.test_row.ToFromRowTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_row.ToFromRowTestMixin" -> "astropy.cosmology._src.tests.io.base.ToFromTestMixinBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_table.TestToFromTable" -> "astropy.cosmology._src.tests.io.base.ToFromDirectTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_table.TestToFromTable" -> "astropy.cosmology._src.tests.io.test_table.ToFromTableTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_table.ToFromTableTestMixin" -> "astropy.cosmology._src.tests.io.base.ToFromTestMixinBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_yaml.TestToFromYAML" -> "astropy.cosmology._src.tests.io.base.ToFromDirectTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_yaml.TestToFromYAML" -> "astropy.cosmology._src.tests.io.test_yaml.ToFromYAMLTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.io.test_yaml.ToFromYAMLTestMixin" -> "astropy.cosmology._src.tests.io.base.ToFromTestMixinBase" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.parameter.test_descriptors.TestParametersAttribute.test_descriptor_attr_name_not_str.Obj2" -> "astropy.cosmology._src.tests.parameter.test_descriptors.Obj" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.parameter.test_parameter.TestParameter" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.parameter.test_parameter.TestParameter.setup_class.Example1" -> "astropy.cosmology._src.core.Cosmology" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.parameter.test_parameter.TestParameter.setup_class.Example2" -> "astropy.cosmology._src.tests.parameter.test_parameter.TestParameter.setup_class.Example1" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_core.CosmologyTest" -> "astropy.cosmology._src.tests.io.test_connect.ReadWriteTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_core.CosmologyTest" -> "astropy.cosmology._src.tests.io.test_connect.ToFromFormatTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_core.CosmologyTest" -> "astropy.cosmology._src.tests.parameter.test_descriptors.ParametersAttributeTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_core.CosmologyTest" -> "astropy.cosmology._src.tests.parameter.test_parameter.ParameterTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_core.CosmologyTest" -> "astropy.cosmology._src.tests.test_core.MetaTestMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_core.FlatCosmologyMixinTest.test_subclassing.SubClass2" -> "astropy.cosmology._src.tests.test_core.FlatCosmologyMixinTest.test_subclassing.Mixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_core.FlatCosmologyMixinTest.test_subclassing.SubClass3" -> "astropy.cosmology._src.tests.test_core.FlatCosmologyMixinTest.test_subclassing.Mixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_core.SubCosmology" -> "astropy.cosmology._src.core.Cosmology" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_core.TestCosmology" -> "astropy.cosmology._src.tests.test_core.CosmologyTest" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_core.test__nonflatclass__multiple_nonflat_inheritance.FlatSubCosmology" -> "astropy.cosmology._src.core.FlatCosmologyMixin" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_core.test__nonflatclass__multiple_nonflat_inheritance.FlatSubCosmology" -> "astropy.cosmology._src.tests.test_core.SubCosmology" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_core.test__nonflatclass__multiple_nonflat_inheritance.FlatSubCosmology" -> "astropy.cosmology._src.tests.test_core.test__nonflatclass__multiple_nonflat_inheritance.SubCosmology2" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_core.test__nonflatclass__multiple_nonflat_inheritance.SubCosmology2" -> "astropy.cosmology._src.core.Cosmology" [arrowhead="empty", arrowtail="none"];
"astropy.cosmology._src.tests.test_utils.test_all_cls_vars.ClassB" -> "astropy.cosmology._src.tests.test_utils.test_all_cls_vars.ClassA" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.configobj.ConfigObj" -> "astropy.extern.configobj.configobj.Section" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.configobj.ConfigParserInterpolation" -> "astropy.extern.configobj.configobj.InterpolationEngine" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.configobj.ConfigspecError" -> "astropy.extern.configobj.configobj.ConfigObjError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.configobj.DuplicateError" -> "astropy.extern.configobj.configobj.ConfigObjError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.configobj.InterpolationError" -> "astropy.extern.configobj.configobj.ConfigObjError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.configobj.InterpolationLoopError" -> "astropy.extern.configobj.configobj.InterpolationError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.configobj.MissingInterpolationOption" -> "astropy.extern.configobj.configobj.InterpolationError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.configobj.NestingError" -> "astropy.extern.configobj.configobj.ConfigObjError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.configobj.ParseError" -> "astropy.extern.configobj.configobj.ConfigObjError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.configobj.RepeatSectionError" -> "astropy.extern.configobj.configobj.ConfigObjError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.configobj.TemplateInterpolation" -> "astropy.extern.configobj.configobj.InterpolationEngine" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.configobj.UnreprError" -> "astropy.extern.configobj.configobj.ConfigObjError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.validate.VdtMissingValue" -> "astropy.extern.configobj.validate.ValidateError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.validate.VdtTypeError" -> "astropy.extern.configobj.validate.ValidateError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.validate.VdtUnknownCheckError" -> "astropy.extern.configobj.validate.ValidateError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.validate.VdtValueError" -> "astropy.extern.configobj.validate.ValidateError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.validate.VdtValueTooBigError" -> "astropy.extern.configobj.validate.VdtValueError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.validate.VdtValueTooLongError" -> "astropy.extern.configobj.validate.VdtValueError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.validate.VdtValueTooShortError" -> "astropy.extern.configobj.validate.VdtValueError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.configobj.validate.VdtValueTooSmallError" -> "astropy.extern.configobj.validate.VdtValueError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.ply.yacc.GrammarError" -> "astropy.extern.ply.yacc.YaccError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.ply.yacc.LALRError" -> "astropy.extern.ply.yacc.YaccError" [arrowhead="empty", arrowtail="none"];
"astropy.extern.ply.yacc.LRGeneratedTable" -> "astropy.extern.ply.yacc.LRTable" [arrowhead="empty", arrowtail="none"];
"astropy.extern.ply.yacc.VersionError" -> "astropy.extern.ply.yacc.YaccError" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.Basic" -> "astropy.io.ascii.core.BaseReader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.BasicData" -> "astropy.io.ascii.core.BaseData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.BasicHeader" -> "astropy.io.ascii.core.BaseHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.CommentedHeader" -> "astropy.io.ascii.basic.Basic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.CommentedHeaderHeader" -> "astropy.io.ascii.basic.BasicHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.Csv" -> "astropy.io.ascii.basic.Basic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.CsvData" -> "astropy.io.ascii.basic.BasicData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.CsvHeader" -> "astropy.io.ascii.basic.BasicHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.CsvSplitter" -> "astropy.io.ascii.core.DefaultSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.NoHeader" -> "astropy.io.ascii.basic.Basic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.NoHeaderData" -> "astropy.io.ascii.basic.BasicData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.NoHeaderHeader" -> "astropy.io.ascii.basic.BasicHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.Rdb" -> "astropy.io.ascii.basic.Tab" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.RdbData" -> "astropy.io.ascii.basic.TabData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.RdbHeader" -> "astropy.io.ascii.basic.TabHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.Tab" -> "astropy.io.ascii.basic.Basic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.TabData" -> "astropy.io.ascii.basic.BasicData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.TabDataSplitter" -> "astropy.io.ascii.basic.TabHeaderSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.TabHeader" -> "astropy.io.ascii.basic.BasicHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.basic.TabHeaderSplitter" -> "astropy.io.ascii.core.DefaultSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.cds.Cds" -> "astropy.io.ascii.core.BaseReader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.cds.CdsData" -> "astropy.io.ascii.core.BaseData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.cds.CdsHeader" -> "astropy.io.ascii.core.BaseHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.core.AllType" -> "astropy.io.ascii.core.FloatType" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.core.AllType" -> "astropy.io.ascii.core.IntType" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.core.AllType" -> "astropy.io.ascii.core.StrType" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.core.BoolType" -> "astropy.io.ascii.core.NoType" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.core.ContinuationLinesInputter" -> "astropy.io.ascii.core.BaseInputter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.core.DefaultSplitter" -> "astropy.io.ascii.core.BaseSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.core.FloatType" -> "astropy.io.ascii.core.NumType" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.core.IntType" -> "astropy.io.ascii.core.NumType" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.core.NumType" -> "astropy.io.ascii.core.NoType" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.core.StrType" -> "astropy.io.ascii.core.NoType" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.core.TableOutputter" -> "astropy.io.ascii.core.BaseOutputter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.core.WhitespaceSplitter" -> "astropy.io.ascii.core.DefaultSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.daophot.Daophot" -> "astropy.io.ascii.core.BaseReader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.daophot.DaophotData" -> "astropy.io.ascii.core.BaseData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.daophot.DaophotHeader" -> "astropy.io.ascii.core.BaseHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.daophot.DaophotInputter" -> "astropy.io.ascii.core.ContinuationLinesInputter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.ecsv.Ecsv" -> "astropy.io.ascii.basic.Basic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.ecsv.EcsvData" -> "astropy.io.ascii.basic.BasicData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.ecsv.EcsvHeader" -> "astropy.io.ascii.basic.BasicHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.ecsv.EcsvOutputter" -> "astropy.io.ascii.core.TableOutputter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.ecsv.InvalidEcsvDatatypeWarning" -> "astropy.utils.exceptions.AstropyUserWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fastbasic.FastCommentedHeader" -> "astropy.io.ascii.fastbasic.FastBasic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fastbasic.FastCsv" -> "astropy.io.ascii.fastbasic.FastBasic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fastbasic.FastNoHeader" -> "astropy.io.ascii.fastbasic.FastBasic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fastbasic.FastRdb" -> "astropy.io.ascii.fastbasic.FastBasic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fastbasic.FastTab" -> "astropy.io.ascii.fastbasic.FastBasic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fixedwidth.FixedWidth" -> "astropy.io.ascii.basic.Basic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fixedwidth.FixedWidthData" -> "astropy.io.ascii.basic.BasicData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fixedwidth.FixedWidthHeader" -> "astropy.io.ascii.basic.BasicHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fixedwidth.FixedWidthHeaderSplitter" -> "astropy.io.ascii.core.DefaultSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fixedwidth.FixedWidthNoHeader" -> "astropy.io.ascii.fixedwidth.FixedWidth" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fixedwidth.FixedWidthNoHeaderData" -> "astropy.io.ascii.fixedwidth.FixedWidthData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fixedwidth.FixedWidthNoHeaderHeader" -> "astropy.io.ascii.fixedwidth.FixedWidthHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fixedwidth.FixedWidthSplitter" -> "astropy.io.ascii.core.BaseSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fixedwidth.FixedWidthTwoLine" -> "astropy.io.ascii.fixedwidth.FixedWidth" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fixedwidth.FixedWidthTwoLineData" -> "astropy.io.ascii.fixedwidth.FixedWidthData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fixedwidth.FixedWidthTwoLineDataSplitter" -> "astropy.io.ascii.fixedwidth.FixedWidthSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.fixedwidth.FixedWidthTwoLineHeader" -> "astropy.io.ascii.fixedwidth.FixedWidthHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.html.HTML" -> "astropy.io.ascii.core.BaseReader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.html.HTMLData" -> "astropy.io.ascii.core.BaseData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.html.HTMLHeader" -> "astropy.io.ascii.core.BaseHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.html.HTMLInputter" -> "astropy.io.ascii.core.BaseInputter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.html.HTMLOutputter" -> "astropy.io.ascii.core.TableOutputter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.html.HTMLSplitter" -> "astropy.io.ascii.core.BaseSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.ipac.Ipac" -> "astropy.io.ascii.basic.Basic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.ipac.IpacData" -> "astropy.io.ascii.fixedwidth.FixedWidthData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.ipac.IpacDataSplitter" -> "astropy.io.ascii.fixedwidth.FixedWidthSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.ipac.IpacHeader" -> "astropy.io.ascii.fixedwidth.FixedWidthHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.ipac.IpacHeaderSplitter" -> "astropy.io.ascii.core.BaseSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.latex.AASTex" -> "astropy.io.ascii.latex.Latex" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.latex.AASTexData" -> "astropy.io.ascii.latex.LatexData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.latex.AASTexHeader" -> "astropy.io.ascii.latex.LatexHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.latex.AASTexHeaderSplitter" -> "astropy.io.ascii.latex.LatexSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.latex.Latex" -> "astropy.io.ascii.core.BaseReader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.latex.LatexData" -> "astropy.io.ascii.core.BaseData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.latex.LatexHeader" -> "astropy.io.ascii.core.BaseHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.latex.LatexInputter" -> "astropy.io.ascii.core.BaseInputter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.latex.LatexSplitter" -> "astropy.io.ascii.core.BaseSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.mrt.Mrt" -> "astropy.io.ascii.core.BaseReader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.mrt.MrtData" -> "astropy.io.ascii.cds.CdsData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.mrt.MrtHeader" -> "astropy.io.ascii.cds.CdsHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.mrt.MrtSplitter" -> "astropy.io.ascii.fixedwidth.FixedWidthSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.qdp.QDP" -> "astropy.io.ascii.basic.Basic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.qdp.QDPData" -> "astropy.io.ascii.basic.BasicData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.qdp.QDPHeader" -> "astropy.io.ascii.basic.CommentedHeaderHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.qdp.QDPSplitter" -> "astropy.io.ascii.core.DefaultSplitter" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.rst.RST" -> "astropy.io.ascii.fixedwidth.FixedWidth" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.rst.SimpleRSTData" -> "astropy.io.ascii.fixedwidth.FixedWidthData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.rst.SimpleRSTHeader" -> "astropy.io.ascii.fixedwidth.FixedWidthHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.sextractor.SExtractor" -> "astropy.io.ascii.core.BaseReader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.sextractor.SExtractorData" -> "astropy.io.ascii.core.BaseData" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.sextractor.SExtractorHeader" -> "astropy.io.ascii.core.BaseHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.tests.test_read.test_initial_column_fill_values.TestHeader" -> "astropy.io.ascii.basic.BasicHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.tests.test_read.test_initial_column_fill_values.Tester" -> "astropy.io.ascii.basic.Basic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.tests.test_types.test_col_dtype_in_custom_class.TestDtype" -> "astropy.io.ascii.basic.Basic" [arrowhead="empty", arrowtail="none"];
"astropy.io.ascii.tests.test_types.test_col_dtype_in_custom_class.TestDtypeHeader" -> "astropy.io.ascii.basic.BasicHeader" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.card.Card" -> "astropy.io.fits.verify._Verify" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.column.ColDefs" -> "astropy.io.fits.util.NotifierMixin" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.column.Column" -> "astropy.io.fits.util.NotifierMixin" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.column._AsciiColDefs" -> "astropy.io.fits.column.ColDefs" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.column._AsciiColumnFormat" -> "astropy.io.fits.column._BaseColumnFormat" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.column._ColumnFormat" -> "astropy.io.fits.column._BaseColumnFormat" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.column._FormatQ" -> "astropy.io.fits.column._FormatP" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.diff.FITSDiff" -> "astropy.io.fits.diff._BaseDiff" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.diff.HDUDiff" -> "astropy.io.fits.diff._BaseDiff" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.diff.HeaderDiff" -> "astropy.io.fits.diff._BaseDiff" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.diff.ImageDataDiff" -> "astropy.io.fits.diff._BaseDiff" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.diff.RawDataDiff" -> "astropy.io.fits.diff.ImageDataDiff" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.diff.TableDataDiff" -> "astropy.io.fits.diff._BaseDiff" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.base.ExtensionHDU" -> "astropy.io.fits.hdu.base._ValidHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.base.NonstandardExtHDU" -> "astropy.io.fits.hdu.base.ExtensionHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.base._CorruptedHDU" -> "astropy.io.fits.hdu.base._BaseHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.base._NonstandardHDU" -> "astropy.io.fits.hdu.base._BaseHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.base._NonstandardHDU" -> "astropy.io.fits.verify._Verify" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.base._ValidHDU" -> "astropy.io.fits.hdu.base._BaseHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.base._ValidHDU" -> "astropy.io.fits.verify._Verify" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.compressed.compbintable._CompBinTableHDU" -> "astropy.io.fits.hdu.table.BinTableHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.compressed.compressed.CompImageHDU" -> "astropy.io.fits.hdu.image.ImageHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.compressed.header.CompImageHeader" -> "astropy.io.fits.header.Header" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.compressed.tests.test_checksum.TestChecksumFunctions" -> "astropy.io.fits.tests.test_checksum.BaseChecksumTests" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.compressed.tests.test_compressed.TestCompressedImage" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.compressed.tests.test_compression_failures.TestCompressionFunction" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.groups.Group" -> "astropy.io.fits.fitsrec.FITS_record" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.groups.GroupData" -> "astropy.io.fits.fitsrec.FITS_rec" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.groups.GroupsHDU" -> "astropy.io.fits.hdu.image.PrimaryHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.groups.GroupsHDU" -> "astropy.io.fits.hdu.table._TableLikeHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.hdulist.HDUList" -> "astropy.io.fits.verify._Verify" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.image.ImageHDU" -> "astropy.io.fits.hdu.base.ExtensionHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.image.ImageHDU" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.image.PrimaryHDU" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.image._ImageBaseHDU" -> "astropy.io.fits.hdu.base._ValidHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.nonstandard.FitsHDU" -> "astropy.io.fits.hdu.base.NonstandardExtHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.table.BinTableHDU" -> "astropy.io.fits.hdu.table._TableBaseHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.table.TableHDU" -> "astropy.io.fits.hdu.table._TableBaseHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.table._TableBaseHDU" -> "astropy.io.fits.hdu.base.ExtensionHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.table._TableBaseHDU" -> "astropy.io.fits.hdu.table._TableLikeHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.hdu.table._TableLikeHDU" -> "astropy.io.fits.hdu.base._ValidHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.header._HeaderCommentaryCards" -> "astropy.io.fits.header._CardAccessor" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.header._HeaderComments" -> "astropy.io.fits.header._CardAccessor" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.scripts.fitsheader.TableHeaderFormatter" -> "astropy.io.fits.scripts.fitsheader.HeaderFormatter" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_checksum.BaseChecksumTests" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_checksum.TestChecksumFunctions" -> "astropy.io.fits.tests.test_checksum.BaseChecksumTests" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_convenience.TestConvenience" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_core.TestConvenienceFunctions" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_core.TestCore" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_core.TestCore.test_unfixable_missing_card.TestHDU" -> "astropy.io.fits.hdu.base.NonstandardExtHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_core.TestFileFunctions" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_core.TestStreamingFunctions" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_diff.DummyNonstandardExtHDU" -> "astropy.io.fits.hdu.base.NonstandardExtHDU" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_diff.TestDiff" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_division.TestDivisionFunctions" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_fitscheck.TestFitscheck" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_fitsdiff.TestFITSDiff_script" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_fitsdiff.Test_FITSDiff" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_fitsheader.TestFITSheader_script" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_fitsinfo.TestFitsinfo" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_fitstime.TestFitsTime" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_groups.TestGroupsFunctions" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_hdulist.TestHDUListFunctions" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_header.TestHeaderFunctions" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_header.TestRecordValuedKeywordCards" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_header.test_subclass.MyHeader" -> "astropy.io.fits.header.Header" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_image.TestImageFunctions" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_nonstandard.TestNonstandardHdus" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_structured.TestStructured" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_table.TestColumnFunctions" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_table.TestTableFunctions" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_table.TestVLATables" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_tilde_path.TestTildePaths" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_uint.TestUintFunctions" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_util.TestUtilMode" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.tests.test_util.TestUtils" -> "astropy.io.fits.tests.conftest.FitsTestCase" [arrowhead="empty", arrowtail="none"];
"astropy.io.fits.verify.VerifyWarning" -> "astropy.utils.exceptions.AstropyUserWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.core.UnifiedIORegistry" -> "astropy.io.registry.core.UnifiedInputRegistry" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.core.UnifiedIORegistry" -> "astropy.io.registry.core.UnifiedOutputRegistry" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.core.UnifiedInputRegistry" -> "astropy.io.registry.base._UnifiedIORegistryBase" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.core.UnifiedOutputRegistry" -> "astropy.io.registry.base._UnifiedIORegistryBase" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.tests.test_registries.TestDefaultRegistry" -> "astropy.io.registry.tests.test_registries.TestUnifiedIORegistry" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.tests.test_registries.TestSubclass.test_read_table_subclass.MyTable" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.tests.test_registries.TestSubclass.test_read_table_subclass_with_columns_attributes.MTable" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.tests.test_registries.TestSubclass.test_write_table_subclass.MyTable" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.tests.test_registries.TestUnifiedIORegistry" -> "astropy.io.registry.tests.test_registries.TestUnifiedInputRegistry" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.tests.test_registries.TestUnifiedIORegistry" -> "astropy.io.registry.tests.test_registries.TestUnifiedOutputRegistry" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.tests.test_registries.TestUnifiedInputRegistry" -> "astropy.io.registry.tests.test_registries.TestUnifiedIORegistryBase" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.tests.test_registries.TestUnifiedInputRegistry.test_inherited_read_registration.Child1" -> "astropy.io.registry.tests.test_registries.EmptyData" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.tests.test_registries.TestUnifiedInputRegistry.test_inherited_read_registration.Child2" -> "astropy.io.registry.tests.test_registries.TestUnifiedInputRegistry.test_inherited_read_registration.Child1" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.tests.test_registries.TestUnifiedOutputRegistry" -> "astropy.io.registry.tests.test_registries.TestUnifiedIORegistryBase" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.tests.test_registries.TestUnifiedOutputRegistry.test_inherited_write_registration.Child1" -> "astropy.io.registry.tests.test_registries.EmptyData" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.tests.test_registries.TestUnifiedOutputRegistry.test_inherited_write_registration.Child2" -> "astropy.io.registry.tests.test_registries.TestUnifiedOutputRegistry.test_inherited_write_registration.Child1" [arrowhead="empty", arrowtail="none"];
"astropy.io.registry.tests.test_registries.UnifiedIORegistryBaseSubClass" -> "astropy.io.registry.base._UnifiedIORegistryBase" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.Array" -> "astropy.io.votable.converters.Converter" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.ArrayVarArray" -> "astropy.io.votable.converters.VarArray" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.Bit" -> "astropy.io.votable.converters.Converter" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.BitArray" -> "astropy.io.votable.converters.NumericArray" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.Boolean" -> "astropy.io.votable.converters.Converter" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.BooleanArray" -> "astropy.io.votable.converters.NumericArray" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.Char" -> "astropy.io.votable.converters.Converter" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.Complex" -> "astropy.io.votable.converters.Array" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.Complex" -> "astropy.io.votable.converters.FloatingPoint" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.ComplexArray" -> "astropy.io.votable.converters.NumericArray" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.ComplexArrayVarArray" -> "astropy.io.votable.converters.VarArray" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.ComplexVarArray" -> "astropy.io.votable.converters.VarArray" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.Double" -> "astropy.io.votable.converters.FloatingPoint" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.DoubleComplex" -> "astropy.io.votable.converters.Complex" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.Float" -> "astropy.io.votable.converters.FloatingPoint" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.FloatComplex" -> "astropy.io.votable.converters.Complex" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.FloatingPoint" -> "astropy.io.votable.converters.Numeric" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.Int" -> "astropy.io.votable.converters.Integer" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.Integer" -> "astropy.io.votable.converters.Numeric" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.Long" -> "astropy.io.votable.converters.Integer" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.Numeric" -> "astropy.io.votable.converters.Converter" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.NumericArray" -> "astropy.io.votable.converters.Array" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.ScalarVarArray" -> "astropy.io.votable.converters.VarArray" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.Short" -> "astropy.io.votable.converters.Integer" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.UnicodeChar" -> "astropy.io.votable.converters.Converter" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.UnsignedByte" -> "astropy.io.votable.converters.Integer" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.converters.VarArray" -> "astropy.io.votable.converters.Array" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E01" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E02" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E03" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E04" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E05" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E06" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E08" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E09" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E10" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E11" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E12" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E13" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E14" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E15" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E16" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E17" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E18" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E19" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E20" -> "astropy.io.votable.exceptions.VOTableSpecError" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E21" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E22" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E23" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E24" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E25" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.E26" -> "astropy.io.votable.exceptions.VOTableSpecError" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.IOWarning" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.ModelMappingSpecWarning" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.UnimplementedWarning" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.VOTableChangeWarning" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.VOTableSpecError" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.VOTableSpecWarning" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.VOWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W01" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W02" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W03" -> "astropy.io.votable.exceptions.VOTableChangeWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W04" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W05" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W06" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W07" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W08" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W09" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W10" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W11" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W12" -> "astropy.io.votable.exceptions.VOTableChangeWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W13" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W15" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W17" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W18" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W19" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W20" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W21" -> "astropy.io.votable.exceptions.UnimplementedWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W22" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W23" -> "astropy.io.votable.exceptions.IOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W24" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W25" -> "astropy.io.votable.exceptions.IOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W26" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W27" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W28" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W29" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W30" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W31" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W32" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W33" -> "astropy.io.votable.exceptions.VOTableChangeWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W34" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W35" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W36" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W37" -> "astropy.io.votable.exceptions.UnimplementedWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W38" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W39" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W40" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W41" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W42" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W43" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W44" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W45" -> "astropy.io.votable.exceptions.VOWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W46" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W47" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W48" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W49" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W50" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W51" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W52" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W53" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W54" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W55" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W56" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.exceptions.W57" -> "astropy.io.votable.exceptions.VOTableSpecWarning" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tests.test_vo.TestThroughBinary" -> "astropy.io.votable.tests.test_vo.TestParse" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tests.test_vo.TestThroughBinary2" -> "astropy.io.votable.tests.test_vo.TestParse" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tests.test_vo.TestThroughTableData" -> "astropy.io.votable.tests.test_vo.TestParse" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.CooSys" -> "astropy.io.votable.tree.SimpleElement" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Field" -> "astropy.io.votable.tree.SimpleElement" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Field" -> "astropy.io.votable.tree._IDProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Field" -> "astropy.io.votable.tree._NameProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Field" -> "astropy.io.votable.tree._UcdProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Field" -> "astropy.io.votable.tree._UtypeProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Field" -> "astropy.io.votable.tree._XtypeProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.FieldRef" -> "astropy.io.votable.tree.SimpleElement" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.FieldRef" -> "astropy.io.votable.tree._UcdProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.FieldRef" -> "astropy.io.votable.tree._UtypeProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Group" -> "astropy.io.votable.tree.Element" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Group" -> "astropy.io.votable.tree._DescriptionProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Group" -> "astropy.io.votable.tree._IDProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Group" -> "astropy.io.votable.tree._NameProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Group" -> "astropy.io.votable.tree._UcdProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Group" -> "astropy.io.votable.tree._UtypeProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Info" -> "astropy.io.votable.tree.SimpleElementWithContent" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Info" -> "astropy.io.votable.tree._IDProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Info" -> "astropy.io.votable.tree._UtypeProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Info" -> "astropy.io.votable.tree._XtypeProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Link" -> "astropy.io.votable.tree.SimpleElement" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Link" -> "astropy.io.votable.tree._IDProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.MivotBlock" -> "astropy.io.votable.tree.Element" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Param" -> "astropy.io.votable.tree.Field" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.ParamRef" -> "astropy.io.votable.tree.SimpleElement" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.ParamRef" -> "astropy.io.votable.tree._UcdProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.ParamRef" -> "astropy.io.votable.tree._UtypeProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Resource" -> "astropy.io.votable.tree.Element" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Resource" -> "astropy.io.votable.tree._DescriptionProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Resource" -> "astropy.io.votable.tree._IDProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Resource" -> "astropy.io.votable.tree._NameProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Resource" -> "astropy.io.votable.tree._UtypeProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.SimpleElement" -> "astropy.io.votable.tree.Element" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.SimpleElementWithContent" -> "astropy.io.votable.tree.SimpleElement" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Table" -> "astropy.io.votable.tree.TableElement" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.TableElement" -> "astropy.io.votable.tree.Element" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.TableElement" -> "astropy.io.votable.tree._DescriptionProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.TableElement" -> "astropy.io.votable.tree._IDProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.TableElement" -> "astropy.io.votable.tree._NameProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.TableElement" -> "astropy.io.votable.tree._UcdProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.TimeSys" -> "astropy.io.votable.tree.SimpleElement" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.VOTableFile" -> "astropy.io.votable.tree.Element" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.VOTableFile" -> "astropy.io.votable.tree._DescriptionProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.VOTableFile" -> "astropy.io.votable.tree._IDProperty" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Values" -> "astropy.io.votable.tree.Element" [arrowhead="empty", arrowtail="none"];
"astropy.io.votable.tree.Values" -> "astropy.io.votable.tree._IDProperty" [arrowhead="empty", arrowtail="none"];
"astropy.logger.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.bounding_box.CompoundBoundingBox" -> "astropy.modeling.bounding_box._BoundingDomain" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.bounding_box.ModelBoundingBox" -> "astropy.modeling.bounding_box._BoundingDomain" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.convolution.Convolution" -> "astropy.modeling.core.CompoundModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.core.CompoundModel" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.core.Fittable1DModel" -> "astropy.modeling.core.FittableModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.core.Fittable2DModel" -> "astropy.modeling.core.FittableModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.core.FittableModel" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.fitting.DogBoxLSQFitter" -> "astropy.modeling.fitting._NLLSQFitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.fitting.JointFitter" -> "astropy.modeling.fitting.Fitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.fitting.LMLSQFitter" -> "astropy.modeling.fitting._NLLSQFitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.fitting.LevMarLSQFitter" -> "astropy.modeling.fitting._NonLinearLSQFitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.fitting.LinearLSQFitter" -> "astropy.modeling.fitting.Fitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.fitting.ModelLinearityError" -> "astropy.modeling.fitting.ModelsError" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.fitting.SLSQPLSQFitter" -> "astropy.modeling.fitting.Fitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.fitting.SimplexLSQFitter" -> "astropy.modeling.fitting.Fitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.fitting.TRFLSQFitter" -> "astropy.modeling.fitting._NLLSQFitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.fitting.UnsupportedConstraintError" -> "astropy.modeling.fitting.ModelsError" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.fitting._NLLSQFitter" -> "astropy.modeling.fitting._NonLinearLSQFitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.fitting._NonLinearLSQFitter" -> "astropy.modeling.fitting.Fitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.AiryDisk2D" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.ArcCosine1D" -> "astropy.modeling.functional_models._InverseTrigonometric1D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.ArcSine1D" -> "astropy.modeling.functional_models._InverseTrigonometric1D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.ArcTangent1D" -> "astropy.modeling.functional_models._InverseTrigonometric1D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Box1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Box2D" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Const1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Const2D" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Cosine1D" -> "astropy.modeling.functional_models._Trigonometric1D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Disk2D" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Ellipse2D" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Exponential1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Gaussian1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Gaussian2D" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.GeneralSersic2D" -> "astropy.modeling.functional_models.Sersic2D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.KingProjectedAnalytic1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Linear1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Logarithmic1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Lorentz1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Lorentz2D" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Moffat1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Moffat2D" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Multiply" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Planar2D" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.RedshiftScaleFactor" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.RickerWavelet1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.RickerWavelet2D" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Ring2D" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Scale" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Sersic1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Sersic2D" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Shift" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Sine1D" -> "astropy.modeling.functional_models._Trigonometric1D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Tangent1D" -> "astropy.modeling.functional_models._Trigonometric1D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Trapezoid1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.TrapezoidDisk2D" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models.Voigt1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models._InverseTrigonometric1D" -> "astropy.modeling.functional_models._Trigonometric1D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.functional_models._Trigonometric1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.mappings.Identity" -> "astropy.modeling.mappings.Mapping" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.mappings.Mapping" -> "astropy.modeling.core.FittableModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.mappings.UnitsMapping" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.math_functions._NPUfuncModel" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.optimizers.SLSQP" -> "astropy.modeling.optimizers.Optimization" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.optimizers.Simplex" -> "astropy.modeling.optimizers.Optimization" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.parameters.InputParameterError" -> "astropy.modeling.parameters.ParameterError" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.parameters.ParameterDefinitionError" -> "astropy.modeling.parameters.ParameterError" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.physical_models.BlackBody" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.physical_models.Drude1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.physical_models.NFW" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.physical_models.Plummer1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial.Chebyshev1D" -> "astropy.modeling.polynomial._PolyDomainWindow1D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial.Chebyshev2D" -> "astropy.modeling.polynomial.OrthoPolynomialBase" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial.Hermite1D" -> "astropy.modeling.polynomial._PolyDomainWindow1D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial.Hermite2D" -> "astropy.modeling.polynomial.OrthoPolynomialBase" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial.InverseSIP" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial.Legendre1D" -> "astropy.modeling.polynomial._PolyDomainWindow1D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial.Legendre2D" -> "astropy.modeling.polynomial.OrthoPolynomialBase" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial.OrthoPolynomialBase" -> "astropy.modeling.polynomial.PolynomialBase" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial.Polynomial1D" -> "astropy.modeling.polynomial._PolyDomainWindow1D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial.Polynomial2D" -> "astropy.modeling.polynomial.PolynomialModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial.PolynomialBase" -> "astropy.modeling.core.FittableModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial.PolynomialModel" -> "astropy.modeling.polynomial.PolynomialBase" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial.SIP" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial._PolyDomainWindow1D" -> "astropy.modeling.polynomial.PolynomialModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.polynomial._SIP1D" -> "astropy.modeling.polynomial.PolynomialBase" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.powerlaws.BrokenPowerLaw1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.powerlaws.ExponentialCutoffPowerLaw1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.powerlaws.LogParabola1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.powerlaws.PowerLaw1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.powerlaws.Schechter1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.powerlaws.SmoothlyBrokenPowerLaw1D" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.AffineTransformation2D" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Conic" -> "astropy.modeling.projections.Projection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Cylindrical" -> "astropy.modeling.projections.Projection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.HEALPix" -> "astropy.modeling.projections.Projection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2SkyProjection" -> "astropy.modeling.projections.Projection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Airy" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Airy" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_BonneEqualArea" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_BonneEqualArea" -> "astropy.modeling.projections.PseudoConic" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_COBEQuadSphericalCube" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_COBEQuadSphericalCube" -> "astropy.modeling.projections.QuadCube" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ConicEqualArea" -> "astropy.modeling.projections.Conic" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ConicEqualArea" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ConicEquidistant" -> "astropy.modeling.projections.Conic" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ConicEquidistant" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ConicOrthomorphic" -> "astropy.modeling.projections.Conic" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ConicOrthomorphic" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ConicPerspective" -> "astropy.modeling.projections.Conic" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ConicPerspective" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_CylindricalEqualArea" -> "astropy.modeling.projections.Cylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_CylindricalEqualArea" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_CylindricalPerspective" -> "astropy.modeling.projections.Cylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_CylindricalPerspective" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Gnomonic" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Gnomonic" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_HEALPix" -> "astropy.modeling.projections.HEALPix" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_HEALPix" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_HEALPixPolar" -> "astropy.modeling.projections.HEALPix" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_HEALPixPolar" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_HammerAitoff" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_HammerAitoff" -> "astropy.modeling.projections.PseudoCylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Mercator" -> "astropy.modeling.projections.Cylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Mercator" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Molleweide" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Molleweide" -> "astropy.modeling.projections.PseudoCylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Parabolic" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Parabolic" -> "astropy.modeling.projections.PseudoCylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_PlateCarree" -> "astropy.modeling.projections.Cylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_PlateCarree" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Polyconic" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Polyconic" -> "astropy.modeling.projections.PseudoConic" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_QuadSphericalCube" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_QuadSphericalCube" -> "astropy.modeling.projections.QuadCube" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_SansonFlamsteed" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_SansonFlamsteed" -> "astropy.modeling.projections.PseudoCylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_SlantOrthographic" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_SlantOrthographic" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_SlantZenithalPerspective" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_SlantZenithalPerspective" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Stereographic" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_Stereographic" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_TangentialSphericalCube" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_TangentialSphericalCube" -> "astropy.modeling.projections.QuadCube" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ZenithalEqualArea" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ZenithalEqualArea" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ZenithalEquidistant" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ZenithalEquidistant" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ZenithalPerspective" -> "astropy.modeling.projections.Pix2SkyProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Pix2Sky_ZenithalPerspective" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Projection" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.PseudoConic" -> "astropy.modeling.projections.Projection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.PseudoCylindrical" -> "astropy.modeling.projections.Projection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.QuadCube" -> "astropy.modeling.projections.Projection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2PixProjection" -> "astropy.modeling.projections.Projection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Airy" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Airy" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_BonneEqualArea" -> "astropy.modeling.projections.PseudoConic" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_BonneEqualArea" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_COBEQuadSphericalCube" -> "astropy.modeling.projections.QuadCube" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_COBEQuadSphericalCube" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ConicEqualArea" -> "astropy.modeling.projections.Conic" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ConicEqualArea" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ConicEquidistant" -> "astropy.modeling.projections.Conic" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ConicEquidistant" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ConicOrthomorphic" -> "astropy.modeling.projections.Conic" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ConicOrthomorphic" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ConicPerspective" -> "astropy.modeling.projections.Conic" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ConicPerspective" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_CylindricalEqualArea" -> "astropy.modeling.projections.Cylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_CylindricalEqualArea" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_CylindricalPerspective" -> "astropy.modeling.projections.Cylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_CylindricalPerspective" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Gnomonic" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Gnomonic" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_HEALPix" -> "astropy.modeling.projections.HEALPix" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_HEALPix" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_HEALPixPolar" -> "astropy.modeling.projections.HEALPix" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_HEALPixPolar" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_HammerAitoff" -> "astropy.modeling.projections.PseudoCylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_HammerAitoff" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Mercator" -> "astropy.modeling.projections.Cylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Mercator" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Molleweide" -> "astropy.modeling.projections.PseudoCylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Molleweide" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Parabolic" -> "astropy.modeling.projections.PseudoCylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Parabolic" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_PlateCarree" -> "astropy.modeling.projections.Cylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_PlateCarree" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Polyconic" -> "astropy.modeling.projections.PseudoConic" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Polyconic" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_QuadSphericalCube" -> "astropy.modeling.projections.QuadCube" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_QuadSphericalCube" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_SansonFlamsteed" -> "astropy.modeling.projections.PseudoCylindrical" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_SansonFlamsteed" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_SlantOrthographic" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_SlantOrthographic" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_SlantZenithalPerspective" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_SlantZenithalPerspective" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Stereographic" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_Stereographic" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_TangentialSphericalCube" -> "astropy.modeling.projections.QuadCube" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_TangentialSphericalCube" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ZenithalEqualArea" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ZenithalEqualArea" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ZenithalEquidistant" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ZenithalEquidistant" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ZenithalPerspective" -> "astropy.modeling.projections.Sky2PixProjection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Sky2Pix_ZenithalPerspective" -> "astropy.modeling.projections.Zenithal" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections.Zenithal" -> "astropy.modeling.projections.Projection" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.parameters.Parameter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.rotations.EulerAngleRotation" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.rotations.EulerAngleRotation" -> "astropy.modeling.rotations._EulerRotation" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.rotations.RotateCelestial2Native" -> "astropy.modeling.rotations._SkyRotation" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.rotations.RotateNative2Celestial" -> "astropy.modeling.rotations._SkyRotation" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.rotations.Rotation2D" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.rotations.RotationSequence3D" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.rotations.SphericalRotationSequence" -> "astropy.modeling.rotations.RotationSequence3D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.rotations._SkyRotation" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.rotations._SkyRotation" -> "astropy.modeling.rotations._EulerRotation" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.spline.Spline1D" -> "astropy.modeling.spline._Spline" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.spline.SplineExactKnotsFitter" -> "astropy.modeling.spline._SplineFitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.spline.SplineInterpolateFitter" -> "astropy.modeling.spline._SplineFitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.spline.SplineSmoothingFitter" -> "astropy.modeling.spline._SplineFitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.spline.SplineSplrepFitter" -> "astropy.modeling.spline._SplineFitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.spline._Spline" -> "astropy.modeling.core.FittableModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tabular._Tabular" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.irafutil.FitcoordsRecord" -> "astropy.modeling.tests.irafutil.Record" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.irafutil.IdentifyRecord" -> "astropy.modeling.tests.irafutil.Record" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.irafutil.ReidentifyRecord" -> "astropy.modeling.tests.irafutil.IDB" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_bounding_box.Test_BoundingDomain.setup_method.BoundingDomain" -> "astropy.modeling.bounding_box._BoundingDomain" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_compound._ConstraintsTestA" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_compound._ConstraintsTestB" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_constraints.test_default_constraints.MyModel" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_constraints.test_fit_with_bound_constraints_estimate_jacobian.MyModel" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_core.NonFittableModel" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_core.test_custom_inverse_reset.TestModel" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_core.test_inputless_model.TestModel" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_fitters.TestEntryPoint.successfulimport.goodclass" -> "astropy.modeling.fitting.Fitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_fitters.TestNonLinearFitters.test_simplex_lsq_fitter.Rosenbrock" -> "astropy.modeling.core.Fittable2DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_input.TInputFormatter" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_input.TModel_1_1" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_input.TModel_1_2" -> "astropy.modeling.core.FittableModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_input.test_more_outputs.M" -> "astropy.modeling.core.FittableModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_model_sets.TParModel" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_models.ModelCustom" -> "astropy.modeling.tests.test_models.ModelDefault" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_models.ModelDefault" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_models.TestFittable1DModels" -> "astropy.modeling.tests.test_models.Fittable1DModelTester" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_models.TestFittable2DModels" -> "astropy.modeling.tests.test_models.Fittable2DModelTester" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_models._ExtendedModelMeta" -> "astropy.modeling.core._ModelMeta" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_models.classmodel" -> "astropy.modeling.core.FittableModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_models.subclassmodel" -> "astropy.modeling.tests.test_models.classmodel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_models.test_metaclass_kwargs.ClassModel" -> "astropy.modeling.core.FittableModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_models.test_submetaclass_kwargs.ClassModel" -> "astropy.modeling.core.FittableModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_parameters.M1" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_parameters.M2" -> "astropy.modeling.tests.test_parameters.M1" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_parameters.M3" -> "astropy.modeling.tests.test_parameters.M2" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_parameters.MockModel" -> "astropy.modeling.core.FittableModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_parameters.SetterModel" -> "astropy.modeling.core.FittableModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_parameters.TParModel" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_parameters.test_non_broadcasting_parameters.TestModel" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_quantities_evaluation.MyTestModel" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_quantities_evaluation.test_compound_input_units_allow_dimensionless.ScaleDegrees" -> "astropy.modeling.functional_models.Scale" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_quantities_evaluation.test_compound_input_units_strict.ScaleDegrees" -> "astropy.modeling.functional_models.Scale" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_quantities_evaluation.test_compound_return_units.PassModel" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_quantities_fitting.CustomInputNamesModel" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_quantities_fitting.test_fitting_missing_data_units.UnorderedGaussian1D" -> "astropy.modeling.functional_models.Gaussian1D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_quantities_parameters.BaseTestModel" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_quantities_parameters.test_log_getter.CustomBlackBody" -> "astropy.modeling.physical_models.BlackBody" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_quantities_parameters.test_parameter_default_units_match.TestC" -> "astropy.modeling.core.Fittable1DModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_quantities_parameters.test_parameter_defaults.TestModel" -> "astropy.modeling.tests.test_quantities_parameters.BaseTestModel" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_quantities_parameters.test_sqrt_getter.CustomGaussian1D" -> "astropy.modeling.functional_models.Gaussian1D" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_spline.TestSpline.setup_class.Spline" -> "astropy.modeling.spline._Spline" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_spline.TestSpline.test__create_optional_inputs.Spline" -> "astropy.modeling.tests.test_spline.TestSpline.setup_class.Spline" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_spline.TestSpline.test__create_parameter.Spline" -> "astropy.modeling.tests.test_spline.TestSpline.setup_class.Spline" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_spline.TestSpline.test__create_parameters.Spline" -> "astropy.modeling.tests.test_spline.TestSpline.setup_class.Spline" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_spline.TestSpline.test__intercept_optional_inputs.Spline" -> "astropy.modeling.tests.test_spline.TestSpline.setup_class.Spline" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_spline.TestSpline.test_evaluate.Spline" -> "astropy.modeling.tests.test_spline.TestSpline.setup_class.Spline" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_spline.TestSpline1D.test__SplineFitter_error.SplineFitter" -> "astropy.modeling.spline._SplineFitter" [arrowhead="empty", arrowtail="none"];
"astropy.modeling.tests.test_units_mapping._ExampleModel" -> "astropy.modeling.core.Model" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.ccddata.CCDData" -> "astropy.nddata.compat.NDDataArray" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.compat.NDDataArray" -> "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.compat.NDDataArray" -> "astropy.nddata.mixins.ndio.NDIOMixin" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.compat.NDDataArray" -> "astropy.nddata.mixins.ndslicing.NDSlicingMixin" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.compat.NDDataArray" -> "astropy.nddata.nddata.NDData" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.mixins.ndio.NDDataRead" -> "astropy.io.registry.interface.UnifiedReadWrite" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.mixins.ndio.NDDataWrite" -> "astropy.io.registry.interface.UnifiedReadWrite" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.mixins.tests.test_ndarithmetic.StdDevUncertaintyUncorrelated" -> "astropy.nddata.nduncertainty.StdDevUncertainty" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.mixins.tests.test_ndslicing.NDDataSliceable" -> "astropy.nddata.mixins.ndslicing.NDSlicingMixin" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.mixins.tests.test_ndslicing.NDDataSliceable" -> "astropy.nddata.nddata.NDData" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.mixins.tests.test_ndslicing.SomeUncertainty" -> "astropy.nddata.nduncertainty.NDUncertainty" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.nddata.NDData" -> "astropy.nddata.nddata_base.NDDataBase" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.nddata_withmixins.NDDataRef" -> "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.nddata_withmixins.NDDataRef" -> "astropy.nddata.mixins.ndio.NDIOMixin" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.nddata_withmixins.NDDataRef" -> "astropy.nddata.mixins.ndslicing.NDSlicingMixin" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.nddata_withmixins.NDDataRef" -> "astropy.nddata.nddata.NDData" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.nduncertainty.InverseVariance" -> "astropy.nddata.nduncertainty.NDUncertainty" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.nduncertainty.InverseVariance" -> "astropy.nddata.nduncertainty._VariancePropagationMixin" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.nduncertainty.StdDevUncertainty" -> "astropy.nddata.nduncertainty.NDUncertainty" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.nduncertainty.StdDevUncertainty" -> "astropy.nddata.nduncertainty._VariancePropagationMixin" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.nduncertainty.UnknownUncertainty" -> "astropy.nddata.nduncertainty.NDUncertainty" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.nduncertainty.VarianceUncertainty" -> "astropy.nddata.nduncertainty.NDUncertainty" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.nduncertainty.VarianceUncertainty" -> "astropy.nddata.nduncertainty._VariancePropagationMixin" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_bitmask.test_basic_map.DetectorMap" -> "astropy.nddata.tests.test_bitmask.test_basic_map.ObservatoryDQMap" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_bitmask.test_basic_map.ObservatoryDQMap" -> "astropy.nddata.bitmask.BitFlagNameMap" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_bitmask.test_extend_map.ObservatoryDQMap" -> "astropy.nddata.bitmask.BitFlagNameMap" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_bitmask.test_extend_map_redefine_flag.ObservatoryDQMap" -> "astropy.nddata.bitmask.BitFlagNameMap" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_bitmask.test_map_cant_modify_version.ObservatoryDQMap" -> "astropy.nddata.bitmask.BitFlagNameMap" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_bitmask.test_map_not_bit_flag.DetectorMap" -> "astropy.nddata.bitmask.BitFlagNameMap" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_bitmask.test_map_not_int_flag.ObservatoryDQMap" -> "astropy.nddata.bitmask.BitFlagNameMap" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_bitmask.test_map_redefine_flag.DetectorMap1" -> "astropy.nddata.tests.test_bitmask.test_map_redefine_flag.ObservatoryDQMap" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_bitmask.test_map_redefine_flag.DetectorMap2" -> "astropy.nddata.tests.test_bitmask.test_map_redefine_flag.ObservatoryDQMap" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_bitmask.test_map_redefine_flag.ObservatoryDQMap" -> "astropy.nddata.bitmask.BitFlagNameMap" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_compat.SubNDData" -> "astropy.nddata.compat.NDDataArray" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_decorators.CCDData" -> "astropy.nddata.nddata.NDData" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_decorators.test_wrap_function_accepts.MyData" -> "astropy.nddata.nddata.NDData" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_nddata.BadNDDataSubclass" -> "astropy.nddata.nddata.NDData" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_nddata.NDDataCustomWCS" -> "astropy.nddata.nddata.NDData" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_nddata.TestMetaNDData" -> "astropy.utils.metadata.tests.test_metadata.MetaBaseTest" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_nddata_base.MinimalSubclass" -> "astropy.nddata.nddata_base.NDDataBase" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_nddata_base.MinimalSubclassNoPSF" -> "astropy.nddata.nddata_base.NDDataBase" [arrowhead="empty", arrowtail="none"];
"astropy.nddata.tests.test_nduncertainty.FakeUncertainty" -> "astropy.nddata.nduncertainty.NDUncertainty" [arrowhead="empty", arrowtail="none"];
"astropy.physical_constants" -> "astropy.base_constants_version" [arrowhead="empty", arrowtail="none"];
"astropy.samp.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.samp.errors.SAMPWarning" -> "astropy.utils.exceptions.AstropyUserWarning" [arrowhead="empty", arrowtail="none"];
"astropy.samp.tests.test_web_profile.TestWebProfile" -> "astropy.samp.tests.test_standard_profile.TestStandardProfile" [arrowhead="empty", arrowtail="none"];
"astropy.samp.tests.web_profile_test_helpers.AlwaysApproveWebProfileDialog" -> "astropy.samp.hub.WebProfileDialog" [arrowhead="empty", arrowtail="none"];
"astropy.samp.tests.web_profile_test_helpers.SAMPIntegratedWebClient" -> "astropy.samp.integrated_client.SAMPIntegratedClient" [arrowhead="empty", arrowtail="none"];
"astropy.samp.tests.web_profile_test_helpers.SAMPWebClient" -> "astropy.samp.client.SAMPClient" [arrowhead="empty", arrowtail="none"];
"astropy.samp.tests.web_profile_test_helpers.SAMPWebHubProxy" -> "astropy.samp.hub_proxy.SAMPHubProxy" [arrowhead="empty", arrowtail="none"];
"astropy.samp.web_profile.WebProfileRequestHandler" -> "astropy.samp.standard_profile.SAMPSimpleXMLRPCRequestHandler" [arrowhead="empty", arrowtail="none"];
"astropy.samp.web_profile.WebProfileXMLRPCServer" -> "astropy.samp.standard_profile.ThreadingXMLRPCServer" [arrowhead="empty", arrowtail="none"];
"astropy.stats.bayesian_blocks.Events" -> "astropy.stats.bayesian_blocks.FitnessFunc" [arrowhead="empty", arrowtail="none"];
"astropy.stats.bayesian_blocks.PointMeasures" -> "astropy.stats.bayesian_blocks.FitnessFunc" [arrowhead="empty", arrowtail="none"];
"astropy.stats.bayesian_blocks.RegularEvents" -> "astropy.stats.bayesian_blocks.FitnessFunc" [arrowhead="empty", arrowtail="none"];
"astropy.table.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.table.column.Column" -> "astropy.table.column.BaseColumn" [arrowhead="empty", arrowtail="none"];
"astropy.table.column.ColumnInfo" -> "astropy.utils.data_info.BaseColumnInfo" [arrowhead="empty", arrowtail="none"];
"astropy.table.column.MaskedColumn" -> "astropy.table.column.Column" [arrowhead="empty", arrowtail="none"];
"astropy.table.column.MaskedColumnInfo" -> "astropy.table.column.ColumnInfo" [arrowhead="empty", arrowtail="none"];
"astropy.table.connect.TableRead" -> "astropy.io.registry.interface.UnifiedReadWrite" [arrowhead="empty", arrowtail="none"];
"astropy.table.connect.TableWrite" -> "astropy.io.registry.interface.UnifiedReadWrite" [arrowhead="empty", arrowtail="none"];
"astropy.table.groups.ColumnGroups" -> "astropy.table.groups.BaseGroups" [arrowhead="empty", arrowtail="none"];
"astropy.table.groups.TableGroups" -> "astropy.table.groups.BaseGroups" [arrowhead="empty", arrowtail="none"];
"astropy.table.index.TableILoc" -> "astropy.table.index.TableLoc" [arrowhead="empty", arrowtail="none"];
"astropy.table.index.TableLocIndices" -> "astropy.table.index.TableLoc" [arrowhead="empty", arrowtail="none"];
"astropy.table.info.TableInfo" -> "astropy.utils.data_info.DataInfo" [arrowhead="empty", arrowtail="none"];
"astropy.table.jsviewer.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.table.meta.get_header_from_yaml.TableLoader" -> "astropy.io.misc.yaml.AstropyLoader" [arrowhead="empty", arrowtail="none"];
"astropy.table.meta.get_yaml_from_header.TableDumper" -> "astropy.io.misc.yaml.AstropyDumper" [arrowhead="empty", arrowtail="none"];
"astropy.table.mixins.dask.DaskInfo" -> "astropy.utils.data_info.ParentDtypeInfo" [arrowhead="empty", arrowtail="none"];
"astropy.table.mixins.tests.test_registry.SpamWrapper" -> "astropy.table.table_helpers.ArrayWrapper" [arrowhead="empty", arrowtail="none"];
"astropy.table.ndarray_mixin.NdarrayMixinInfo" -> "astropy.utils.data_info.ParentDtypeInfo" [arrowhead="empty", arrowtail="none"];
"astropy.table.serialize.SerializedColumnInfo" -> "astropy.utils.data_info.MixinInfo" [arrowhead="empty", arrowtail="none"];
"astropy.table.table.PprintIncludeExclude" -> "astropy.table.table.TableAttribute" [arrowhead="empty", arrowtail="none"];
"astropy.table.table.QTable" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.table.table.TableAttribute" -> "astropy.utils.metadata.core.MetaAttribute" [arrowhead="empty", arrowtail="none"];
"astropy.table.table_helpers.ArrayWrapperInfo" -> "astropy.utils.data_info.ParentDtypeInfo" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.conftest.MaskedTable" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.conftest.MyColumn" -> "astropy.table.column.Column" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.conftest.MyMaskedColumn" -> "astropy.table.column.MaskedColumn" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.conftest.MyRow" -> "astropy.table.row.Row" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.conftest.MyTable" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.conftest.MyTableColumns" -> "astropy.table.table.TableColumns" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.conftest.MyTableFormatter" -> "astropy.table.pprint.TableFormatter" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.conftest.SubclassTable" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_column.TestMetaColumn" -> "astropy.utils.metadata.tests.test_metadata.MetaBaseTest" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_column.TestMetaMaskedColumn" -> "astropy.utils.metadata.tests.test_metadata.MetaBaseTest" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_index.TestIndex" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_info.test_data_info_subclass.Column" -> "astropy.table.column.Column" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_init_table.BaseInitFromDictLike" -> "astropy.table.tests.test_init_table.BaseInitFrom" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_init_table.BaseInitFromListLike" -> "astropy.table.tests.test_init_table.BaseInitFrom" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_init_table.TestInitFromColsList" -> "astropy.table.tests.test_init_table.BaseInitFromListLike" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_init_table.TestInitFromDict" -> "astropy.table.tests.test_init_table.BaseInitFromDictLike" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_init_table.TestInitFromListOfDicts" -> "astropy.table.tests.test_init_table.BaseInitFromListLike" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_init_table.TestInitFromListOfLists" -> "astropy.table.tests.test_init_table.BaseInitFromListLike" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_init_table.TestInitFromListOfMapping" -> "astropy.table.tests.test_init_table.TestInitFromListOfDicts" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_init_table.TestInitFromMapping" -> "astropy.table.tests.test_init_table.BaseInitFromDictLike" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_init_table.TestInitFromNdarrayHomo" -> "astropy.table.tests.test_init_table.BaseInitFromListLike" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_init_table.TestInitFromNdarrayStruct" -> "astropy.table.tests.test_init_table.BaseInitFromDictLike" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_init_table.TestInitFromOrderedDict" -> "astropy.table.tests.test_init_table.BaseInitFromDictLike" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_init_table.TestInitFromRow" -> "astropy.table.tests.test_init_table.BaseInitFromDictLike" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_init_table.TestInitFromTable" -> "astropy.table.tests.test_init_table.BaseInitFromDictLike" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_item_access.TestTableColumnsItems" -> "astropy.table.tests.test_item_access.BaseTestItems" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_item_access.TestTableItems" -> "astropy.table.tests.test_item_access.BaseTestItems" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_masked.TestFillValue" -> "astropy.table.tests.test_masked.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_masked.TestMaskedColumnInit" -> "astropy.table.tests.test_masked.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_masked.TestPprint" -> "astropy.table.tests.test_masked.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_masked.TestTableInit" -> "astropy.table.tests.test_masked.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_masked.test_mask_slicing_count_array_finalize.MyBaseColumn" -> "astropy.table.column.BaseColumn" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_masked.test_mask_slicing_count_array_finalize.MyMaskedColumn" -> "astropy.table.column.Column" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_masked.test_mask_slicing_count_array_finalize.MyMaskedColumn" -> "astropy.table.column.MaskedColumn" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_masked.test_mask_slicing_count_array_finalize.MyMaskedColumn" -> "astropy.table.tests.test_masked.test_mask_slicing_count_array_finalize.MyBaseColumn" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_mixin.test_bad_info_class.MyArrayWrapper" -> "astropy.table.table_helpers.ArrayWrapper" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_operations.TestJoin.test_classes.MyCol" -> "astropy.table.column.Column" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_operations.TestJoin.test_classes.MyMaskedCol" -> "astropy.table.column.MaskedColumn" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_subclass.MyColumn" -> "astropy.table.column.Column" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_subclass.MyMaskedColumn" -> "astropy.table.column.MaskedColumn" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_subclass.MyRow" -> "astropy.table.row.Row" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_subclass.MyTable" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_subclass.MyTableColumns" -> "astropy.table.table.TableColumns" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_subclass.MyTableFormatter" -> "astropy.table.pprint.TableFormatter" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_subclass.ParamsRow" -> "astropy.table.row.Row" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_subclass.ParamsTable" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.MyTable" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestAddColumns" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestAddLength" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestAddName" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestAddPosition" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestAddRow" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestArrayColumns" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestInitFromTable" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestKeep" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestMetaTable" -> "astropy.utils.metadata.tests.test_metadata.MetaBaseTest" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestPandas.test_to_pandas_index.IndexedTable" -> "astropy.table.table.QTable" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestRemove" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestRename" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestReplaceColumn" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestSetTableColumn" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.TestTableColumn" -> "astropy.table.tests.test_table.SetupData" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MyColumn" -> "astropy.table.column.Column" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MyMaskedColumn" -> "astropy.table.column.MaskedColumn" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MySubColumn" -> "astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MyColumn" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MySubMaskedColumn" -> "astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MyMaskedColumn" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MyTable" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.test_table_attribute_fail.MyTable2" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.test_table_attribute_fail.MyTable3" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.table.tests.test_table.test_table_deletion.TestTable" -> "astropy.table.table.Table" [arrowhead="empty", arrowtail="none"];
"astropy.tests.runner.TestRunner" -> "astropy.tests.runner.TestRunnerBase" [arrowhead="empty", arrowtail="none"];
"astropy.tests.test_logger.test_warnings_logging_with_custom_class.CustomAstropyWarningClass" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.tests.tests.test_runner.test_disable_kwarg.no_remote_data" -> "astropy.tests.runner.TestRunner" [arrowhead="empty", arrowtail="none"];
"astropy.tests.tests.test_runner.test_docs.Spam" -> "astropy.tests.runner.TestRunnerBase" [arrowhead="empty", arrowtail="none"];
"astropy.tests.tests.test_runner.test_invalid_kwarg.bad_return" -> "astropy.tests.runner.TestRunnerBase" [arrowhead="empty", arrowtail="none"];
"astropy.tests.tests.test_runner.test_new_kwarg.Spam" -> "astropy.tests.runner.TestRunnerBase" [arrowhead="empty", arrowtail="none"];
"astropy.tests.tests.test_runner.test_priority.Spam" -> "astropy.tests.runner.TestRunnerBase" [arrowhead="empty", arrowtail="none"];
"astropy.time.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.time.core.Time" -> "astropy.time.core.TimeBase" [arrowhead="empty", arrowtail="none"];
"astropy.time.core.TimeBase" -> "astropy.utils.masked.core.MaskableShapedLikeNDArray" [arrowhead="empty", arrowtail="none"];
"astropy.time.core.TimeDelta" -> "astropy.time.core.TimeBase" [arrowhead="empty", arrowtail="none"];
"astropy.time.core.TimeDeltaInfo" -> "astropy.time.core.TimeInfoBase" [arrowhead="empty", arrowtail="none"];
"astropy.time.core.TimeDeltaMissingUnitWarning" -> "astropy.utils.exceptions.AstropyDeprecationWarning" [arrowhead="empty", arrowtail="none"];
"astropy.time.core.TimeInfo" -> "astropy.time.core.TimeInfoBase" [arrowhead="empty", arrowtail="none"];
"astropy.time.core.TimeInfoBase" -> "astropy.utils.data_info.MixinInfo" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.AstropyDatetimeLeapSecondWarning" -> "astropy.utils.exceptions.AstropyUserWarning" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeAstropyTime" -> "astropy.time.formats.TimeUnique" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeBesselianEpoch" -> "astropy.time.formats.TimeEpochDate" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeBesselianEpochString" -> "astropy.time.formats.TimeEpochDateString" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeCxcSec" -> "astropy.time.formats.TimeFromEpoch" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeDatetime" -> "astropy.time.formats.TimeUnique" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeDatetime64" -> "astropy.time.formats.TimeISOT" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeDecimalYear" -> "astropy.time.formats.TimeNumeric" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeDeltaDatetime" -> "astropy.time.formats.TimeDeltaFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeDeltaDatetime" -> "astropy.time.formats.TimeUnique" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeDeltaFormat" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeDeltaJD" -> "astropy.time.formats.TimeDeltaNumeric" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeDeltaJD" -> "astropy.time.formats.TimeUnique" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeDeltaNumeric" -> "astropy.time.formats.TimeDeltaFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeDeltaNumeric" -> "astropy.time.formats.TimeNumeric" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeDeltaQuantityString" -> "astropy.time.formats.TimeDeltaFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeDeltaQuantityString" -> "astropy.time.formats.TimeUnique" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeDeltaSec" -> "astropy.time.formats.TimeDeltaNumeric" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeEpochDate" -> "astropy.time.formats.TimeNumeric" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeEpochDateString" -> "astropy.time.formats.TimeString" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeFITS" -> "astropy.time.formats.TimeString" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeFromEpoch" -> "astropy.time.formats.TimeNumeric" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeGPS" -> "astropy.time.formats.TimeFromEpoch" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeISO" -> "astropy.time.formats.TimeString" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeISOT" -> "astropy.time.formats.TimeISO" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeJD" -> "astropy.time.formats.TimeNumeric" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeJulianEpoch" -> "astropy.time.formats.TimeEpochDate" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeJulianEpochString" -> "astropy.time.formats.TimeEpochDateString" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeMJD" -> "astropy.time.formats.TimeNumeric" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeNumeric" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimePlotDate" -> "astropy.time.formats.TimeFromEpoch" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeStardate" -> "astropy.time.formats.TimeFromEpoch" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeString" -> "astropy.time.formats.TimeUnique" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeUnique" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeUnix" -> "astropy.time.formats.TimeFromEpoch" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeUnixTai" -> "astropy.time.formats.TimeUnix" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeYMDHMS" -> "astropy.time.formats.TimeUnique" [arrowhead="empty", arrowtail="none"];
"astropy.time.formats.TimeYearDayTime" -> "astropy.time.formats.TimeISO" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_basic.test_subclass._Time" -> "astropy.time.core.Time" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_basic.test_subfmts_regex.TimeLongYear" -> "astropy.time.formats.TimeString" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_custom_formats.test_custom_format_can_return_any_iterable.Custom" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_custom_formats.test_custom_format_can_return_any_scalar.Custom" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_custom_formats.test_custom_format_cannot_make_bogus_jd1.Custom" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_custom_formats.test_custom_format_scalar_jd1_jd2_okay.Custom" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_custom_formats.test_custom_time_format_fine.Custom" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_custom_formats.test_custom_time_format_forgot_property.Custom" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_custom_formats.test_custom_time_format_problematic_name.Custom" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_custom_formats.test_custom_time_format_set_jds_exception.Custom" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_custom_formats.test_custom_time_format_val_type_exception.Custom" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_custom_formats.test_custom_time_format_value_exception.Custom" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_custom_formats.test_mjd_longdouble_preserves_precision.CustomMJD" -> "astropy.time.formats.TimeFormat" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_fast_parser.test_fast_subclass.TimeYearDayTimeSubClass" -> "astropy.time.formats.TimeYearDayTime" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_functions.TestFunctionsTimeDelta" -> "astropy.time.tests.test_functions.TestFunctionsTime" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_methods.TestManipulation" -> "astropy.time.tests.test_methods.ShapeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_methods.TestSetShape" -> "astropy.time.tests.test_methods.ShapeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.time.tests.test_methods.TestShapeFunctions" -> "astropy.time.tests.test_methods.ShapeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.timeseries.binned.BinnedTimeSeries" -> "astropy.timeseries.core.BaseTimeSeries" [arrowhead="empty", arrowtail="none"];
"astropy.timeseries.core.BaseTimeSeries" -> "astropy.table.table.QTable" [arrowhead="empty", arrowtail="none"];
"astropy.timeseries.periodograms.bls.core.BoxLeastSquares" -> "astropy.timeseries.periodograms.base.BasePeriodogram" [arrowhead="empty", arrowtail="none"];
"astropy.timeseries.periodograms.lombscargle.core.LombScargle" -> "astropy.timeseries.periodograms.base.BasePeriodogram" [arrowhead="empty", arrowtail="none"];
"astropy.timeseries.periodograms.lombscargle_multiband.core.LombScargleMultiband" -> "astropy.timeseries.periodograms.lombscargle.core.LombScargle" [arrowhead="empty", arrowtail="none"];
"astropy.timeseries.sampled.TimeSeries" -> "astropy.timeseries.core.BaseTimeSeries" [arrowhead="empty", arrowtail="none"];
"astropy.timeseries.tests.test_common.TestBinnedTimeSeries" -> "astropy.timeseries.tests.test_common.CommonTimeSeriesTests" [arrowhead="empty", arrowtail="none"];
"astropy.timeseries.tests.test_common.TestTimeSeries" -> "astropy.timeseries.tests.test_common.CommonTimeSeriesTests" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.core.ArrayDistribution" -> "astropy.uncertainty.core.Distribution" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.core.NdarrayDistribution" -> "astropy.uncertainty.core.ArrayDistribution" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.core.NdarrayDistribution" -> "astropy.uncertainty.core._DistributionRepr" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.core.ScalarDistribution" -> "astropy.uncertainty.core.Distribution" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_containers.TestRepresentationWithDifferential" -> "astropy.uncertainty.tests.test_containers.TestRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_distribution.TestQuantityDistributionGetSetItemAdvancedIndex" -> "astropy.uncertainty.tests.test_distribution.TestGetSetItemAdvancedIndex" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_distribution.TestStructuredAdvancedIndex" -> "astropy.uncertainty.tests.test_distribution.StructuredDtypeBase" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_distribution.TestStructuredAdvancedIndex" -> "astropy.uncertainty.tests.test_distribution.TestGetSetItemAdvancedIndex" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_distribution.TestStructuredDistribution" -> "astropy.uncertainty.tests.test_distribution.StructuredDtypeBase" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_distribution.TestStructuredQuantityDistribution" -> "astropy.uncertainty.tests.test_distribution.TestStructuredDistribution" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_distribution.TestStructuredQuantityDistributionInit" -> "astropy.uncertainty.tests.test_distribution.StructuredDtypeBase" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_functions.QuantitySetup" -> "astropy.uncertainty.tests.test_functions.ArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_functions.TestBroadcast" -> "astropy.uncertainty.tests.test_functions.ArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_functions.TestConcatenation" -> "astropy.uncertainty.tests.test_functions.ArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_functions.TestQuantityDistributionBroadcast" -> "astropy.uncertainty.tests.test_functions.QuantitySetup" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_functions.TestQuantityDistributionBroadcast" -> "astropy.uncertainty.tests.test_functions.TestBroadcast" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_functions.TestQuantityDistributionConcatenation" -> "astropy.uncertainty.tests.test_functions.QuantitySetup" [arrowhead="empty", arrowtail="none"];
"astropy.uncertainty.tests.test_functions.TestQuantityDistributionConcatenation" -> "astropy.uncertainty.tests.test_functions.TestConcatenation" [arrowhead="empty", arrowtail="none"];
"astropy.units.core.CompositeUnit" -> "astropy.units.core.UnitBase" [arrowhead="empty", arrowtail="none"];
"astropy.units.core.IrreducibleUnit" -> "astropy.units.core.NamedUnit" [arrowhead="empty", arrowtail="none"];
"astropy.units.core.NamedUnit" -> "astropy.units.core.UnitBase" [arrowhead="empty", arrowtail="none"];
"astropy.units.core.PrefixUnit" -> "astropy.units.core.Unit" [arrowhead="empty", arrowtail="none"];
"astropy.units.core.Unit" -> "astropy.units.core.NamedUnit" [arrowhead="empty", arrowtail="none"];
"astropy.units.core.UnrecognizedUnit" -> "astropy.units.core.IrreducibleUnit" [arrowhead="empty", arrowtail="none"];
"astropy.units.errors.UnitConversionError" -> "astropy.units.errors.UnitsError" [arrowhead="empty", arrowtail="none"];
"astropy.units.errors.UnitParserWarning" -> "astropy.units.errors.UnitsWarning" [arrowhead="empty", arrowtail="none"];
"astropy.units.errors.UnitScaleError" -> "astropy.units.errors.UnitsError" [arrowhead="empty", arrowtail="none"];
"astropy.units.errors.UnitTypeError" -> "astropy.units.errors.UnitsError" [arrowhead="empty", arrowtail="none"];
"astropy.units.errors.UnitsWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.cds.CDS" -> "astropy.units.format.base.Base" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.cds.CDS" -> "astropy.units.format.base._ParsingFormatMixin" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.console.Console" -> "astropy.units.format.base.Base" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.fits.FITS" -> "astropy.units.format.base.Base" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.fits.FITS" -> "astropy.units.format.generic._GenericParserMixin" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.generic.Generic" -> "astropy.units.format.base.Base" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.generic.Generic" -> "astropy.units.format.generic._GenericParserMixin" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.generic._GenericParserMixin" -> "astropy.units.format.base._ParsingFormatMixin" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.latex.Latex" -> "astropy.units.format.console.Console" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.latex.LatexInline" -> "astropy.units.format.latex.Latex" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.ogip.OGIP" -> "astropy.units.format.base.Base" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.ogip.OGIP" -> "astropy.units.format.base._ParsingFormatMixin" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.unicode_format.Unicode" -> "astropy.units.format.console.Console" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.vounit.VOUnit" -> "astropy.units.format.base.Base" [arrowhead="empty", arrowtail="none"];
"astropy.units.format.vounit.VOUnit" -> "astropy.units.format.generic._GenericParserMixin" [arrowhead="empty", arrowtail="none"];
"astropy.units.function.core.FunctionQuantity" -> "astropy.units.quantity.Quantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.function.logarithmic.Decibel" -> "astropy.units.function.logarithmic.LogQuantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.function.logarithmic.DecibelUnit" -> "astropy.units.function.logarithmic.LogUnit" [arrowhead="empty", arrowtail="none"];
"astropy.units.function.logarithmic.Dex" -> "astropy.units.function.logarithmic.LogQuantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.function.logarithmic.DexUnit" -> "astropy.units.function.logarithmic.LogUnit" [arrowhead="empty", arrowtail="none"];
"astropy.units.function.logarithmic.LogQuantity" -> "astropy.units.function.core.FunctionQuantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.function.logarithmic.LogUnit" -> "astropy.units.function.core.FunctionUnitBase" [arrowhead="empty", arrowtail="none"];
"astropy.units.function.logarithmic.MagUnit" -> "astropy.units.function.logarithmic.LogUnit" [arrowhead="empty", arrowtail="none"];
"astropy.units.function.logarithmic.Magnitude" -> "astropy.units.function.logarithmic.LogQuantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.function.mixin.IrreducibleFunctionUnit" -> "astropy.units.core.IrreducibleUnit" [arrowhead="empty", arrowtail="none"];
"astropy.units.function.mixin.IrreducibleFunctionUnit" -> "astropy.units.function.mixin.FunctionMixin" [arrowhead="empty", arrowtail="none"];
"astropy.units.function.mixin.RegularFunctionUnit" -> "astropy.units.core.Unit" [arrowhead="empty", arrowtail="none"];
"astropy.units.function.mixin.RegularFunctionUnit" -> "astropy.units.function.mixin.FunctionMixin" [arrowhead="empty", arrowtail="none"];
"astropy.units.quantity.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.units.quantity.QuantityInfo" -> "astropy.units.quantity.QuantityInfoBase" [arrowhead="empty", arrowtail="none"];
"astropy.units.quantity.QuantityInfoBase" -> "astropy.utils.data_info.ParentDtypeInfo" [arrowhead="empty", arrowtail="none"];
"astropy.units.quantity.SpecificTypeQuantity" -> "astropy.units.quantity.Quantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_equivalencies.test_dimensionless_angles.MyRad1" -> "astropy.units.quantity.Quantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_format.TestRoundtripCDS" -> "astropy.units.tests.test_format.RoundtripBase" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_format.TestRoundtripFITS" -> "astropy.units.tests.test_format.RoundtripBase" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_format.TestRoundtripGeneric" -> "astropy.units.tests.test_format.RoundtripBase" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_format.TestRoundtripOGIP" -> "astropy.units.tests.test_format.RoundtripBase" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_format.TestRoundtripVOUnit" -> "astropy.units.tests.test_format.RoundtripBase" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity.QuantityMimic2" -> "astropy.units.tests.test_quantity.QuantityMimic" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity.TestQuantityCreation.test_subok.MyQuantitySubclass" -> "astropy.units.quantity.Quantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity.TestSpecificTypeQuantity.setup_method.Length" -> "astropy.units.quantity.SpecificTypeQuantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity.TestSpecificTypeQuantity.setup_method.Length2" -> "astropy.units.tests.test_quantity.TestSpecificTypeQuantity.setup_method.Length" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity.TestSpecificTypeQuantity.setup_method.Length3" -> "astropy.units.tests.test_quantity.TestSpecificTypeQuantity.setup_method.Length" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity.test_quantity_conversion_equivalency_passed_on.MySpectral" -> "astropy.units.quantity.Quantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity.test_unit_class_override.MyQuantity" -> "astropy.units.quantity.Quantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_info.TestQuantitySubclass.setup_class.MyQuantity" -> "astropy.units.quantity.Quantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" -> "astropy.units.tests.test_quantity_non_ufuncs.BasicTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.NoUnitTestSetup" -> "astropy.units.tests.test_quantity_non_ufuncs.BasicTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestAccessingParts" -> "astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestAlongAxis" -> "astropy.units.tests.test_quantity_non_ufuncs.BasicTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestArgFunctions" -> "astropy.units.tests.test_quantity_non_ufuncs.NoUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestArrayCreation" -> "astropy.units.tests.test_quantity_non_ufuncs.BasicTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestCopyAndCreation" -> "astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestCopyAndCreation.test_arange_like_quantity_subclass.AngularUnits" -> "astropy.units.quantity.SpecificTypeQuantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestDatetimeFunctions" -> "astropy.units.tests.test_quantity_non_ufuncs.BasicTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestDtypeFunctions" -> "astropy.units.tests.test_quantity_non_ufuncs.NoUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestFFT" -> "astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestFunctionHelpersSignatureCompatibility" -> "astropy.units.tests.test_quantity_non_ufuncs.CheckSignatureCompatibilityBase" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestIndicesFrom" -> "astropy.units.tests.test_quantity_non_ufuncs.NoUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestLinAlg" -> "astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestMemoryFunctions" -> "astropy.units.tests.test_quantity_non_ufuncs.NoUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestNanFunctions" -> "astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestRealImag" -> "astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestReductionLikeFunctions" -> "astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestRepeat" -> "astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestShapeInformation" -> "astropy.units.tests.test_quantity_non_ufuncs.BasicTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestShapeManipulation" -> "astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestSortFunctions" -> "astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestUfuncLike" -> "astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_non_ufuncs.TestUfuncReductions" -> "astropy.units.tests.test_quantity_non_ufuncs.InvariantUnitTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_typing.TestQuantityTyping.test_quantity_subclass_typing.Length" -> "astropy.units.quantity.SpecificTypeQuantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_ufuncs.DuckQuantity2" -> "astropy.units.tests.test_quantity_ufuncs.DuckQuantity1" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_ufuncs.DuckQuantity3" -> "astropy.units.tests.test_quantity_ufuncs.DuckQuantity2" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_quantity_ufuncs.DuckQuantity4" -> "astropy.units.tests.test_quantity_ufuncs.DuckQuantity3" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_structured.StructuredTestBaseWithUnits" -> "astropy.units.tests.test_structured.StructuredTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_structured.TestStructuredMaskedQuantity" -> "astropy.units.tests.test_structured.StructuredTestBaseWithUnits" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_structured.TestStructuredQuantity" -> "astropy.units.tests.test_structured.StructuredTestBaseWithUnits" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_structured.TestStructuredQuantityFunctions" -> "astropy.units.tests.test_structured.StructuredTestBaseWithUnits" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_structured.TestStructuredSpecificTypeQuantity" -> "astropy.units.tests.test_structured.StructuredTestBaseWithUnits" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_structured.TestStructuredSpecificTypeQuantity.setup_class.PositionVelocity" -> "astropy.units.quantity.SpecificTypeQuantity" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_structured.TestStructuredUnitArithmatic" -> "astropy.units.tests.test_structured.StructuredTestBaseWithUnits" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_structured.TestStructuredUnitAsMapping" -> "astropy.units.tests.test_structured.StructuredTestBaseWithUnits" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_structured.TestStructuredUnitBasics" -> "astropy.units.tests.test_structured.StructuredTestBase" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_structured.TestStructuredUnitMethods" -> "astropy.units.tests.test_structured.StructuredTestBaseWithUnits" [arrowhead="empty", arrowtail="none"];
"astropy.units.tests.test_structured.TestStructuredUnitsCopyPickle" -> "astropy.units.tests.test_structured.StructuredTestBaseWithUnits" [arrowhead="empty", arrowtail="none"];
"astropy.utils.data.CacheMissingWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.utils.data.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.utils.data_info.BaseColumnInfo" -> "astropy.utils.data_info.DataInfo" [arrowhead="empty", arrowtail="none"];
"astropy.utils.data_info.MixinInfo" -> "astropy.utils.data_info.BaseColumnInfo" [arrowhead="empty", arrowtail="none"];
"astropy.utils.data_info.ParentDtypeInfo" -> "astropy.utils.data_info.MixinInfo" [arrowhead="empty", arrowtail="none"];
"astropy.utils.exceptions.AstropyBackwardsIncompatibleChangeWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.utils.exceptions.AstropyDeprecationWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.utils.exceptions.AstropyPendingDeprecationWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.utils.exceptions.AstropyUserWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.utils.exceptions.DuplicateRepresentationWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.utils.iers.iers.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.utils.iers.iers.IERS" -> "astropy.table.table.QTable" [arrowhead="empty", arrowtail="none"];
"astropy.utils.iers.iers.IERSDegradedAccuracyWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.utils.iers.iers.IERSStaleWarning" -> "astropy.utils.iers.iers.IERSWarning" [arrowhead="empty", arrowtail="none"];
"astropy.utils.iers.iers.IERSWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.utils.iers.iers.IERS_A" -> "astropy.utils.iers.iers.IERS" [arrowhead="empty", arrowtail="none"];
"astropy.utils.iers.iers.IERS_Auto" -> "astropy.utils.iers.iers.IERS_A" [arrowhead="empty", arrowtail="none"];
"astropy.utils.iers.iers.IERS_B" -> "astropy.utils.iers.iers.IERS" [arrowhead="empty", arrowtail="none"];
"astropy.utils.iers.iers.LeapSeconds" -> "astropy.table.table.QTable" [arrowhead="empty", arrowtail="none"];
"astropy.utils.iers.iers.earth_orientation_table" -> "astropy.utils.state.ScienceState" [arrowhead="empty", arrowtail="none"];
"astropy.utils.iers.tests.test_leap_second.TestFromERFA" -> "astropy.utils.iers.tests.test_leap_second.ERFALeapSecondsSafe" [arrowhead="empty", arrowtail="none"];
"astropy.utils.iers.tests.test_leap_second.TestUpdateLeapSeconds" -> "astropy.utils.iers.tests.test_leap_second.ERFALeapSecondsSafe" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.core.MaskableShapedLikeNDArray" -> "astropy.utils.shapes.ShapedLikeNDArray" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.core.Masked" -> "astropy.utils.shapes.NDArrayShapeMethods" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.core.MaskedArraySubclassInfo" -> "astropy.utils.masked.core.MaskedInfoBase" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.core.MaskedNDArray" -> "astropy.utils.masked.core.Masked" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.core.MaskedNDArrayInfo" -> "astropy.utils.data_info.ParentDtypeInfo" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.core.MaskedNDArrayInfo" -> "astropy.utils.masked.core.MaskedInfoBase" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.core.MaskedRecarray" -> "astropy.utils.masked.core.MaskedNDArray" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.core.MaskedRecarrayInfo" -> "astropy.utils.masked.core.MaskedNDArrayInfo" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.BasicTestSetup" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.InvariantMaskTestSetup" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.NoMaskTestSetup" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestAccessingParts" -> "astropy.utils.masked.tests.test_function_helpers.BasicTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestAlongAxis" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestArgFunctions" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestArrayCreation" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestBincount" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestConcatenate" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestCopyAndCreation" -> "astropy.utils.masked.tests.test_function_helpers.InvariantMaskTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestDtypeFunctions" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestFunctionHelpersSignatureCompatibility" -> "astropy.units.tests.test_quantity_non_ufuncs.CheckSignatureCompatibilityBase" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestIndexFunctions" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestIndicesFrom" -> "astropy.utils.masked.tests.test_function_helpers.NoMaskTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestIntDiffFunctions" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestInterpolationFunctions" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestMemoryFunctions" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestMeshGrid" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestMethodLikes" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestOuterLikeFunctions" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestRealImag" -> "astropy.utils.masked.tests.test_function_helpers.InvariantMaskTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestReductionLikeFunctions" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestRepeat" -> "astropy.utils.masked.tests.test_function_helpers.BasicTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestSettingParts" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestShapeInformation" -> "astropy.utils.masked.tests.test_function_helpers.BasicTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestShapeManipulation" -> "astropy.utils.masked.tests.test_function_helpers.BasicTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestSortFunctions" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_function_helpers.TestUfuncLike" -> "astropy.utils.masked.tests.test_function_helpers.InvariantMaskTestSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.MaskedUfuncTests" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedArrayBroadcast" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedArrayCalculation" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedArrayConcatenation" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedArraySorting" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedArrayUfuncs" -> "astropy.utils.masked.tests.test_functions.MaskedUfuncTests" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedLongitudeBroadcast" -> "astropy.utils.masked.tests.test_functions.TestMaskedArrayBroadcast" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedLongitudeBroadcast" -> "astropy.utils.masked.tests.test_masked.LongitudeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedLongitudeCalculation" -> "astropy.utils.masked.tests.test_functions.TestMaskedArrayCalculation" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedLongitudeCalculation" -> "astropy.utils.masked.tests.test_masked.LongitudeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedLongitudeConcatenation" -> "astropy.utils.masked.tests.test_functions.TestMaskedArrayConcatenation" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedLongitudeConcatenation" -> "astropy.utils.masked.tests.test_masked.LongitudeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedLongitudeUfuncs" -> "astropy.utils.masked.tests.test_functions.MaskedUfuncTests" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedLongitudeUfuncs" -> "astropy.utils.masked.tests.test_masked.LongitudeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedQuantityBroadcast" -> "astropy.utils.masked.tests.test_functions.TestMaskedArrayBroadcast" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedQuantityBroadcast" -> "astropy.utils.masked.tests.test_masked.QuantitySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedQuantityCalculation" -> "astropy.utils.masked.tests.test_functions.TestMaskedArrayCalculation" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedQuantityCalculation" -> "astropy.utils.masked.tests.test_masked.QuantitySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedQuantityConcatenation" -> "astropy.utils.masked.tests.test_functions.TestMaskedArrayConcatenation" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedQuantityConcatenation" -> "astropy.utils.masked.tests.test_masked.QuantitySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedQuantityUfuncs" -> "astropy.utils.masked.tests.test_functions.MaskedUfuncTests" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_functions.TestMaskedQuantityUfuncs" -> "astropy.utils.masked.tests.test_masked.QuantitySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.LongitudeSetup" -> "astropy.utils.masked.tests.test_masked.ArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.MaskedArraySetup" -> "astropy.utils.masked.tests.test_masked.ArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.MaskedItemTests" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.MaskedOperatorTests" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.QuantitySetup" -> "astropy.utils.masked.tests.test_masked.ArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskSetting" -> "astropy.utils.masked.tests.test_masked.ArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayCopyFilled" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayInitialization" -> "astropy.utils.masked.tests.test_masked.ArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayInteractionWithNumpyMA" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayItems" -> "astropy.utils.masked.tests.test_masked.MaskedItemTests" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayMethods" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayOperators" -> "astropy.utils.masked.tests.test_masked.MaskedOperatorTests" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayProductMethods" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayRepr" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedArrayShaping" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedClassCreation.setup_class.MaskedList" -> "astropy.utils.masked.core.Masked" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedLongitudeCopyFilled" -> "astropy.utils.masked.tests.test_masked.LongitudeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedLongitudeCopyFilled" -> "astropy.utils.masked.tests.test_masked.TestMaskedArrayCopyFilled" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedLongitudeItems" -> "astropy.utils.masked.tests.test_masked.LongitudeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedLongitudeItems" -> "astropy.utils.masked.tests.test_masked.MaskedItemTests" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedLongitudeMethods" -> "astropy.utils.masked.tests.test_masked.LongitudeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedLongitudeMethods" -> "astropy.utils.masked.tests.test_masked.TestMaskedArrayMethods" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedLongitudeOperators" -> "astropy.utils.masked.tests.test_masked.LongitudeSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedLongitudeOperators" -> "astropy.utils.masked.tests.test_masked.MaskedOperatorTests" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityCopyFilled" -> "astropy.utils.masked.tests.test_masked.QuantitySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityCopyFilled" -> "astropy.utils.masked.tests.test_masked.TestMaskedArrayCopyFilled" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityInitialization" -> "astropy.utils.masked.tests.test_masked.QuantitySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityInitialization" -> "astropy.utils.masked.tests.test_masked.TestMaskedArrayInitialization" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityInteractionWithNumpyMA" -> "astropy.utils.masked.tests.test_masked.QuantitySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityInteractionWithNumpyMA" -> "astropy.utils.masked.tests.test_masked.TestMaskedArrayInteractionWithNumpyMA" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityItems" -> "astropy.utils.masked.tests.test_masked.MaskedItemTests" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityItems" -> "astropy.utils.masked.tests.test_masked.QuantitySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityMethods" -> "astropy.utils.masked.tests.test_masked.QuantitySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityMethods" -> "astropy.utils.masked.tests.test_masked.TestMaskedArrayMethods" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityOperators" -> "astropy.utils.masked.tests.test_masked.MaskedOperatorTests" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityOperators" -> "astropy.utils.masked.tests.test_masked.QuantitySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityRepr" -> "astropy.utils.masked.tests.test_masked.QuantitySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedQuantityRepr" -> "astropy.utils.masked.tests.test_masked.TestMaskedArrayRepr" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestMaskedRecarray" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_masked.TestViewing" -> "astropy.utils.masked.tests.test_masked.MaskedArraySetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_table.MaskedQuantityTableSetup" -> "astropy.utils.masked.tests.test_table.MaskedArrayTableSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_table.TestMaskedArrayTable" -> "astropy.utils.masked.tests.test_table.MaskedArrayTableSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_table.TestMaskedQuantityTable" -> "astropy.utils.masked.tests.test_table.MaskedQuantityTableSetup" [arrowhead="empty", arrowtail="none"];
"astropy.utils.masked.tests.test_table.TestMaskedQuantityTable" -> "astropy.utils.masked.tests.test_table.TestMaskedArrayTable" [arrowhead="empty", arrowtail="none"];
"astropy.utils.metadata.exceptions.MergeConflictWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.utils.metadata.merge.MergeNpConcatenate" -> "astropy.utils.metadata.merge.MergeStrategy" [arrowhead="empty", arrowtail="none"];
"astropy.utils.metadata.merge.MergePlus" -> "astropy.utils.metadata.merge.MergeStrategy" [arrowhead="empty", arrowtail="none"];
"astropy.utils.metadata.tests.test_metadata.TestMetaExampleData" -> "astropy.utils.metadata.tests.test_metadata.MetaBaseTest" [arrowhead="empty", arrowtail="none"];
"astropy.utils.metadata.tests.test_metadata.TestMetaExampleDataclass" -> "astropy.utils.metadata.tests.test_metadata.MetaBaseTest" [arrowhead="empty", arrowtail="none"];
"astropy.utils.metadata.tests.test_metadata.TestMetaExampleFrozenDataclass" -> "astropy.utils.metadata.tests.test_metadata.MetaBaseTest" [arrowhead="empty", arrowtail="none"];
"astropy.utils.shapes.ShapedLikeNDArray" -> "astropy.utils.shapes.NDArrayShapeMethods" [arrowhead="empty", arrowtail="none"];
"astropy.utils.tests.test_decorators.NewDeprecationWarning" -> "astropy.utils.exceptions.AstropyDeprecationWarning" [arrowhead="empty", arrowtail="none"];
"astropy.utils.tests.test_decorators.NewPendingDeprecationWarning" -> "astropy.utils.exceptions.AstropyPendingDeprecationWarning" [arrowhead="empty", arrowtail="none"];
"astropy.utils.tests.test_decorators.test_sharedmethod_reuse_on_subclasses.B" -> "astropy.utils.tests.test_decorators.test_sharedmethod_reuse_on_subclasses.A" [arrowhead="empty", arrowtail="none"];
"astropy.utils.tests.test_state.test_ScienceState_and_Context.MyState" -> "astropy.utils.state.ScienceState" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.interval.AsymmetricPercentileInterval" -> "astropy.visualization.interval.BaseInterval" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.interval.BaseInterval" -> "astropy.visualization.transform.BaseTransform" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.interval.ManualInterval" -> "astropy.visualization.interval.BaseInterval" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.interval.MinMaxInterval" -> "astropy.visualization.interval.BaseInterval" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.interval.PercentileInterval" -> "astropy.visualization.interval.AsymmetricPercentileInterval" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.interval.ZScaleInterval" -> "astropy.visualization.interval.BaseInterval" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.lupton_rgb.AsinhMapping" -> "astropy.visualization.lupton_rgb.Mapping" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.lupton_rgb.AsinhZScaleMapping" -> "astropy.visualization.lupton_rgb.AsinhMapping" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.lupton_rgb.LinearMapping" -> "astropy.visualization.lupton_rgb.Mapping" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.lupton_rgb.LuptonAsinhStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.lupton_rgb.LuptonAsinhZscaleStretch" -> "astropy.visualization.lupton_rgb.LuptonAsinhStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.lupton_rgb.RGBImageMappingLupton" -> "astropy.visualization.basic_rgb.RGBImageMapping" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.AsinhStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.BaseStretch" -> "astropy.visualization.transform.BaseTransform" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.CompositeStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.CompositeStretch" -> "astropy.visualization.transform.CompositeTransform" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.ContrastBiasStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.HistEqStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.InvertedContrastBiasStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.InvertedHistEqStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.InvertedLogStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.InvertedPowerDistStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.LinearStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.LogStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.PowerDistStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.PowerStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.SinhStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.SqrtStretch" -> "astropy.visualization.stretch.BaseStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.stretch.SquaredStretch" -> "astropy.visualization.stretch.PowerStretch" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.tests.test_interval.TestInterval2D" -> "astropy.visualization.tests.test_interval.TestInterval" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.tests.test_interval.TestIntervalList" -> "astropy.visualization.tests.test_interval.TestInterval" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.transform.CompositeTransform" -> "astropy.visualization.transform.BaseTransform" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.Conf" -> "astropy.config.configuration.ConfigNamespace" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.formatter_locator.AngleFormatterLocator" -> "astropy.visualization.wcsaxes.formatter_locator.BaseFormatterLocator" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.formatter_locator.ScalarFormatterLocator" -> "astropy.visualization.wcsaxes.formatter_locator.BaseFormatterLocator" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.frame.EllipticalFrame" -> "astropy.visualization.wcsaxes.frame.BaseFrame" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.frame.RectangularFrame" -> "astropy.visualization.wcsaxes.frame.BaseFrame" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.frame.RectangularFrame1D" -> "astropy.visualization.wcsaxes.frame.BaseFrame" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.frame.SpineXAligned" -> "astropy.visualization.wcsaxes.frame.Spine" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.tests.test_display_world_coordinates.TestDisplayWorldCoordinate" -> "astropy.visualization.wcsaxes.tests.test_images.BaseImageTests" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.tests.test_frame.HexagonalFrame" -> "astropy.visualization.wcsaxes.frame.BaseFrame" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.tests.test_frame.TestFrame" -> "astropy.visualization.wcsaxes.tests.test_images.BaseImageTests" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.tests.test_images.TestBasic" -> "astropy.visualization.wcsaxes.tests.test_images.BaseImageTests" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.tests.test_images.nondegree_frame.FakeICRS" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.tests.test_misc.test_grid_type_contours_transform.CustomTransform" -> "astropy.visualization.wcsaxes.transforms.CurvedTransform" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.tests.test_transform_coord_meta.DistanceToLonLat" -> "astropy.visualization.wcsaxes.transforms.CurvedTransform" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.tests.test_transform_coord_meta.LonLatToDistance" -> "astropy.visualization.wcsaxes.transforms.CurvedTransform" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.tests.test_transform_coord_meta.TestTransformCoordMeta" -> "astropy.visualization.wcsaxes.tests.test_images.BaseImageTests" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.tests.test_wcsapi.LowLevelWCS5D" -> "astropy.wcs.wcsapi.low_level_api.BaseLowLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.tests.test_wcsapi.LowLevelWCSCelestial2D" -> "astropy.wcs.wcsapi.low_level_api.BaseLowLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.transforms.CoordinateTransform" -> "astropy.visualization.wcsaxes.transforms.CurvedTransform" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.transforms.Pixel2WorldTransform" -> "astropy.visualization.wcsaxes.transforms.CurvedTransform" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.transforms.World2PixelTransform" -> "astropy.visualization.wcsaxes.transforms.CurvedTransform" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.wcsapi.WCSPixel2WorldTransform" -> "astropy.visualization.wcsaxes.transforms.CurvedTransform" [arrowhead="empty", arrowtail="none"];
"astropy.visualization.wcsaxes.wcsapi.WCSWorld2PixelTransform" -> "astropy.visualization.wcsaxes.transforms.CurvedTransform" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.tests.test_pickle.Sub" -> "astropy.wcs.wcs.WCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.tests.test_utils.test_body_to_wcs_frame.IAUMARS2000BodyFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.tests.test_utils.test_body_to_wcs_frame.IAUMARS2000BodycentricRepresentation" -> "astropy.coordinates.representation.geodetic.BaseBodycentricRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.tests.test_utils.test_body_to_wcs_frame.IAUMARS2000GeodeticRepresentation" -> "astropy.coordinates.representation.geodetic.BaseGeodeticRepresentation" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.tests.test_utils.test_body_to_wcs_frame.IAUMARSSphereFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.tests.test_utils.test_celestial_frame_to_wcs.FakeFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.tests.test_utils.test_custom_wcs_to_from_frame.CustomFrame" -> "astropy.coordinates.baseframe.BaseCoordinateFrame" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.tests.test_utils.test_skycoord_to_pixel.SkyCoord2" -> "astropy.coordinates.sky_coordinate.SkyCoord" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.tests.test_wcs.test_no_iteration.NewWCS" -> "astropy.wcs.wcs.WCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcs.FITSFixedWarning" -> "astropy.utils.exceptions.AstropyWarning" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcs.WCS" -> "astropy.wcs.wcsapi.fitswcs.FITSWCSAPIMixin" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.conftest.Celestial2DLowLevelWCS" -> "astropy.wcs.wcsapi.low_level_api.BaseLowLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.conftest.Spectral1DLowLevelWCS" -> "astropy.wcs.wcsapi.low_level_api.BaseLowLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.fitswcs.FITSWCSAPIMixin" -> "astropy.wcs.wcsapi.high_level_api.HighLevelWCSMixin" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.fitswcs.FITSWCSAPIMixin" -> "astropy.wcs.wcsapi.low_level_api.BaseLowLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.fitswcs.SlicedFITSWCS" -> "astropy.wcs.wcsapi.high_level_api.HighLevelWCSMixin" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.fitswcs.SlicedFITSWCS" -> "astropy.wcs.wcsapi.wrappers.sliced_wcs.SlicedLowLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.high_level_api.HighLevelWCSMixin" -> "astropy.wcs.wcsapi.high_level_api.BaseHighLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.high_level_wcs_wrapper.HighLevelWCSWrapper" -> "astropy.wcs.wcsapi.high_level_api.HighLevelWCSMixin" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.tests.test_high_level_api.DoubleLowLevelWCS" -> "astropy.wcs.wcsapi.low_level_api.BaseLowLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.tests.test_high_level_api.InvalidWCSQuantity" -> "astropy.wcs.wcsapi.tests.test_high_level_api.SkyCoordDuplicateWCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.tests.test_high_level_api.MinimalHighLevelWCS" -> "astropy.wcs.wcsapi.high_level_api.HighLevelWCSMixin" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.tests.test_high_level_api.SerializedWCS" -> "astropy.wcs.wcsapi.high_level_api.HighLevelWCSMixin" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.tests.test_high_level_api.SerializedWCS" -> "astropy.wcs.wcsapi.tests.test_high_level_api.DoubleLowLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.tests.test_high_level_api.SimpleDuplicateWCS" -> "astropy.wcs.wcsapi.high_level_api.HighLevelWCSMixin" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.tests.test_high_level_api.SimpleDuplicateWCS" -> "astropy.wcs.wcsapi.tests.test_high_level_api.DoubleLowLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.tests.test_high_level_api.SkyCoordDuplicateWCS" -> "astropy.wcs.wcsapi.high_level_api.HighLevelWCSMixin" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.tests.test_high_level_api.SkyCoordDuplicateWCS" -> "astropy.wcs.wcsapi.tests.test_high_level_api.DoubleLowLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.tests.test_high_level_wcs_wrapper.CustomLowLevelWCS" -> "astropy.wcs.wcsapi.low_level_api.BaseLowLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.tests.test_high_level_wcs_wrapper.test_wrapper_invalid.InvalidCustomLowLevelWCS" -> "astropy.wcs.wcsapi.tests.test_high_level_wcs_wrapper.CustomLowLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.wrappers.base.BaseWCSWrapper" -> "astropy.wcs.wcsapi.low_level_api.BaseLowLevelWCS" [arrowhead="empty", arrowtail="none"];
"astropy.wcs.wcsapi.wrappers.sliced_wcs.SlicedLowLevelWCS" -> "astropy.wcs.wcsapi.wrappers.base.BaseWCSWrapper" [arrowhead="empty", arrowtail="none"];
"astropy.config.configuration.ConfigItem" -> "astropy.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unicode_output", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="use_color", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_lines", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_width", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.config.tests.test_configs.test_configitem.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tstnm", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.config.tests.test_configs.test_configitem_options.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tstnmo", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.config.tests.test_configs.test_configitem_unicode.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tstunicode", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.io.ascii.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="guess_limit_lines", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.io.fits.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enable_record_valued_keyword_cards", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.io.fits.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="extension_name_case_sensitive", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.io.fits.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="strip_header_whitespace", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.io.fits.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="use_memmap", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.io.fits.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lazy_load_hdus", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.io.fits.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enable_uint", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.io.votable.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="verify", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.io.votable.exceptions.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_warnings", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.logger.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_level", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.logger.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_warnings", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.logger.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_exceptions", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.logger.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_to_file", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.logger.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_file_path", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.logger.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_file_level", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.logger.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_file_format", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.logger.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_file_encoding", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.nddata.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="warn_unsupported_correlated", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.nddata.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="warn_setting_unit_directly", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.samp.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="n_retries", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.table.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auto_colname", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.table.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_notebook_table_class", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.table.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="replace_warnings", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.table.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="replace_inplace", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.table.jsviewer.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jquery_url", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.table.jsviewer.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="datatables_url", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.table.jsviewer.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="css_urls", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.time.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="use_fast_parser", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.time.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="masked_array_type", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.data.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dataurl", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.data.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dataurl_mirror", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.data.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_http_user_agent", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.data.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="remote_timeout", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.data.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="allow_internet", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.data.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="compute_hash_block_size", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.data.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="download_block_size", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.iers.iers.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auto_max_age", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.iers.iers.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iers_auto_url", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.iers.iers.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iers_auto_url_mirror", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.iers.iers.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="remote_timeout", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.iers.iers.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iers_degraded_accuracy", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.iers.iers.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="system_leap_second_file", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.iers.iers.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iers_leap_second_auto_url", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.utils.iers.iers.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ietf_leap_second_auto_url", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.visualization.wcsaxes.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="coordinate_range_samples", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.visualization.wcsaxes.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="frame_boundary_samples", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.visualization.wcsaxes.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="grid_samples", style="solid"];
"astropy.config.configuration.ConfigItem" -> "astropy.visualization.wcsaxes.Conf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="contour_grid_samples", style="solid"];
"astropy.coordinates.angles.core.Angle" -> "astropy.coordinates.angles.core.Longitude" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_wrap_angle", style="solid"];
"astropy.coordinates.angles.core.Angle" -> "astropy.coordinates.angles.core.Longitude" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_default_wrap_angle", style="solid"];
"astropy.coordinates.angles.core.Angle" -> "astropy.coordinates.builtin_frames.galactic.Galactic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_lon0_B1950", style="solid"];
"astropy.coordinates.angles.core.Angle" -> "astropy.coordinates.builtin_frames.galactic.Galactic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_lon0_J2000", style="solid"];
"astropy.coordinates.angles.core.Latitude" -> "astropy.coordinates.earth.GeodeticLocation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lat", style="solid"];
"astropy.coordinates.angles.core.Latitude" -> "astropy.coordinates.representation.spherical.SphericalRepresentation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lat", style="solid"];
"astropy.coordinates.angles.core.Latitude" -> "astropy.coordinates.tests.test_earth.TestInput" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lat", style="solid"];
"astropy.coordinates.angles.core.Latitude" -> "astropy.coordinates.tests.test_representation_arithmetic.TestArithmetic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lat", style="solid"];
"astropy.coordinates.angles.core.Longitude" -> "astropy.coordinates.earth.GeodeticLocation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lon", style="solid"];
"astropy.coordinates.angles.core.Longitude" -> "astropy.coordinates.tests.test_earth.TestInput" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lon", style="solid"];
"astropy.coordinates.angles.core.Longitude" -> "astropy.coordinates.tests.test_representation_arithmetic.TestArithmetic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lon", style="solid"];
"astropy.coordinates.angles.core.Longitude" -> "astropy.utils.masked.tests.test_masked.LongitudeSetup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_data_cls", style="solid"];
"astropy.coordinates.angles.core.LongitudeInfo" -> "astropy.coordinates.angles.core.Longitude" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="info", style="solid"];
"astropy.coordinates.attributes.Attribute" -> "astropy.coordinates.tests.test_frames.test_attribute_repr.TestFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attrtest", style="solid"];
"astropy.coordinates.attributes.Attribute" -> "astropy.coordinates.tests.test_frames.test_frame_attribute_descriptor.TestAttributes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attr_2", style="solid"];
"astropy.coordinates.attributes.Attribute" -> "astropy.coordinates.tests.test_frames.test_frame_attribute_descriptor.TestAttributes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attr_3_attr2", style="solid"];
"astropy.coordinates.attributes.Attribute" -> "astropy.coordinates.tests.test_frames.test_frame_attribute_descriptor.TestAttributes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attr_none_attr2", style="solid"];
"astropy.coordinates.attributes.Attribute" -> "astropy.coordinates.tests.test_frames.test_frame_attribute_descriptor.TestAttributes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attr_none_nonexist", style="solid"];
"astropy.coordinates.attributes.Attribute" -> "astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame1" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attr1", style="solid"];
"astropy.coordinates.attributes.Attribute" -> "astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attr2", style="solid"];
"astropy.coordinates.attributes.Attribute" -> "astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame4" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attr1", style="solid"];
"astropy.coordinates.attributes.Attribute" -> "astropy.coordinates.tests.test_frames.test_frame_multiple_inheritance_attribute_descriptor.Frame4" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attr2", style="solid"];
"astropy.coordinates.attributes.Attribute" -> "astropy.coordinates.tests.test_frames.test_frame_subclass_attribute_descriptor.MyFK4" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="newattr", style="solid"];
"astropy.coordinates.attributes.Attribute" -> "astropy.coordinates.tests.test_sky_coord.test_frame_attr_changes.FakeFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fakeattr", style="solid"];
"astropy.coordinates.attributes.Attribute" -> "astropy.coordinates.tests.test_transformations.test_frame_override_component_with_attribute.BorkedFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ra", style="solid"];
"astropy.coordinates.attributes.Attribute" -> "astropy.coordinates.tests.test_transformations.test_frame_override_component_with_attribute.BorkedFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dec", style="solid"];
"astropy.coordinates.attributes.CartesianRepresentationAttribute" -> "astropy.coordinates.builtin_frames.gcrs.GCRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obsgeoloc", style="solid"];
"astropy.coordinates.attributes.CartesianRepresentationAttribute" -> "astropy.coordinates.builtin_frames.gcrs.GCRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obsgeovel", style="solid"];
"astropy.coordinates.attributes.CartesianRepresentationAttribute" -> "astropy.coordinates.builtin_frames.gcrs.PrecessedGeocentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obsgeoloc", style="solid"];
"astropy.coordinates.attributes.CartesianRepresentationAttribute" -> "astropy.coordinates.builtin_frames.gcrs.PrecessedGeocentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obsgeovel", style="solid"];
"astropy.coordinates.attributes.CoordinateAttribute" -> "astropy.coordinates.builtin_frames.galactocentric.Galactocentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="galcen_coord", style="solid"];
"astropy.coordinates.attributes.CoordinateAttribute" -> "astropy.coordinates.builtin_frames.skyoffset.SkyOffsetFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="origin", style="solid"];
"astropy.coordinates.attributes.CoordinateAttribute" -> "astropy.coordinates.tests.test_frames.test_coordinateattribute_transformation.FrameWithCoordinateAttribute" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="coord_attr", style="solid"];
"astropy.coordinates.attributes.CoordinateAttribute" -> "astropy.coordinates.tests.test_frames.test_equivalent_frame_coordinateattribute.FrameWithCoordinateAttribute" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="coord_attr", style="solid"];
"astropy.coordinates.attributes.DifferentialAttribute" -> "astropy.coordinates.builtin_frames.galactocentric.Galactocentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="galcen_v_sun", style="solid"];
"astropy.coordinates.attributes.DifferentialAttribute" -> "astropy.coordinates.builtin_frames.lsr.GalacticLSR" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="v_bary", style="solid"];
"astropy.coordinates.attributes.DifferentialAttribute" -> "astropy.coordinates.builtin_frames.lsr.LSR" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="v_bary", style="solid"];
"astropy.coordinates.attributes.DifferentialAttribute" -> "astropy.coordinates.tests.test_frames.test_differentialattribute.TestFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attrtest", style="solid"];
"astropy.coordinates.attributes.DifferentialAttribute" -> "astropy.coordinates.tests.test_frames.test_differentialattribute.TestFrame2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attrtest", style="solid"];
"astropy.coordinates.attributes.EarthLocationAttribute" -> "astropy.coordinates.builtin_frames.altaz.AltAz" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="location", style="solid"];
"astropy.coordinates.attributes.EarthLocationAttribute" -> "astropy.coordinates.builtin_frames.cirs.CIRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="location", style="solid"];
"astropy.coordinates.attributes.EarthLocationAttribute" -> "astropy.coordinates.builtin_frames.equatorial.TETE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="location", style="solid"];
"astropy.coordinates.attributes.EarthLocationAttribute" -> "astropy.coordinates.builtin_frames.hadec.HADec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="location", style="solid"];
"astropy.coordinates.attributes.EarthLocationAttribute" -> "astropy.coordinates.builtin_frames.itrs.ITRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="location", style="solid"];
"astropy.coordinates.attributes.EarthLocationAttribute" -> "astropy.coordinates.tests.test_frames.test_equivalent_frame_locationattribute.FrameWithLocationAttribute" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="loc_attr", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.builtin_frames.altaz.AltAz" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pressure", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.builtin_frames.altaz.AltAz" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="temperature", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.builtin_frames.altaz.AltAz" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="relative_humidity", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.builtin_frames.altaz.AltAz" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obswl", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.builtin_frames.ecliptic.CustomBarycentricEcliptic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obliquity", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.builtin_frames.galactocentric.Galactocentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="galcen_distance", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.builtin_frames.galactocentric.Galactocentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="z_sun", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.builtin_frames.galactocentric.Galactocentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="roll", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.builtin_frames.hadec.HADec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pressure", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.builtin_frames.hadec.HADec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="temperature", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.builtin_frames.hadec.HADec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="relative_humidity", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.builtin_frames.hadec.HADec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obswl", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.builtin_frames.skyoffset.SkyOffsetFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rotation", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.tests.test_frames.test_quantity_attribute_default.MyCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="someval", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.tests.test_frames.test_quantity_attribute_default.MyCoord2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="someval", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.tests.test_frames.test_quantity_attribute_default.MyCoord3" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="someval", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.tests.test_regression.test_regression_6236.MyFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="my_attr", style="solid"];
"astropy.coordinates.attributes.QuantityAttribute" -> "astropy.coordinates.tests.test_regression.test_regression_8276.MyFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.altaz.AltAz" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.cirs.CIRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.ecliptic.BarycentricMeanEcliptic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="equinox", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.ecliptic.BarycentricTrueEcliptic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="equinox", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.ecliptic.GeocentricMeanEcliptic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="equinox", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.ecliptic.GeocentricMeanEcliptic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.ecliptic.GeocentricTrueEcliptic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="equinox", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.ecliptic.GeocentricTrueEcliptic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.ecliptic.HeliocentricEclipticIAU76" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.ecliptic.HeliocentricMeanEcliptic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="equinox", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.ecliptic.HeliocentricMeanEcliptic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.ecliptic.HeliocentricTrueEcliptic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="equinox", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.ecliptic.HeliocentricTrueEcliptic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.equatorial.TEME" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.equatorial.TETE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.fk4.FK4" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="equinox", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.fk4.FK4" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.fk4.FK4NoETerms" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="equinox", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.fk4.FK4NoETerms" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.fk5.FK5" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="equinox", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.gcrs.GCRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.gcrs.PrecessedGeocentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="equinox", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.gcrs.PrecessedGeocentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.hadec.HADec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.hcrs.HCRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.builtin_frames.itrs.ITRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.tests.test_finite_difference_velocities.test_faux_lsr.LSR2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.attributes.TimeAttribute" -> "astropy.coordinates.tests.test_frames.test_frame_subclass_attribute_descriptor.MyFK4" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.coordinates.baseframe.BaseCoordinateFrame" -> "astropy.coordinates.tests.test_exceptions.FrameDescription" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="frame", style="solid"];
"astropy.coordinates.builtin_frames.altaz.AltAz" -> "astropy.coordinates.tests.test_shape_manipulation.TestManipulation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="s1", style="solid"];
"astropy.coordinates.builtin_frames.fk4.FK4NoETerms" -> "astropy.coordinates.builtin_frames.galactic.Galactic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ngp_B1950", style="solid"];
"astropy.coordinates.builtin_frames.fk5.FK5" -> "astropy.coordinates.builtin_frames.galactic.Galactic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ngp_J2000", style="solid"];
"astropy.coordinates.builtin_frames.galactic.Galactic" -> "astropy.coordinates.builtin_frames.supergalactic.Supergalactic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_nsgp_gal", style="solid"];
"astropy.coordinates.builtin_frames.gcrs.GCRS" -> "astropy.coordinates.spectral_coordinate.SpectralCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="observer", style="solid"];
"astropy.coordinates.builtin_frames.gcrs.GCRS" -> "astropy.coordinates.spectral_coordinate.SpectralCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="target", style="solid"];
"astropy.coordinates.builtin_frames.gcrs.GCRS" -> "astropy.coordinates.tests.test_shape_manipulation.TestManipulation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="s2", style="solid"];
"astropy.coordinates.builtin_frames.gcrs.GCRS" -> "astropy.coordinates.tests.test_shape_manipulation.TestManipulation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="s3", style="solid"];
"astropy.coordinates.builtin_frames.hcrs.HCRS" -> "astropy.coordinates.tests.test_celestial_transformations.TestHCRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sun_hcrs_t1", style="solid"];
"astropy.coordinates.builtin_frames.hcrs.HCRS" -> "astropy.coordinates.tests.test_celestial_transformations.TestHCRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sun_hcrs_tarr", style="solid"];
"astropy.coordinates.builtin_frames.icrs.ICRS" -> "astropy.coordinates.spectral_coordinate.SpectralCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="observer", style="solid"];
"astropy.coordinates.builtin_frames.icrs.ICRS" -> "astropy.coordinates.tests.test_celestial_transformations.TestHCRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sun_icrs_scalar", style="solid"];
"astropy.coordinates.builtin_frames.icrs.ICRS" -> "astropy.coordinates.tests.test_celestial_transformations.TestHCRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sun_icrs_arr", style="solid"];
"astropy.coordinates.builtin_frames.icrs.ICRS" -> "astropy.coordinates.tests.test_shape_manipulation.TestManipulation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="s0", style="solid"];
"astropy.coordinates.builtin_frames.itrs.ITRS" -> "astropy.coordinates.tests.test_celestial_transformations.TestHelioBaryCentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="wht_itrs", style="solid"];
"astropy.coordinates.distances.Distance" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="distance", style="solid"];
"astropy.coordinates.distances.Distance" -> "astropy.coordinates.representation.spherical.SphericalRepresentation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_distance", style="solid"];
"astropy.coordinates.earth.EarthLocation" -> "astropy.coordinates.tests.test_shape_manipulation.TestManipulation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="location", style="solid"];
"astropy.coordinates.earth.EarthLocation" -> "astropy.time.core.Time" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_location", style="solid"];
"astropy.coordinates.earth.EarthLocationInfo" -> "astropy.coordinates.earth.EarthLocation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="info", style="solid"];
"astropy.coordinates.erfa_astrom.ErfaAstrom" -> "astropy.coordinates.erfa_astrom.erfa_astrom" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_value", style="solid"];
"astropy.coordinates.representation.base.BaseRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestRadialDifferential" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="r", style="solid"];
"astropy.coordinates.representation.base.RepresentationInfo" -> "astropy.coordinates.representation.base.BaseRepresentation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="info", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianDifferential" -> "astropy.coordinates.builtin_frames.equatorial.TEME" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_differential", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianDifferential" -> "astropy.coordinates.builtin_frames.galactocentric.Galactocentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_differential", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianDifferential" -> "astropy.coordinates.builtin_frames.itrs.ITRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_differential", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianDifferential" -> "astropy.coordinates.tests.test_representation_arithmetic.TestArithmeticWithDifferentials" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cd", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianDifferential" -> "astropy.coordinates.tests.test_transformations.transfunc" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dif", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.builtin_frames.equatorial.TEME" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.builtin_frames.galactocentric.Galactocentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="representation_type", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.builtin_frames.itrs.ITRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.representation.cartesian.CartesianDifferential" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="base_representation", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.tests.test_regression.test_regression_6236.MyFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.tests.test_regression.test_regression_6236.MySpecialFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="representation_type", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestArithmetic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cartesian", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestArithmeticWithDifferentials" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cr", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestArithmeticWithDifferentials" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="c", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.tests.test_representation_methods.ShapeSetup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="c0", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.tests.test_transformations.transfunc" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rep", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.tests.test_transformations.transfunc" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rep0", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.utils.masked.tests.test_containers.TestRepresentations" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="c", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.utils.masked.tests.test_containers.TestRepresentations" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mc", style="solid"];
"astropy.coordinates.representation.cylindrical.CylindricalRepresentation" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="representation_type", style="solid"];
"astropy.coordinates.representation.cylindrical.CylindricalRepresentation" -> "astropy.coordinates.representation.cylindrical.CylindricalDifferential" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="base_representation", style="solid"];
"astropy.coordinates.representation.spherical.PhysicsSphericalRepresentation" -> "astropy.coordinates.representation.spherical.PhysicsSphericalDifferential" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="base_representation", style="solid"];
"astropy.coordinates.representation.spherical.PhysicsSphericalRepresentation" -> "astropy.coordinates.tests.test_frames.test_component_names_repr.NameChangeFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.PhysicsSphericalRepresentation" -> "astropy.coordinates.tests.test_frames.test_non_spherical_representation_unit_creation.PhysicsICRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.PhysicsSphericalRepresentation" -> "astropy.coordinates.tests.test_pickle._CustomICRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.RadialRepresentation" -> "astropy.coordinates.representation.spherical.RadialDifferential" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="base_representation", style="solid"];
"astropy.coordinates.representation.spherical.RadialRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestRadialDifferential" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="r", style="solid"];
"astropy.coordinates.representation.spherical.SphericalCosLatDifferential" -> "astropy.coordinates.builtin_frames.altaz.AltAz" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_differential", style="solid"];
"astropy.coordinates.representation.spherical.SphericalCosLatDifferential" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_differential", style="solid"];
"astropy.coordinates.representation.spherical.SphericalCosLatDifferential" -> "astropy.coordinates.builtin_frames.ecliptic.BaseEclipticFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_differential", style="solid"];
"astropy.coordinates.representation.spherical.SphericalCosLatDifferential" -> "astropy.coordinates.builtin_frames.galactic.Galactic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_differential", style="solid"];
"astropy.coordinates.representation.spherical.SphericalCosLatDifferential" -> "astropy.coordinates.builtin_frames.hadec.HADec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_differential", style="solid"];
"astropy.coordinates.representation.spherical.SphericalCosLatDifferential" -> "astropy.coordinates.builtin_frames.lsr.GalacticLSR" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_differential", style="solid"];
"astropy.coordinates.representation.spherical.SphericalCosLatDifferential" -> "astropy.coordinates.builtin_frames.supergalactic.Supergalactic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_differential", style="solid"];
"astropy.coordinates.representation.spherical.SphericalCosLatDifferential" -> "astropy.coordinates.tests.test_transformations.test_static_matrix_combine_paths.AFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_differential", style="solid"];
"astropy.coordinates.representation.spherical.SphericalCosLatDifferential" -> "astropy.coordinates.tests.test_transformations.test_static_matrix_combine_paths.BFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_differential", style="solid"];
"astropy.coordinates.representation.spherical.SphericalDifferential" -> "astropy.coordinates.tests.test_representation.TestInfo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="diff", style="solid"];
"astropy.coordinates.representation.spherical.SphericalDifferential" -> "astropy.coordinates.tests.test_representation_methods.ShapeSetup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="diff", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.builtin_frames.altaz.AltAz" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.builtin_frames.baseradec.BaseRADecFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.builtin_frames.ecliptic.BaseEclipticFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.builtin_frames.galactic.Galactic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.builtin_frames.hadec.HADec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.builtin_frames.lsr.GalacticLSR" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.builtin_frames.supergalactic.Supergalactic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.representation.spherical.SphericalCosLatDifferential" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="base_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.representation.spherical.SphericalDifferential" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="base_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_representation.TestInfo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rep", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_representation.TestInfo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rep_w_diff", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestArithmetic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="spherical", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestDifferentialConversion" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="s", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_representation_methods.ShapeSetup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="s0", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_representation_methods.ShapeSetup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="s0", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_representation_methods.ShapeSetup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="s1", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_sky_coord.test_custom_frame_skycoord.BlahBleeBlopFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_sky_coord.test_multiple_aliases.MultipleAliasesFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_sky_coord.test_none_differential_type.MockHeliographicStonyhurst" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_transformations.test_multiple_aliases.MultipleAliasesFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_transformations.test_static_matrix_combine_paths.AFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_transformations.test_static_matrix_combine_paths.BFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.wcs.tests.test_utils.test_body_to_wcs_frame.IAUMARSSphereFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="representation_type", style="solid"];
"astropy.coordinates.representation.spherical.UnitSphericalCosLatDifferential" -> "astropy.coordinates.representation.spherical.SphericalCosLatDifferential" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit_differential", style="solid"];
"astropy.coordinates.representation.spherical.UnitSphericalDifferential" -> "astropy.coordinates.representation.spherical.SphericalDifferential" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit_differential", style="solid"];
"astropy.coordinates.representation.spherical.UnitSphericalRepresentation" -> "astropy.coordinates.builtin_frames.fk5.FK5" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"astropy.coordinates.representation.spherical.UnitSphericalRepresentation" -> "astropy.coordinates.representation.spherical.SphericalRepresentation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit_representation", style="solid"];
"astropy.coordinates.representation.spherical.UnitSphericalRepresentation" -> "astropy.coordinates.representation.spherical.UnitSphericalCosLatDifferential" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="base_representation", style="solid"];
"astropy.coordinates.representation.spherical.UnitSphericalRepresentation" -> "astropy.coordinates.representation.spherical.UnitSphericalDifferential" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="base_representation", style="solid"];
"astropy.coordinates.representation.spherical.UnitSphericalRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestArithmetic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit_spherical", style="solid"];
"astropy.coordinates.sky_coordinate.SkyCoord" -> "astropy.coordinates.spectral_coordinate.SpectralCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_observer", style="solid"];
"astropy.coordinates.sky_coordinate.SkyCoord" -> "astropy.coordinates.spectral_coordinate.SpectralCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_observer", style="solid"];
"astropy.coordinates.sky_coordinate.SkyCoord" -> "astropy.coordinates.spectral_coordinate.SpectralCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_target", style="solid"];
"astropy.coordinates.sky_coordinate.SkyCoord" -> "astropy.coordinates.spectral_coordinate.SpectralCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_target", style="solid"];
"astropy.coordinates.sky_coordinate.SkyCoord" -> "astropy.coordinates.spectral_coordinate.SpectralCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="target", style="solid"];
"astropy.coordinates.sky_coordinate.SkyCoord" -> "astropy.coordinates.spectral_coordinate.SpectralCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="target", style="solid"];
"astropy.coordinates.sky_coordinate.SkyCoord" -> "astropy.coordinates.tests.test_shape_manipulation.TestManipulation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sc", style="solid"];
"astropy.coordinates.sky_coordinate.SkyCoord" -> "astropy.nddata.tests.test_utils.TestCutout2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"astropy.coordinates.sky_coordinate.SkyCoord" -> "astropy.time.tests.test_corrs.TestHelioBaryCentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="star", style="solid"];
"astropy.coordinates.sky_coordinate.SkyCoord" -> "astropy.utils.masked.tests.test_containers.TestSkyCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sc", style="solid"];
"astropy.coordinates.sky_coordinate.SkyCoord" -> "astropy.utils.masked.tests.test_containers.TestSkyCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="msc", style="solid"];
"astropy.coordinates.tests.test_representation.test_subclass_representation.SphericalWrap180Representation" -> "astropy.coordinates.tests.test_representation.test_subclass_representation.ICRSWrap180" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.tests.test_unit_representation.test_unit_representation_subclass.SphericalWrap180Representation" -> "astropy.coordinates.tests.test_unit_representation.test_unit_representation_subclass.MyFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_representation", style="solid"];
"astropy.coordinates.tests.test_unit_representation.test_unit_representation_subclass.UnitSphericalWrap180Representation" -> "astropy.coordinates.tests.test_unit_representation.test_unit_representation_subclass.SphericalWrap180Representation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit_representation", style="solid"];
"astropy.cosmology._src.core._NameField" -> "astropy.cosmology._src.core.Cosmology" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="H0", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Om0", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Ode0", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Tcmb0", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Neff", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="m_nu", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.base.FLRW" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Ob0", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.base.FlatFLRWMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Ode0", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.w0cdm.wCDM" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="w0", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.w0wacdm.w0waCDM" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="w0", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.w0wacdm.w0waCDM" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="wa", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.w0wzcdm.w0wzCDM" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="w0", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.w0wzcdm.w0wzCDM" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="wz", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.wpwazpcdm.wpwaCDM" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="wp", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.wpwazpcdm.wpwaCDM" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="wa", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.flrw.wpwazpcdm.wpwaCDM" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="zp", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.tests.io.base.IODirectTestBase.setup.CosmologyWithKwargs" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Tcmb0", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.tests.parameter.test_parameter.TestParameter.setup_class.Example1" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="param", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.tests.parameter.test_parameter.TestParameter.setup_class.Example2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="param", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.tests.parameter.test_parameter.TestParameter.test_make_from_Parameter.Example" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="param", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.tests.test_core.SubCosmology" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="H0", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.tests.test_core.SubCosmology" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Tcmb0", style="solid"];
"astropy.cosmology._src.parameter.core.Parameter" -> "astropy.cosmology._src.tests.test_core.SubCosmology" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="m_nu", style="solid"];
"astropy.cosmology._src.parameter.core._FValidateField" -> "astropy.cosmology._src.parameter.core.Parameter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fvalidate", style="solid"];
"astropy.cosmology._src.parameter.core._UnitField" -> "astropy.cosmology._src.parameter.core.Parameter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit", style="solid"];
"astropy.cosmology._src.parameter.descriptors.ParametersAttribute" -> "astropy.cosmology._src.core.Cosmology" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
"astropy.cosmology._src.parameter.descriptors.ParametersAttribute" -> "astropy.cosmology._src.core.Cosmology" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_derived_parameters", style="solid"];
"astropy.cosmology._src.parameter.descriptors.ParametersAttribute" -> "astropy.cosmology._src.tests.parameter.test_descriptors.TestParametersAttribute.test_descriptor_attr_name_not_str.Obj2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attr", style="solid"];
"astropy.extern._strptime.LocaleTime" -> "astropy.extern._strptime.TimeRE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="locale_time", style="solid"];
"astropy.extern.configobj.validate.Validator" -> "astropy.config.configuration.ConfigItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_validator", style="solid"];
"astropy.extern.ply.lex.PlyLogger" -> "astropy.extern.ply.lex.LexerReflect" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log", style="solid"];
"astropy.extern.ply.yacc.PlyLogger" -> "astropy.extern.ply.yacc.ParserReflect" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log", style="solid"];
"astropy.io.ascii.basic.BasicData" -> "astropy.io.ascii.basic.Basic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.basic.BasicHeader" -> "astropy.io.ascii.basic.Basic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.basic.CommentedHeaderHeader" -> "astropy.io.ascii.basic.CommentedHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.basic.CsvData" -> "astropy.io.ascii.basic.Csv" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.basic.CsvHeader" -> "astropy.io.ascii.basic.Csv" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.basic.CsvSplitter" -> "astropy.io.ascii.basic.CsvData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.basic.CsvSplitter" -> "astropy.io.ascii.basic.CsvHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.basic.NoHeaderData" -> "astropy.io.ascii.basic.CommentedHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.basic.NoHeaderData" -> "astropy.io.ascii.basic.NoHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.basic.NoHeaderHeader" -> "astropy.io.ascii.basic.NoHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.basic.RdbData" -> "astropy.io.ascii.basic.Rdb" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.basic.RdbHeader" -> "astropy.io.ascii.basic.Rdb" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.basic.TabData" -> "astropy.io.ascii.basic.Tab" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.basic.TabDataSplitter" -> "astropy.io.ascii.basic.TabData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.basic.TabHeader" -> "astropy.io.ascii.basic.Tab" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.basic.TabHeaderSplitter" -> "astropy.io.ascii.basic.TabHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.cds.CdsData" -> "astropy.io.ascii.cds.Cds" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.cds.CdsData" -> "astropy.io.ascii.cds.CdsHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"astropy.io.ascii.cds.CdsHeader" -> "astropy.io.ascii.cds.Cds" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.cds.CdsHeader" -> "astropy.io.ascii.cds.CdsData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header", style="solid"];
"astropy.io.ascii.core.BaseData" -> "astropy.io.ascii.core.BaseHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"astropy.io.ascii.core.BaseData" -> "astropy.io.ascii.core.BaseReader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"astropy.io.ascii.core.BaseData" -> "astropy.io.ascii.core.BaseReader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.core.BaseHeader" -> "astropy.io.ascii.core.BaseData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header", style="solid"];
"astropy.io.ascii.core.BaseHeader" -> "astropy.io.ascii.core.BaseReader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header", style="solid"];
"astropy.io.ascii.core.BaseHeader" -> "astropy.io.ascii.core.BaseReader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.core.BaseInputter" -> "astropy.io.ascii.core.BaseReader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inputter", style="solid"];
"astropy.io.ascii.core.BaseInputter" -> "astropy.io.ascii.core.BaseReader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inputter_class", style="solid"];
"astropy.io.ascii.core.BaseSplitter" -> "astropy.io.ascii.basic.BasicData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter", style="solid"];
"astropy.io.ascii.core.BaseSplitter" -> "astropy.io.ascii.basic.BasicHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter", style="solid"];
"astropy.io.ascii.core.ContinuationLinesInputter" -> "astropy.io.ascii.sextractor.SExtractor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inputter_class", style="solid"];
"astropy.io.ascii.core.CsvWriter" -> "astropy.io.ascii.core.DefaultSplitter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="csv_writer", style="solid"];
"astropy.io.ascii.core.DefaultSplitter" -> "astropy.io.ascii.core.BaseData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter", style="solid"];
"astropy.io.ascii.core.DefaultSplitter" -> "astropy.io.ascii.core.BaseHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter", style="solid"];
"astropy.io.ascii.core.DefaultSplitter" -> "astropy.io.ascii.fixedwidth.FixedWidthTwoLineHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.core.DefaultSplitter" -> "astropy.io.ascii.rst.SimpleRSTHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.core.FloatType" -> "astropy.io.ascii.core.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="type", style="solid"];
"astropy.io.ascii.core.IntType" -> "astropy.io.ascii.core.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="type", style="solid"];
"astropy.io.ascii.core.StrType" -> "astropy.io.ascii.core.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="type", style="solid"];
"astropy.io.ascii.core.TableOutputter" -> "astropy.io.ascii.basic.Basic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outputter", style="solid"];
"astropy.io.ascii.core.TableOutputter" -> "astropy.io.ascii.core.BaseReader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outputter", style="solid"];
"astropy.io.ascii.core.TableOutputter" -> "astropy.io.ascii.core.BaseReader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outputter_class", style="solid"];
"astropy.io.ascii.core.TableOutputter" -> "astropy.io.ascii.fastbasic.FastBasic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outputter", style="solid"];
"astropy.io.ascii.daophot.DaophotData" -> "astropy.io.ascii.daophot.Daophot" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.daophot.DaophotData" -> "astropy.io.ascii.daophot.DaophotInputter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"astropy.io.ascii.daophot.DaophotHeader" -> "astropy.io.ascii.daophot.Daophot" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.daophot.DaophotInputter" -> "astropy.io.ascii.daophot.Daophot" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inputter_class", style="solid"];
"astropy.io.ascii.ecsv.EcsvData" -> "astropy.io.ascii.ecsv.Ecsv" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.ecsv.EcsvHeader" -> "astropy.io.ascii.ecsv.Ecsv" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.ecsv.EcsvOutputter" -> "astropy.io.ascii.ecsv.Ecsv" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outputter_class", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthData" -> "astropy.io.ascii.fixedwidth.FixedWidth" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthHeader" -> "astropy.io.ascii.fixedwidth.FixedWidth" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthHeaderSplitter" -> "astropy.io.ascii.fixedwidth.FixedWidthHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthNoHeaderData" -> "astropy.io.ascii.fixedwidth.FixedWidthNoHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthNoHeaderHeader" -> "astropy.io.ascii.fixedwidth.FixedWidthNoHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthSplitter" -> "astropy.io.ascii.cds.CdsData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthSplitter" -> "astropy.io.ascii.daophot.DaophotData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthSplitter" -> "astropy.io.ascii.fixedwidth.FixedWidthData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthTwoLineData" -> "astropy.io.ascii.fixedwidth.FixedWidthTwoLine" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthTwoLineDataSplitter" -> "astropy.io.ascii.fixedwidth.FixedWidthTwoLineData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthTwoLineDataSplitter" -> "astropy.io.ascii.rst.SimpleRSTData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.fixedwidth.FixedWidthTwoLineHeader" -> "astropy.io.ascii.fixedwidth.FixedWidthTwoLine" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.html.HTMLData" -> "astropy.io.ascii.html.HTML" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.html.HTMLHeader" -> "astropy.io.ascii.html.HTML" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.html.HTMLInputter" -> "astropy.io.ascii.html.HTML" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inputter_class", style="solid"];
"astropy.io.ascii.html.HTMLOutputter" -> "astropy.io.ascii.html.HTML" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outputter", style="solid"];
"astropy.io.ascii.html.HTMLSplitter" -> "astropy.io.ascii.html.HTMLData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.html.HTMLSplitter" -> "astropy.io.ascii.html.HTMLHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.ipac.IpacData" -> "astropy.io.ascii.ipac.Ipac" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.ipac.IpacDataSplitter" -> "astropy.io.ascii.ipac.IpacData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.ipac.IpacHeader" -> "astropy.io.ascii.ipac.Ipac" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.ipac.IpacHeaderSplitter" -> "astropy.io.ascii.ipac.IpacHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.latex.AASTexData" -> "astropy.io.ascii.latex.AASTex" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.latex.AASTexHeader" -> "astropy.io.ascii.latex.AASTex" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.latex.AASTexHeaderSplitter" -> "astropy.io.ascii.latex.AASTexHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.latex.LatexData" -> "astropy.io.ascii.latex.Latex" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.latex.LatexHeader" -> "astropy.io.ascii.latex.Latex" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.latex.LatexInputter" -> "astropy.io.ascii.latex.Latex" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inputter_class", style="solid"];
"astropy.io.ascii.latex.LatexSplitter" -> "astropy.io.ascii.latex.LatexData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.latex.LatexSplitter" -> "astropy.io.ascii.latex.LatexHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.mrt.MrtData" -> "astropy.io.ascii.mrt.Mrt" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.mrt.MrtHeader" -> "astropy.io.ascii.mrt.Mrt" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.mrt.MrtHeader" -> "astropy.io.ascii.mrt.MrtData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header", style="solid"];
"astropy.io.ascii.mrt.MrtSplitter" -> "astropy.io.ascii.mrt.MrtData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.qdp.QDPData" -> "astropy.io.ascii.qdp.QDP" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.qdp.QDPHeader" -> "astropy.io.ascii.qdp.QDP" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.qdp.QDPSplitter" -> "astropy.io.ascii.qdp.QDPData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.qdp.QDPSplitter" -> "astropy.io.ascii.qdp.QDPHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter_class", style="solid"];
"astropy.io.ascii.rst.SimpleRSTData" -> "astropy.io.ascii.rst.RST" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.rst.SimpleRSTHeader" -> "astropy.io.ascii.rst.RST" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.sextractor.SExtractorData" -> "astropy.io.ascii.sextractor.SExtractor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_class", style="solid"];
"astropy.io.ascii.sextractor.SExtractorHeader" -> "astropy.io.ascii.sextractor.SExtractor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.tests.test_read.test_initial_column_fill_values.TestHeader" -> "astropy.io.ascii.tests.test_read.test_initial_column_fill_values.Tester" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.ascii.tests.test_types.test_col_dtype_in_custom_class.TestDtypeHeader" -> "astropy.io.ascii.tests.test_types.test_col_dtype_in_custom_class.TestDtype" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_class", style="solid"];
"astropy.io.fits.card.Undefined" -> "astropy.io.fits.card.Card" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_value", style="solid"];
"astropy.io.fits.card.Undefined" -> "astropy.io.fits.card.Card" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_valuestring", style="solid"];
"astropy.io.fits.column.ColDefs" -> "astropy.io.fits.fitsrec.FITS_rec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_coldefs", style="solid"];
"astropy.io.fits.column.ColDefs" -> "astropy.io.fits.hdu.table._TableLikeHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_columns_type", style="solid"];
"astropy.io.fits.column.ColumnAttribute" -> "astropy.io.fits.column.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format", style="solid"];
"astropy.io.fits.column.ColumnAttribute" -> "astropy.io.fits.column.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit", style="solid"];
"astropy.io.fits.column.ColumnAttribute" -> "astropy.io.fits.column.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="null", style="solid"];
"astropy.io.fits.column.ColumnAttribute" -> "astropy.io.fits.column.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bscale", style="solid"];
"astropy.io.fits.column.ColumnAttribute" -> "astropy.io.fits.column.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bzero", style="solid"];
"astropy.io.fits.column.ColumnAttribute" -> "astropy.io.fits.column.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="disp", style="solid"];
"astropy.io.fits.column.ColumnAttribute" -> "astropy.io.fits.column.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="start", style="solid"];
"astropy.io.fits.column.ColumnAttribute" -> "astropy.io.fits.column.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dim", style="solid"];
"astropy.io.fits.column._AsciiColDefs" -> "astropy.io.fits.hdu.table.TableHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_columns_type", style="solid"];
"astropy.io.fits.column._AsciiColumnFormat" -> "astropy.io.fits.column._AsciiColDefs" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_col_format_cls", style="solid"];
"astropy.io.fits.column._ColumnFormat" -> "astropy.io.fits.column.ColDefs" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_col_format_cls", style="solid"];
"astropy.io.fits.diff.HeaderDiff" -> "astropy.io.fits.diff.HDUDiff" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="diff_headers", style="solid"];
"astropy.io.fits.diff.ImageDataDiff" -> "astropy.io.fits.diff.HDUDiff" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="diff_data", style="solid"];
"astropy.io.fits.diff.RawDataDiff" -> "astropy.io.fits.diff.HDUDiff" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="diff_data", style="solid"];
"astropy.io.fits.diff.TableDataDiff" -> "astropy.io.fits.diff.HDUDiff" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="diff_data", style="solid"];
"astropy.io.fits.file._File" -> "astropy.io.fits.hdu.streaming.StreamingHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ffo", style="solid"];
"astropy.io.fits.fitsrec.FITS_rec" -> "astropy.io.fits.hdu.table._TableLikeHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_data_type", style="solid"];
"astropy.io.fits.fitsrec.FITS_record" -> "astropy.io.fits.fitsrec.FITS_rec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_record_type", style="solid"];
"astropy.io.fits.hdu.compressed.compbintable._CompBinTableHDU" -> "astropy.io.fits.hdu.compressed.compressed.CompImageHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_tmp_bintable", style="solid"];
"astropy.io.fits.hdu.groups.Group" -> "astropy.io.fits.hdu.groups.GroupData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_record_type", style="solid"];
"astropy.io.fits.hdu.groups.GroupData" -> "astropy.io.fits.hdu.groups.GroupsHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_data_type", style="solid"];
"astropy.io.fits.hdu.hdulist.HDUList" -> "astropy.io.fits.diff.FITSDiff" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.io.fits.hdu.hdulist.HDUList" -> "astropy.io.fits.diff.FITSDiff" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.io.fits.hdu.hdulist.HDUList" -> "astropy.io.fits.diff.FITSDiff" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"astropy.io.fits.hdu.hdulist.HDUList" -> "astropy.io.fits.diff.FITSDiff" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"astropy.io.fits.hdu.hdulist.HDUList" -> "astropy.io.fits.hdu.compressed.tests.test_compressed.TestCompHDUSections" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hdul", style="solid"];
"astropy.io.fits.hdu.hdulist.HDUList" -> "astropy.io.fits.hdu.compressed.tests.test_compressed.TestCompHDUSections" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hdul2", style="solid"];
"astropy.io.fits.hdu.hdulist.HDUList" -> "astropy.io.fits.scripts.fitsheader.HeaderFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_hdulist", style="solid"];
"astropy.io.fits.hdu.hdulist.HDUList" -> "astropy.io.fits.tests.test_connect.TestMultipleHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hdus", style="solid"];
"astropy.io.fits.hdu.hdulist.HDUList" -> "astropy.io.fits.tests.test_connect.TestMultipleHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hdusb", style="solid"];
"astropy.io.fits.hdu.hdulist.HDUList" -> "astropy.io.fits.tests.test_connect.TestMultipleHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hdus3", style="solid"];
"astropy.io.fits.hdu.hdulist.HDUList" -> "astropy.io.fits.tests.test_connect.TestMultipleHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hdus2", style="solid"];
"astropy.io.fits.hdu.hdulist.HDUList" -> "astropy.io.fits.tests.test_connect.TestMultipleHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hdus1", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.compressed.compressed.CompImageHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bzero", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bzero", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bzero", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bscale", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bscale", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bscale", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bitpix", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bitpix", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_gcount", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_pcount", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_blank", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_blank", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_blank", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_orig_bitpix", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_orig_bitpix", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_orig_bitpix", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_orig_blank", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_orig_blank", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_orig_bzero", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_orig_bzero", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_orig_bzero", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_orig_bscale", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_orig_bscale", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.image._ImageBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_orig_bscale", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.table._TableBaseHDU" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_header", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.tests.test_header.TestRecordValuedKeywordCards" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_test_header", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.wcs.tests.test_wcs.TestWcsWithTime" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header", style="solid"];
"astropy.io.fits.header._BasicHeaderCards" -> "astropy.io.fits.header._BasicHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cards", style="solid"];
"astropy.io.fits.tests.test_core.TestFileFunctions.test_mmap_unwriteable.MockMmap" -> "astropy.io.fits.file._File" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_mmap", style="solid"];
"astropy.io.fits.tests.test_core.TestFileFunctions.test_mmap_unwriteable.MockMmap" -> "astropy.io.fits.file._File" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_mmap", style="solid"];
"astropy.io.registry.interface.UnifiedReadWriteMethod" -> "astropy.nddata.mixins.ndio.NDIOMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="read", style="solid"];
"astropy.io.registry.interface.UnifiedReadWriteMethod" -> "astropy.nddata.mixins.ndio.NDIOMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="write", style="solid"];
"astropy.io.votable.converters.ArrayVarArray" -> "astropy.io.votable.converters.BitArray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vararray_type", style="solid"];
"astropy.io.votable.converters.ArrayVarArray" -> "astropy.io.votable.converters.BooleanArray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vararray_type", style="solid"];
"astropy.io.votable.converters.ArrayVarArray" -> "astropy.io.votable.converters.NumericArray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vararray_type", style="solid"];
"astropy.io.votable.converters.BitArray" -> "astropy.io.votable.converters.Bit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="array_type", style="solid"];
"astropy.io.votable.converters.BooleanArray" -> "astropy.io.votable.converters.Boolean" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="array_type", style="solid"];
"astropy.io.votable.converters.ComplexArray" -> "astropy.io.votable.converters.Complex" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="array_type", style="solid"];
"astropy.io.votable.converters.ComplexArrayVarArray" -> "astropy.io.votable.converters.ComplexArray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vararray_type", style="solid"];
"astropy.io.votable.converters.ComplexVarArray" -> "astropy.io.votable.converters.Complex" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vararray_type", style="solid"];
"astropy.io.votable.converters.NumericArray" -> "astropy.io.votable.converters.Numeric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="array_type", style="solid"];
"astropy.io.votable.converters.ScalarVarArray" -> "astropy.io.votable.converters.Bit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vararray_type", style="solid"];
"astropy.io.votable.converters.ScalarVarArray" -> "astropy.io.votable.converters.Boolean" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vararray_type", style="solid"];
"astropy.io.votable.converters.ScalarVarArray" -> "astropy.io.votable.converters.Numeric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vararray_type", style="solid"];
"astropy.io.votable.tree.MivotBlock" -> "astropy.io.votable.tree.Resource" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_mivot_block", style="solid"];
"astropy.io.votable.tree.VOTableFile" -> "astropy.io.votable.tests.test_vo.TestParse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="votable", style="solid"];
"astropy.io.votable.tree.VOTableFile" -> "astropy.io.votable.tests.test_vo.TestReferences" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="votable", style="solid"];
"astropy.io.votable.tree.VOTableFile" -> "astropy.io.votable.tests.test_vo.TestThroughBinary" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="votable", style="solid"];
"astropy.io.votable.tree.VOTableFile" -> "astropy.io.votable.tests.test_vo.TestThroughBinary2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="votable", style="solid"];
"astropy.io.votable.tree.VOTableFile" -> "astropy.io.votable.tests.test_vo.TestThroughTableData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="votable", style="solid"];
"astropy.io.votable.tree.Values" -> "astropy.io.votable.tree.Field" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="values", style="solid"];
"astropy.modeling.bounding_box._SelectorArguments" -> "astropy.modeling.bounding_box.CompoundBoundingBox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_selector_args", style="solid"];
"astropy.modeling.bounding_box._SelectorArguments" -> "astropy.modeling.bounding_box.CompoundBoundingBox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_selector_args", style="solid"];
"astropy.modeling.bounding_box._SelectorArguments" -> "astropy.modeling.bounding_box.CompoundBoundingBox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_selector_args", style="solid"];
"astropy.modeling.bounding_box._SelectorArguments" -> "astropy.modeling.bounding_box.CompoundBoundingBox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_selector_args", style="solid"];
"astropy.modeling.fitting.JointFitter" -> "astropy.modeling.tests.test_fitters.TestJointFitter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jf", style="solid"];
"astropy.modeling.fitting.LevMarLSQFitter" -> "astropy.modeling.tests.test_fitting_parallel.TestDaskInput" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fitter", style="solid"];
"astropy.modeling.fitting.LevMarLSQFitter" -> "astropy.modeling.tests.test_fitting_parallel.TestDiagnostics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fitter", style="solid"];
"astropy.modeling.fitting.LinearLSQFitter" -> "astropy.modeling.tests.test_fitters.TestICheb2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fitter", style="solid"];
"astropy.modeling.fitting.LinearLSQFitter" -> "astropy.modeling.tests.test_parameters.TestParameters" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="linear_fitter", style="solid"];
"astropy.modeling.fitting.LinearLSQFitter" -> "astropy.modeling.tests.test_polynomial.TestFitting" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="linear_fitter", style="solid"];
"astropy.modeling.functional_models.AiryDisk2D" -> "astropy.convolution.kernels.AiryDisk2DKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"astropy.modeling.functional_models.Box1D" -> "astropy.convolution.kernels.Box1DKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"astropy.modeling.functional_models.Box2D" -> "astropy.convolution.kernels.Box2DKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"astropy.modeling.functional_models.Disk2D" -> "astropy.convolution.kernels.Tophat2DKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"astropy.modeling.functional_models.Gaussian1D" -> "astropy.convolution.kernels.Gaussian1DKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"astropy.modeling.functional_models.Gaussian1D" -> "astropy.modeling.tests.test_constraints.TestNonLinearConstraints" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="g1", style="solid"];
"astropy.modeling.functional_models.Gaussian1D" -> "astropy.modeling.tests.test_constraints.TestNonLinearConstraints" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="g2", style="solid"];
"astropy.modeling.functional_models.Gaussian1D" -> "astropy.modeling.tests.test_fitters.TestJointFitter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="g1", style="solid"];
"astropy.modeling.functional_models.Gaussian1D" -> "astropy.modeling.tests.test_fitters.TestJointFitter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="g2", style="solid"];
"astropy.modeling.functional_models.Gaussian1D" -> "astropy.modeling.tests.test_fitters.TestNonLinearFitters" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gauss", style="solid"];
"astropy.modeling.functional_models.Gaussian1D" -> "astropy.modeling.tests.test_fitting_parallel.TestDaskInput" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"astropy.modeling.functional_models.Gaussian1D" -> "astropy.modeling.tests.test_fitting_parallel.TestDiagnostics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"astropy.modeling.functional_models.Gaussian1D" -> "astropy.modeling.tests.test_models._ExtendedModelMeta" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"astropy.modeling.functional_models.Gaussian1D" -> "astropy.modeling.tests.test_parameters.TestMultipleParameterSets" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gmodel", style="solid"];
"astropy.modeling.functional_models.Gaussian1D" -> "astropy.modeling.tests.test_parameters.TestParameters" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gmodel", style="solid"];
"astropy.modeling.functional_models.Gaussian2D" -> "astropy.convolution.kernels.Gaussian2DKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"astropy.modeling.functional_models.Moffat2D" -> "astropy.convolution.kernels.Moffat2DKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"astropy.modeling.functional_models.RickerWavelet1D" -> "astropy.convolution.kernels.RickerWavelet1DKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"astropy.modeling.functional_models.RickerWavelet2D" -> "astropy.convolution.kernels.RickerWavelet2DKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"astropy.modeling.functional_models.Ring2D" -> "astropy.convolution.kernels.Ring2DKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"astropy.modeling.functional_models.Scale" -> "astropy.modeling.tests.test_core.test_custom_inverse_reset.TestModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inverse", style="solid"];
"astropy.modeling.functional_models.Shift" -> "astropy.modeling.polynomial.SIP" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shift_a", style="solid"];
"astropy.modeling.functional_models.Shift" -> "astropy.modeling.polynomial.SIP" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shift_b", style="solid"];
"astropy.modeling.functional_models.Trapezoid1D" -> "astropy.convolution.kernels.Trapezoid1DKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"astropy.modeling.functional_models.TrapezoidDisk2D" -> "astropy.convolution.kernels.TrapezoidDisk2DKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.AiryDisk2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.AiryDisk2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.AiryDisk2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.AiryDisk2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="radius", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Box1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Box1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Box1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="width", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Box2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Box2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Box2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Box2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_width", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Box2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_width", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Const1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Const2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Disk2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Disk2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Disk2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Disk2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="R_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Ellipse2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Ellipse2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Ellipse2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Ellipse2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Ellipse2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Ellipse2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="theta", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Exponential1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Exponential1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tau", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Gaussian2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Gaussian2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_mean", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Gaussian2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_mean", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Gaussian2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_stddev", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Gaussian2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_stddev", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Gaussian2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="theta", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.GeneralSersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.GeneralSersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="r_eff", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.GeneralSersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="n", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.GeneralSersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.GeneralSersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.GeneralSersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ellip", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.GeneralSersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="theta", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.GeneralSersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="c", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.KingProjectedAnalytic1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.KingProjectedAnalytic1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="r_core", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.KingProjectedAnalytic1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="r_tide", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Linear1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slope", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Linear1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="intercept", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Logarithmic1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Logarithmic1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tau", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Lorentz1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Lorentz1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Lorentz1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fwhm", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Lorentz2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Lorentz2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Lorentz2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Lorentz2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fwhm", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Moffat1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Moffat1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Moffat1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gamma", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Moffat1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alpha", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Moffat2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Moffat2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Moffat2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Moffat2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gamma", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Moffat2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alpha", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Multiply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="factor", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Planar2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slope_x", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Planar2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slope_y", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Planar2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="intercept", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.RedshiftScaleFactor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="z", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.RickerWavelet1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.RickerWavelet1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.RickerWavelet1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sigma", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.RickerWavelet2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.RickerWavelet2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.RickerWavelet2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.RickerWavelet2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sigma", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Ring2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Ring2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Ring2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Ring2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="r_in", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Ring2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="width", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Sersic1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Sersic1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="r_eff", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Sersic1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="n", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Sersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Sersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="r_eff", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Sersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="n", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Sersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Sersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Sersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ellip", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Sersic2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="theta", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Trapezoid1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Trapezoid1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Trapezoid1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="width", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Trapezoid1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slope", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.TrapezoidDisk2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.TrapezoidDisk2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.TrapezoidDisk2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.TrapezoidDisk2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="R_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.TrapezoidDisk2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slope", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Voigt1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Voigt1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude_L", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Voigt1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fwhm_L", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models.Voigt1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fwhm_G", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models._Trigonometric1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models._Trigonometric1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="frequency", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.functional_models._Trigonometric1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="phase", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.physical_models.BlackBody" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="temperature", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.physical_models.BlackBody" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="scale", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.physical_models.Drude1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.physical_models.Drude1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.physical_models.Drude1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fwhm", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.physical_models.NFW" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mass", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.physical_models.NFW" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="concentration", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.physical_models.NFW" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="redshift", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.physical_models.Plummer1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mass", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.physical_models.Plummer1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="r_plum", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.BrokenPowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.BrokenPowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_break", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.BrokenPowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alpha_1", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.BrokenPowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alpha_2", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.ExponentialCutoffPowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.ExponentialCutoffPowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.ExponentialCutoffPowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alpha", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.ExponentialCutoffPowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_cutoff", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.LogParabola1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.LogParabola1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.LogParabola1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alpha", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.LogParabola1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="beta", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.PowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.PowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_0", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.PowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alpha", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.Schechter1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="phi_star", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.Schechter1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="m_star", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.Schechter1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alpha", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.SmoothlyBrokenPowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amplitude", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.SmoothlyBrokenPowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x_break", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.SmoothlyBrokenPowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alpha_1", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.SmoothlyBrokenPowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alpha_2", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.powerlaws.SmoothlyBrokenPowerLaw1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="delta", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.rotations.EulerAngleRotation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="phi", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.rotations.EulerAngleRotation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="theta", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.rotations.EulerAngleRotation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="psi", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.rotations.Rotation2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="angle", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.rotations.RotationSequence3D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="angles", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.rotations._SkyRotation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lon", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.rotations._SkyRotation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lat", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.rotations._SkyRotation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lon_pole", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_compound._ConstraintsTestA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stddev", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_compound._ConstraintsTestA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mean", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_compound._ConstraintsTestB" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mean", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_constraints.test_default_constraints.MyModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_constraints.test_default_constraints.MyModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_constraints.test_fit_with_bound_constraints_estimate_jacobian.MyModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_constraints.test_fit_with_bound_constraints_estimate_jacobian.MyModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_core.NonFittableModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_core.test_inputless_model.TestModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_fitters.TestNonLinearFitters.test_simplex_lsq_fitter.Rosenbrock" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_fitters.TestNonLinearFitters.test_simplex_lsq_fitter.Rosenbrock" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_input.TModel_1_1" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="p1", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_input.TModel_1_1" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="p2", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_input.TModel_1_2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="p1", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_input.TModel_1_2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="p2", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_input.TModel_1_2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="p3", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_input.test_more_outputs.M" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_model_sets.TParModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="coeff", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_model_sets.TParModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="e", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_models.ModelDefault" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slope", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_models.ModelDefault" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="intercept", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_models.classmodel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="f", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_models.classmodel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_models.classmodel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_models.subclassmodel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="f", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_models.subclassmodel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_models.subclassmodel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="y", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_models.subclassmodel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="h", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_parameters.M1" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="m1a", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_parameters.M1" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="m1b", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_parameters.M2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="m2c", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_parameters.M3" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="m3d", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_parameters.MockModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alpha", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_parameters.SetterModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="xc", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_parameters.SetterModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="yc", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_parameters.TParModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="coeff", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_parameters.TParModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="e", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_parameters.test_non_broadcasting_parameters.TestModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="p1", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_parameters.test_non_broadcasting_parameters.TestModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="p2", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_parameters.test_non_broadcasting_parameters.TestModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="p3", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_quantities_fitting.CustomInputNamesModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_quantities_fitting.CustomInputNamesModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_quantities_parameters.test_log_getter.CustomBlackBody" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="scale", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_quantities_parameters.test_parameter_default_units_match.TestC" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_quantities_parameters.test_parameter_defaults.TestModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_quantities_parameters.test_sqrt_getter.CustomGaussian1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mean", style="solid"];
"astropy.modeling.parameters.Parameter" -> "astropy.modeling.tests.test_quantities_parameters.test_sqrt_getter.CustomGaussian1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stddev", style="solid"];
"astropy.modeling.polynomial.Chebyshev1D" -> "astropy.modeling.tests.test_parameters.TestParameters" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"astropy.modeling.polynomial.Chebyshev2D" -> "astropy.modeling.tests.test_fitters.TestICheb2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cheb2", style="solid"];
"astropy.modeling.polynomial.Polynomial1D" -> "astropy.modeling.tests.test_constraints.TestLinearConstraints" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="p1", style="solid"];
"astropy.modeling.polynomial.Polynomial2D" -> "astropy.modeling.polynomial.InverseSIP" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sip1d_ap", style="solid"];
"astropy.modeling.polynomial.Polynomial2D" -> "astropy.modeling.polynomial.InverseSIP" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sip1d_bp", style="solid"];
"astropy.modeling.polynomial.Polynomial2D" -> "astropy.modeling.tests.test_fitters.TestICheb2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pmodel", style="solid"];
"astropy.modeling.polynomial.Polynomial2D" -> "astropy.modeling.tests.test_fitters.TestPolynomial2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"astropy.modeling.polynomial._SIP1D" -> "astropy.modeling.polynomial.SIP" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sip1d_a", style="solid"];
"astropy.modeling.polynomial._SIP1D" -> "astropy.modeling.polynomial.SIP" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sip1d_b", style="solid"];
"astropy.modeling.projections.Pix2Sky_CylindricalPerspective" -> "astropy.modeling.tests.test_projections.TestCylindricalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="azp", style="solid"];
"astropy.modeling.projections.Pix2Sky_ZenithalPerspective" -> "astropy.modeling.tests.test_projections.TestZenithalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="azp", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Conic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sigma", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Conic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="delta", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Pix2Sky_Airy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="theta_b", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Pix2Sky_BonneEqualArea" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="theta1", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Pix2Sky_CylindricalEqualArea" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lam", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Pix2Sky_HEALPix" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="H", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Pix2Sky_HEALPix" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="X", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Pix2Sky_SlantOrthographic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="xi", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Pix2Sky_SlantOrthographic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="eta", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Pix2Sky_SlantZenithalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mu", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Pix2Sky_SlantZenithalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="phi0", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Pix2Sky_SlantZenithalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="theta0", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Pix2Sky_ZenithalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mu", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Pix2Sky_ZenithalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gamma", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Sky2Pix_Airy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="theta_b", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Sky2Pix_BonneEqualArea" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="theta1", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Sky2Pix_CylindricalEqualArea" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lam", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Sky2Pix_HEALPix" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="H", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Sky2Pix_HEALPix" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="X", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Sky2Pix_SlantOrthographic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="xi", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Sky2Pix_SlantOrthographic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="eta", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Sky2Pix_SlantZenithalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mu", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Sky2Pix_SlantZenithalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="phi0", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Sky2Pix_SlantZenithalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="theta0", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Sky2Pix_ZenithalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mu", style="solid"];
"astropy.modeling.projections._ParameterDS" -> "astropy.modeling.projections.Sky2Pix_ZenithalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gamma", style="solid"];
"astropy.modeling.tests.test_core.NonFittableModel" -> "astropy.modeling.tests.test_core.NonFittableModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inverse", style="solid"];
"astropy.modeling.tests.test_quantities_evaluation.MyTestModel" -> "astropy.modeling.tests.test_quantities_evaluation.TestInputUnits" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"astropy.nddata.nddata.NDData" -> "astropy.nddata.tests.test_nddata.TestMetaNDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="test_class", style="solid"];
"astropy.nddata.nduncertainty.StdDevUncertainty" -> "astropy.nddata.ccddata.CCDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_uncertainty", style="solid"];
"astropy.nddata.nduncertainty.StdDevUncertainty" -> "astropy.nddata.ccddata.CCDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uncertainty", style="solid"];
"astropy.nddata.nduncertainty.StdDevUncertainty" -> "astropy.nddata.ccddata.CCDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uncertainty", style="solid"];
"astropy.nddata.nduncertainty.StdDevUncertainty" -> "astropy.nddata.ccddata.CCDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uncertainty", style="solid"];
"astropy.nddata.nduncertainty.StdDevUncertainty" -> "astropy.nddata.ccddata.CCDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uncertainty", style="solid"];
"astropy.nddata.nduncertainty.StdDevUncertainty" -> "astropy.nddata.ccddata.CCDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uncertainty", style="solid"];
"astropy.nddata.nduncertainty.StdDevUncertainty" -> "astropy.nddata.compat.NDDataArray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uncertainty", style="solid"];
"astropy.nddata.nduncertainty.UnknownUncertainty" -> "astropy.nddata.compat.NDDataArray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uncertainty", style="solid"];
"astropy.nddata.tests.test_nduncertainty.FakeUncertainty" -> "astropy.nddata.nddata.NDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uncertainty", style="solid"];
"astropy.samp.client.SAMPClient" -> "astropy.samp.integrated_client.SAMPIntegratedClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client", style="solid"];
"astropy.samp.hub.SAMPHubServer" -> "astropy.samp.tests.test_hub_proxy.TestHubProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hub", style="solid"];
"astropy.samp.hub.SAMPHubServer" -> "astropy.samp.tests.test_standard_profile.TestStandardProfile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hub", style="solid"];
"astropy.samp.hub.SAMPHubServer" -> "astropy.samp.tests.test_web_profile.TestWebProfile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hub", style="solid"];
"astropy.samp.hub_proxy.SAMPHubProxy" -> "astropy.samp.integrated_client.SAMPIntegratedClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hub", style="solid"];
"astropy.samp.hub_proxy.SAMPHubProxy" -> "astropy.samp.tests.test_hub_proxy.TestHubProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="proxy", style="solid"];
"astropy.samp.integrated_client.SAMPIntegratedClient" -> "astropy.samp.tests.test_standard_profile.TestStandardProfile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client1", style="solid"];
"astropy.samp.integrated_client.SAMPIntegratedClient" -> "astropy.samp.tests.test_standard_profile.TestStandardProfile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client2", style="solid"];
"astropy.samp.integrated_client.SAMPIntegratedClient" -> "astropy.samp.tests.test_web_profile.TestWebProfile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client1", style="solid"];
"astropy.samp.standard_profile.ThreadingXMLRPCServer" -> "astropy.samp.client.SAMPClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client", style="solid"];
"astropy.samp.standard_profile.ThreadingXMLRPCServer" -> "astropy.samp.hub.SAMPHubServer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_server", style="solid"];
"astropy.samp.tests.web_profile_test_helpers.AlwaysApproveWebProfileDialog" -> "astropy.samp.tests.test_web_profile.TestWebProfile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dialog", style="solid"];
"astropy.samp.tests.web_profile_test_helpers.SAMPIntegratedWebClient" -> "astropy.samp.tests.test_web_profile.TestWebProfile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client2", style="solid"];
"astropy.samp.tests.web_profile_test_helpers.SAMPWebClient" -> "astropy.samp.tests.web_profile_test_helpers.SAMPIntegratedWebClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client", style="solid"];
"astropy.samp.tests.web_profile_test_helpers.SAMPWebHubProxy" -> "astropy.samp.tests.web_profile_test_helpers.SAMPIntegratedWebClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hub", style="solid"];
"astropy.samp.utils.ServerProxyPool" -> "astropy.samp.hub_proxy.SAMPHubProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="proxy", style="solid"];
"astropy.samp.utils.ServerProxyPool" -> "astropy.samp.tests.web_profile_test_helpers.SAMPWebHubProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="proxy", style="solid"];
"astropy.samp.web_profile.WebProfileXMLRPCServer" -> "astropy.samp.hub.SAMPHubServer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_web_profile_server", style="solid"];
"astropy.table.bst.Node" -> "astropy.table.bst.BST" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="NodeClass", style="solid"];
"astropy.table.column.Column" -> "astropy.table.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_column_class", style="solid"];
"astropy.table.column.Column" -> "astropy.table.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Column", style="solid"];
"astropy.table.column.Column" -> "astropy.table.tests.conftest.table_data.TableData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Column", style="solid"];
"astropy.table.column.Column" -> "astropy.table.tests.conftest.table_types.TableTypes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Column", style="solid"];
"astropy.table.column.Column" -> "astropy.table.tests.test_column.TestMetaColumn" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="test_class", style="solid"];
"astropy.table.column.Column" -> "astropy.table.tests.test_masked.SetupData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ca", style="solid"];
"astropy.table.column.Column" -> "astropy.table.tests.test_table.TestUpdate" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.table.column.Column" -> "astropy.table.tests.test_table.TestUpdate" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"astropy.table.column.Column" -> "astropy.table.tests.test_table.TestUpdate" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="c", style="solid"];
"astropy.table.column.Column" -> "astropy.table.tests.test_table.TestUpdate" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="d", style="solid"];
"astropy.table.column.MaskedColumn" -> "astropy.table.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_column_class", style="solid"];
"astropy.table.column.MaskedColumn" -> "astropy.table.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="MaskedColumn", style="solid"];
"astropy.table.column.MaskedColumn" -> "astropy.table.tests.conftest.table_data.TableData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Column", style="solid"];
"astropy.table.column.MaskedColumn" -> "astropy.table.tests.conftest.table_types.TableTypes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Column", style="solid"];
"astropy.table.column.MaskedColumn" -> "astropy.table.tests.test_column.TestMetaMaskedColumn" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="test_class", style="solid"];
"astropy.table.column.MaskedColumn" -> "astropy.table.tests.test_masked.SetupData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.table.column.MaskedColumn" -> "astropy.table.tests.test_masked.SetupData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"astropy.table.column.MaskedColumn" -> "astropy.table.tests.test_masked.SetupData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="c", style="solid"];
"astropy.table.column.MaskedColumn" -> "astropy.table.tests.test_masked.SetupData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="d", style="solid"];
"astropy.table.column.MaskedColumn" -> "astropy.table.tests.test_masked.SetupData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sc", style="solid"];
"astropy.table.column.MaskedColumn" -> "astropy.table.tests.test_masked.TestFilled" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.table.column.MaskedColumn" -> "astropy.table.tests.test_masked.TestFilled" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"astropy.table.column.MaskedColumn" -> "astropy.table.tests.test_masked.TestFilled" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="c", style="solid"];
"astropy.table.column.MaskedColumnInfo" -> "astropy.table.column.MaskedColumn" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="info", style="solid"];
"astropy.table.groups.ColumnGroups" -> "astropy.table.column.BaseColumn" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_groups", style="solid"];
"astropy.table.groups.TableGroups" -> "astropy.table.table.QTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_groups", style="solid"];
"astropy.table.groups.TableGroups" -> "astropy.table.table.QTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_groups", style="solid"];
"astropy.table.groups.TableGroups" -> "astropy.table.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_groups", style="solid"];
"astropy.table.groups.TableGroups" -> "astropy.table.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_groups", style="solid"];
"astropy.table.groups.TableGroups" -> "astropy.table.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_groups", style="solid"];
"astropy.table.info.TableInfo" -> "astropy.table.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="info", style="solid"];
"astropy.table.mixins.dask.DaskInfo" -> "astropy.table.mixins.dask.DaskColumn" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="info", style="solid"];
"astropy.table.pprint.TableFormatter" -> "astropy.table.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="formatter", style="solid"];
"astropy.table.pprint.TableFormatter" -> "astropy.table.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="TableFormatter", style="solid"];
"astropy.table.row.Row" -> "astropy.table.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Row", style="solid"];
"astropy.table.serialize.SerializedColumnInfo" -> "astropy.table.serialize.SerializedColumn" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="info", style="solid"];
"astropy.table.sorted_array.SortedArray" -> "astropy.table.index.Index" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engine", style="solid"];
"astropy.table.sorted_array.SortedArray" -> "astropy.table.index.Index" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"astropy.table.sorted_array.SortedArray" -> "astropy.table.index.Index" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"astropy.table.table.QTable" -> "astropy.table.tests.test_index.TestIndex" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_t", style="solid"];
"astropy.table.table.Table" -> "astropy.table.mixins.tests.test_dask.TestDaskHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.conftest.table_data.TableData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Table", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.conftest.table_data.TableData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="DATA", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.conftest.table_types.TableTypes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Table", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.test_masked.SetupData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.test_operations.TestDStack" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t3", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.test_operations.TestDStack" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t4", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.test_operations.TestDStack" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t5", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.test_operations.TestHStack" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t4", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.test_operations.TestHStack" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t5", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.test_operations.TestJoin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t3", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.test_operations.TestVStack" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t4", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.test_operations.TestVStack" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t5", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.test_pprint.TestColumnsShowHide" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"astropy.table.table.Table" -> "astropy.table.tests.test_table.TestMetaTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="test_class", style="solid"];
"astropy.table.table.TableAttribute" -> "astropy.table.tests.test_table.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="foo", style="solid"];
"astropy.table.table.TableAttribute" -> "astropy.table.tests.test_table.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bar", style="solid"];
"astropy.table.table.TableAttribute" -> "astropy.table.tests.test_table.test_table_attribute_fail.MyTable2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="descriptions", style="solid"];
"astropy.table.table.TableAttribute" -> "astropy.table.tests.test_table.test_table_attribute_fail.MyTable3" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="colnames", style="solid"];
"astropy.table.table.TableColumns" -> "astropy.table.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="columns", style="solid"];
"astropy.table.table.TableColumns" -> "astropy.table.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="TableColumns", style="solid"];
"astropy.table.tests.conftest.MaskedTable" -> "astropy.table.tests.conftest.table_data.TableData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Table", style="solid"];
"astropy.table.tests.conftest.MaskedTable" -> "astropy.table.tests.conftest.table_data.TableData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="DATA", style="solid"];
"astropy.table.tests.conftest.MyColumn" -> "astropy.table.tests.conftest.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Column", style="solid"];
"astropy.table.tests.conftest.MyMaskedColumn" -> "astropy.table.tests.conftest.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="MaskedColumn", style="solid"];
"astropy.table.tests.conftest.MyRow" -> "astropy.table.tests.conftest.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Row", style="solid"];
"astropy.table.tests.conftest.MyTableColumns" -> "astropy.table.tests.conftest.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="TableColumns", style="solid"];
"astropy.table.tests.conftest.MyTableFormatter" -> "astropy.table.tests.conftest.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="TableFormatter", style="solid"];
"astropy.table.tests.test_subclass.MyColumn" -> "astropy.table.tests.test_subclass.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Column", style="solid"];
"astropy.table.tests.test_subclass.MyMaskedColumn" -> "astropy.table.tests.test_subclass.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="MaskedColumn", style="solid"];
"astropy.table.tests.test_subclass.MyRow" -> "astropy.table.tests.test_subclass.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Row", style="solid"];
"astropy.table.tests.test_subclass.MyTableColumns" -> "astropy.table.tests.test_subclass.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="TableColumns", style="solid"];
"astropy.table.tests.test_subclass.MyTableFormatter" -> "astropy.table.tests.test_subclass.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="TableFormatter", style="solid"];
"astropy.table.tests.test_subclass.ParamsRow" -> "astropy.table.tests.test_subclass.ParamsTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Row", style="solid"];
"astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MyColumn" -> "astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Column", style="solid"];
"astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MyMaskedColumn" -> "astropy.table.tests.test_table.test_custom_masked_column_in_nonmasked_table.MyTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="MaskedColumn", style="solid"];
"astropy.time.core.Time" -> "astropy.coordinates.tests.test_celestial_transformations.TestHCRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t1", style="solid"];
"astropy.time.core.Time" -> "astropy.coordinates.tests.test_celestial_transformations.TestHCRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t2", style="solid"];
"astropy.time.core.Time" -> "astropy.coordinates.tests.test_celestial_transformations.TestHCRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tarr", style="solid"];
"astropy.time.core.Time" -> "astropy.coordinates.tests.test_celestial_transformations.TestHelioBaryCentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.time.core.Time" -> "astropy.coordinates.tests.test_intermediate_transformations.TestGetLocationGCRS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.time.core.Time" -> "astropy.time.tests.test_comparisons.TestTimeComparisons" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t1", style="solid"];
"astropy.time.core.Time" -> "astropy.time.tests.test_comparisons.TestTimeComparisons" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t2", style="solid"];
"astropy.time.core.Time" -> "astropy.time.tests.test_corrs.TestHelioBaryCentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.time.core.Time" -> "astropy.time.tests.test_corrs.TestHelioBaryCentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime2", style="solid"];
"astropy.time.core.Time" -> "astropy.time.tests.test_corrs.TestHelioBaryCentric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstimeArr", style="solid"];
"astropy.time.core.Time" -> "astropy.time.tests.test_delta.TestTimeDelta" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"astropy.time.core.Time" -> "astropy.time.tests.test_delta.TestTimeDelta" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t2", style="solid"];
"astropy.time.core.Time" -> "astropy.time.tests.test_delta.TestTimeDelta" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t3", style="solid"];
"astropy.time.core.Time" -> "astropy.time.tests.test_delta.TestTimeDelta" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t4", style="solid"];
"astropy.time.core.Time" -> "astropy.time.tests.test_functions.TestFunctionsTime" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"astropy.time.core.Time" -> "astropy.time.tests.test_sidereal.TestERFATestCases" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="time_ut1", style="solid"];
"astropy.time.core.Time" -> "astropy.time.tests.test_sidereal.TestERFATestCases" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="time_tt", style="solid"];
"astropy.time.core.Time" -> "astropy.utils.iers.iers.LeapSeconds" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_expires", style="solid"];
"astropy.time.core.Time" -> "astropy.utils.masked.tests.test_containers.TestTime" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"astropy.time.core.Time" -> "astropy.utils.masked.tests.test_containers.TestTime" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mt", style="solid"];
"astropy.time.core.Time" -> "astropy.wcs.tests.test_utils.test_custom_wcs_to_from_frame.CustomFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obstime", style="solid"];
"astropy.time.core.TimeDelta" -> "astropy.time.core.Time" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="delta_ut1_utc", style="solid"];
"astropy.time.core.TimeDelta" -> "astropy.time.core.Time" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="delta_ut1_utc", style="solid"];
"astropy.time.core.TimeDelta" -> "astropy.time.core.Time" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="delta_tdb_tt", style="solid"];
"astropy.time.core.TimeDelta" -> "astropy.time.core.Time" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="delta_tdb_tt", style="solid"];
"astropy.time.core.TimeDelta" -> "astropy.time.tests.test_delta.TestTimeDelta" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dt", style="solid"];
"astropy.time.core.TimeDelta" -> "astropy.time.tests.test_delta.TestTimeDelta" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dt_array", style="solid"];
"astropy.time.core.TimeDelta" -> "astropy.time.tests.test_functions.TestFunctionsTimeDelta" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"astropy.time.core.TimeDeltaInfo" -> "astropy.time.core.TimeDelta" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="info", style="solid"];
"astropy.time.core.TimeInfo" -> "astropy.time.core.Time" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="info", style="solid"];
"astropy.time.formats.TimeJD" -> "astropy.time.core.TimeBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_time", style="solid"];
"astropy.timeseries.binned.BinnedTimeSeries" -> "astropy.timeseries.tests.test_common.TestBinnedTimeSeries" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="series", style="solid"];
"astropy.timeseries.sampled.TimeSeries" -> "astropy.timeseries.tests.test_common.TestTimeSeries" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="series", style="solid"];
"astropy.uncertainty.core.Distribution" -> "astropy.uncertainty.tests.test_distribution.TestDistributionStatistics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="distr", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.io.ascii.core.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.io.ascii.core.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.nddata.ccddata.CCDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.nddata.compat.NDDataArray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.nddata.nduncertainty.NDUncertainty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.nddata.nduncertainty.NDUncertainty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.table.column.BaseColumn" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.table.column.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.table.column.MaskedColumn" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.units.physical.PhysicalType" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.units.quantity.Quantity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_default_unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.visualization.wcsaxes.formatter_locator.AngleFormatterLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.visualization.wcsaxes.formatter_locator.BaseFormatterLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_format_unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.visualization.wcsaxes.formatter_locator.ScalarFormatterLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_unit", style="solid"];
"astropy.units.core.UnitBase" -> "astropy.units.tests.test_format.StringUnitPair" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit", style="solid"];
"astropy.units.core.UnrecognizedUnit" -> "astropy.io.ascii.core.Column" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit", style="solid"];
"astropy.units.equivalencies.Equivalency" -> "astropy.units.tests.test_equivalencies.test_dimensionless_angles.MyRad1" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_equivalencies", style="solid"];
"astropy.units.equivalencies.Equivalency" -> "astropy.units.tests.test_quantity.test_quantity_conversion_equivalency_passed_on.MySpectral" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_equivalencies", style="solid"];
"astropy.units.format.cds.CDS" -> "astropy.units.tests.test_format.TestRoundtripCDS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_", style="solid"];
"astropy.units.format.fits.FITS" -> "astropy.units.tests.test_format.TestRoundtripFITS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_", style="solid"];
"astropy.units.format.generic.Generic" -> "astropy.units.tests.test_format.TestRoundtripGeneric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_", style="solid"];
"astropy.units.format.ogip.OGIP" -> "astropy.units.tests.test_format.TestRoundtripOGIP" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_", style="solid"];
"astropy.units.format.vounit.VOUnit" -> "astropy.units.tests.test_format.TestRoundtripVOUnit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_", style="solid"];
"astropy.units.function.logarithmic.DecibelUnit" -> "astropy.units.function.logarithmic.Decibel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit_class", style="solid"];
"astropy.units.function.logarithmic.DexUnit" -> "astropy.units.function.logarithmic.Dex" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit_class", style="solid"];
"astropy.units.function.logarithmic.LogUnit" -> "astropy.units.function.logarithmic.LogQuantity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit_class", style="solid"];
"astropy.units.function.logarithmic.MagUnit" -> "astropy.units.function.logarithmic.Magnitude" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unit_class", style="solid"];
"astropy.units.function.logarithmic.Magnitude" -> "astropy.units.tests.test_logarithmic.TestLogQuantityViews" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lq", style="solid"];
"astropy.units.function.logarithmic.Magnitude" -> "astropy.units.tests.test_logarithmic.TestLogQuantityViews" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lq2", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.coordinates.earth.GeodeticLocation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="height", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.coordinates.tests.test_earth.TestInput" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="h", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.coordinates.tests.test_separation.SeparationExpectation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position_angle", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.coordinates.tests.test_separation.SeparationExpectation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="separation", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.coordinates.tests.test_separation.SeparationExpectation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="separation_3d", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.coordinates.tests.test_separation.SeparationExpectation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reversed_position_angle", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.cosmology._src.flrw.base._CriticalDensity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="critical_density0", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.cosmology._src.flrw.base._TemperatureCMB" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Tcmb0", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.timeseries.periodograms.bls.core.BoxLeastSquares" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dy", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.timeseries.periodograms.lombscargle.core.LombScargle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dy", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.timeseries.periodograms.lombscargle_multiband.core.LombScargleMultiband" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dy", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.units.tests.test_quantity.TestQuantityDisplay" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="scalarintq", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.units.tests.test_quantity.TestQuantityDisplay" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="scalarfloatq", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.units.tests.test_quantity.TestQuantityDisplay" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="arrq", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.units.tests.test_quantity.TestQuantityDisplay" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="scalar_complex_q", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.units.tests.test_quantity.TestQuantityDisplay" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="scalar_big_complex_q", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.units.tests.test_quantity.TestQuantityDisplay" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="scalar_big_neg_complex_q", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.units.tests.test_quantity.TestQuantityDisplay" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="arr_complex_q", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.units.tests.test_quantity.TestQuantityDisplay" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="big_arr_complex_q", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.units.tests.test_quantity.TestQuantityOperations" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="q1", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.units.tests.test_quantity.TestQuantityOperations" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="q2", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.units.tests.test_quantity_non_ufuncs.TestBitAndIndexFunctions" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uint_q", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.units.tests.test_quantity_ufuncs.DuckQuantity1" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.utils.masked.tests.test_masked.QuantitySetup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_data_cls", style="solid"];
"astropy.units.structured.StructuredUnit" -> "astropy.units.tests.test_structured.TestStructuredSpecificTypeQuantity.setup_class.PositionVelocity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_equivalent_unit", style="solid"];
"astropy.units.tests.test_quantity_decorator.test_no_equivalent.test_unit" -> "astropy.units.tests.test_quantity_decorator.test_no_equivalent.test_quantity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.Field" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_links", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.Group" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_entries", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.Resource" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_coordinate_systems", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.Resource" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_time_systems", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.Resource" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_groups", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.Resource" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_params", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.Resource" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_infos", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.Resource" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_links", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.Resource" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_tables", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.Resource" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_resources", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.TableElement" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_fields", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.TableElement" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_all_fields", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.TableElement" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_params", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.TableElement" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_groups", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.TableElement" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_links", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.TableElement" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_infos", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.VOTableFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_coordinate_systems", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.VOTableFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_time_systems", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.VOTableFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_params", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.VOTableFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_infos", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.VOTableFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_resources", style="solid"];
"astropy.utils.collections.HomogeneousList" -> "astropy.io.votable.tree.VOTableFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_groups", style="solid"];
"astropy.utils.console.ProgressBar" -> "astropy.utils.console.ProgressBarOrSpinner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_obj", style="solid"];
"astropy.utils.console.Spinner" -> "astropy.utils.console.ProgressBarOrSpinner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_obj", style="solid"];
"astropy.utils.console._GetchUnix" -> "astropy.utils.console.Getch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="impl", style="solid"];
"astropy.utils.console._GetchWindows" -> "astropy.utils.console.Getch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="impl", style="solid"];
"astropy.utils.data_info.ParentDtypeInfo" -> "astropy.table.tests.test_mixin.test_bad_info_class.MyArrayWrapper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="info", style="solid"];
"astropy.utils.decorators.classproperty" -> "astropy.cosmology._src.core.FlatCosmologyMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__nonflatclass__", style="solid"];
"astropy.utils.decorators.classproperty" -> "astropy.utils.tests.test_decorators.test_classproperty_docstring.B" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="foo", style="solid"];
"astropy.utils.decorators.sharedmethod" -> "astropy.nddata.ccddata.CCDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="add", style="solid"];
"astropy.utils.decorators.sharedmethod" -> "astropy.nddata.ccddata.CCDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subtract", style="solid"];
"astropy.utils.decorators.sharedmethod" -> "astropy.nddata.ccddata.CCDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="multiply", style="solid"];
"astropy.utils.decorators.sharedmethod" -> "astropy.nddata.ccddata.CCDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="divide", style="solid"];
"astropy.utils.iers.iers.LeapSeconds" -> "astropy.time.tests.test_update_leap_seconds.TestUpdateLeapSeconds" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="erfa_ls", style="solid"];
"astropy.utils.masked.core.Masked" -> "astropy.time.formats.TimeDatetime64" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jd1", style="solid"];
"astropy.utils.masked.core.Masked" -> "astropy.time.formats.TimeDatetime64" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jd2", style="solid"];
"astropy.utils.masked.core.Masked" -> "astropy.units.tests.test_structured.TestStructuredMaskedQuantity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mpv", style="solid"];
"astropy.utils.masked.core.Masked" -> "astropy.utils.masked.core.Masked" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"astropy.utils.masked.core.Masked" -> "astropy.utils.masked.tests.test_containers.TestRepresentations" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mx", style="solid"];
"astropy.utils.masked.core.Masked" -> "astropy.utils.masked.tests.test_containers.TestRepresentations" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="my", style="solid"];
"astropy.utils.masked.core.Masked" -> "astropy.utils.masked.tests.test_containers.TestRepresentations" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mz", style="solid"];
"astropy.utils.masked.core.Masked" -> "astropy.utils.masked.tests.test_containers.TestSkyCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mra", style="solid"];
"astropy.utils.masked.core.Masked" -> "astropy.utils.masked.tests.test_containers.TestSkyCoord" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mdec", style="solid"];
"astropy.utils.masked.core.Masked" -> "astropy.utils.masked.tests.test_function_helpers.TestNaNFunctions" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ma", style="solid"];
"astropy.utils.masked.core.Masked" -> "astropy.utils.masked.tests.test_function_helpers.TestNaNFunctions" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mb", style="solid"];
"astropy.utils.masked.core.MaskedRecarrayInfo" -> "astropy.utils.masked.core.MaskedRecarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="info", style="solid"];
"astropy.utils.metadata.core.MetaData" -> "astropy.cosmology._src.core.Cosmology" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="meta", style="solid"];
"astropy.utils.metadata.core.MetaData" -> "astropy.nddata.nddata.NDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="meta", style="solid"];
"astropy.utils.metadata.core.MetaData" -> "astropy.utils.metadata.tests.test_metadata.ExampleData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="meta", style="solid"];
"astropy.utils.metadata.core.MetaData" -> "astropy.utils.metadata.tests.test_metadata.ExampleDataclass" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="meta", style="solid"];
"astropy.utils.metadata.core.MetaData" -> "astropy.utils.metadata.tests.test_metadata.ExampleFrozenDataclass" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="meta", style="solid"];
"astropy.utils.metadata.core.MetaData" -> "astropy.utils.metadata.tests.test_metadata.test_metadata_default_factory.ExampleData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="meta", style="solid"];
"astropy.utils.metadata.tests.test_metadata.ExampleData" -> "astropy.utils.metadata.tests.test_metadata.TestMetaExampleData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="test_class", style="solid"];
"astropy.utils.metadata.tests.test_metadata.ExampleDataclass" -> "astropy.utils.metadata.tests.test_metadata.TestMetaExampleDataclass" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="test_class", style="solid"];
"astropy.utils.metadata.tests.test_metadata.ExampleFrozenDataclass" -> "astropy.utils.metadata.tests.test_metadata.TestMetaExampleFrozenDataclass" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="test_class", style="solid"];
"astropy.visualization.stretch.LinearStretch" -> "astropy.visualization.mpl_normalize.ImageNormalize" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inverse_stretch", style="solid"];
"astropy.visualization.wcsaxes.axislabels.AxisLabels" -> "astropy.visualization.wcsaxes.coordinate_helpers.CoordinateHelper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_axislabels", style="solid"];
"astropy.visualization.wcsaxes.coordinates_map.CoordinatesMap" -> "astropy.visualization.wcsaxes.core.WCSAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="coords", style="solid"];
"astropy.visualization.wcsaxes.core._WCSAxesArtist" -> "astropy.visualization.wcsaxes.core.WCSAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_wcsaxesartist", style="solid"];
"astropy.visualization.wcsaxes.formatter_locator.AngleFormatterLocator" -> "astropy.visualization.wcsaxes.coordinate_helpers.CoordinateHelper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_formatter_locator", style="solid"];
"astropy.visualization.wcsaxes.formatter_locator.ScalarFormatterLocator" -> "astropy.visualization.wcsaxes.coordinate_helpers.CoordinateHelper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_formatter_locator", style="solid"];
"astropy.visualization.wcsaxes.frame.RectangularFrame" -> "astropy.visualization.wcsaxes.coordinates_map.CoordinatesMap" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="frame", style="solid"];
"astropy.visualization.wcsaxes.frame.Spine" -> "astropy.visualization.wcsaxes.frame.BaseFrame" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="spine_class", style="solid"];
"astropy.visualization.wcsaxes.frame.SpineXAligned" -> "astropy.visualization.wcsaxes.frame.RectangularFrame1D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="spine_class", style="solid"];
"astropy.visualization.wcsaxes.ticklabels.TickLabels" -> "astropy.visualization.wcsaxes.coordinate_helpers.CoordinateHelper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ticklabels", style="solid"];
"astropy.visualization.wcsaxes.ticks.Ticks" -> "astropy.visualization.wcsaxes.coordinate_helpers.CoordinateHelper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ticks", style="solid"];
"astropy.wcs.wcs.WCS" -> "astropy.modeling.tests.test_projections.TestCylindricalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="wazp", style="solid"];
"astropy.wcs.wcs.WCS" -> "astropy.modeling.tests.test_projections.TestZenithalPerspective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="wazp", style="solid"];
"astropy.wcs.wcs.WCS" -> "astropy.nddata.ccddata.CCDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="wcs", style="solid"];
"astropy.wcs.wcs.WCS" -> "astropy.nddata.nddata.NDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="wcs", style="solid"];
"astropy.wcs.wcs.WCS" -> "astropy.nddata.nddata.NDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="wcs", style="solid"];
"astropy.wcs.wcs.WCS" -> "astropy.wcs.tests.test_wcs.TestWcsWithTime" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="w", style="solid"];
"astropy.wcs.wcsapi.high_level_wcs_wrapper.HighLevelWCSWrapper" -> "astropy.nddata.nddata.NDData" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_wcs", style="solid"];
"astropy.coordinates.baseframe.BaseCoordinateFrame" -> "astropy.coordinates.errors.NonRotationTransformationError" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="frame_to", style="solid"];
"astropy.coordinates.baseframe.BaseCoordinateFrame" -> "astropy.coordinates.errors.NonRotationTransformationError" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="frame_from", style="solid"];
"astropy.coordinates.baseframe.BaseCoordinateFrame" -> "astropy.coordinates.errors.NonRotationTransformationWarning" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="frame_to", style="solid"];
"astropy.coordinates.baseframe.BaseCoordinateFrame" -> "astropy.coordinates.errors.NonRotationTransformationWarning" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="frame_from", style="solid"];
"astropy.coordinates.builtin_frames.icrs.ICRS" -> "astropy.coordinates.builtin_frames.icrs.ICRS" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="representation_type", style="solid"];
"astropy.coordinates.representation.base.BaseDifferential" -> "astropy.coordinates.attributes.DifferentialAttribute" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="allowed_classes", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.builtin_frames.gcrs.GCRS" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="representation_type", style="solid"];
"astropy.coordinates.representation.cartesian.CartesianRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestCartesianDifferential" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="s", style="solid"];
"astropy.coordinates.representation.cylindrical.CylindricalRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestCylindricalDifferential" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="s", style="solid"];
"astropy.coordinates.representation.spherical.PhysicsSphericalRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestPhysicsSphericalDifferential" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="s", style="solid"];
"astropy.coordinates.representation.spherical.SphericalCosLatDifferential" -> "astropy.coordinates.tests.test_representation_arithmetic.TestSphericalDifferential" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="SD_cls", style="solid"];
"astropy.coordinates.representation.spherical.SphericalDifferential" -> "astropy.coordinates.tests.test_representation_arithmetic.TestSphericalDifferential" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="SD_cls", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestRadialDifferential" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="s", style="solid"];
"astropy.coordinates.representation.spherical.SphericalRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestSphericalDifferential" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="s", style="solid"];
"astropy.coordinates.representation.spherical.UnitSphericalCosLatDifferential" -> "astropy.coordinates.tests.test_representation_arithmetic.TestUnitSphericalDifferential" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="USD_cls", style="solid"];
"astropy.coordinates.representation.spherical.UnitSphericalDifferential" -> "astropy.coordinates.tests.test_representation_arithmetic.TestUnitSphericalDifferential" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="USD_cls", style="solid"];
"astropy.coordinates.representation.spherical.UnitSphericalRepresentation" -> "astropy.coordinates.tests.test_representation_arithmetic.TestUnitSphericalDifferential" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="s", style="solid"];
"astropy.cosmology._src.flrw.lambdacdm.FlatLambdaCDM" -> "astropy.cosmology._src.tests.flrw.test_lambdacdm.TestFlatLambdaCDM" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="cls", style="solid"];
"astropy.cosmology._src.flrw.lambdacdm.LambdaCDM" -> "astropy.cosmology._src.tests.flrw.test_lambdacdm.TestLambdaCDM" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="cls", style="solid"];
"astropy.cosmology._src.flrw.w0cdm.FlatwCDM" -> "astropy.cosmology._src.tests.flrw.test_w0cdm.TestFlatwCDM" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="cls", style="solid"];
"astropy.cosmology._src.flrw.w0cdm.wCDM" -> "astropy.cosmology._src.tests.flrw.test_w0cdm.TestwCDM" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="cls", style="solid"];
"astropy.cosmology._src.flrw.w0wacdm.Flatw0waCDM" -> "astropy.cosmology._src.tests.flrw.test_w0wacdm.TestFlatw0waCDM" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="cls", style="solid"];
"astropy.cosmology._src.flrw.w0wacdm.w0waCDM" -> "astropy.cosmology._src.tests.flrw.test_w0wacdm.Testw0waCDM" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="cls", style="solid"];
"astropy.cosmology._src.flrw.w0wzcdm.Flatw0wzCDM" -> "astropy.cosmology._src.tests.flrw.test_w0wzcdm.TestFlatw0wzCDM" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="cls", style="solid"];
"astropy.cosmology._src.flrw.w0wzcdm.w0wzCDM" -> "astropy.cosmology._src.tests.flrw.test_w0wzcdm.Testw0wzCDM" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="cls", style="solid"];
"astropy.cosmology._src.flrw.wpwazpcdm.FlatwpwaCDM" -> "astropy.cosmology._src.tests.flrw.test_wpwazpcdm.TestFlatwpwaCDM" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="cls", style="solid"];
"astropy.cosmology._src.flrw.wpwazpcdm.wpwaCDM" -> "astropy.cosmology._src.tests.flrw.test_wpwazpcdm.TestwpwaCDM" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="cls", style="solid"];
"astropy.cosmology._src.tests.flrw.test_flrw.SubFLRW" -> "astropy.cosmology._src.tests.flrw.test_flrw.TestFLRW" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="cls", style="solid"];
"astropy.cosmology._src.tests.test_core.SubCosmology" -> "astropy.cosmology._src.tests.test_core.TestCosmology" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="cls", style="solid"];
"astropy.extern.configobj.configobj.ConfigObj" -> "astropy.extern.configobj.configobj.ConfigObj" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="configspec", style="solid"];
"astropy.extern.configobj.configobj.ConfigObj" -> "astropy.extern.configobj.configobj.ConfigObjError" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"astropy.extern.configobj.configobj.ConfigObjError" -> "astropy.extern.configobj.configobj.SimpleVal" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="baseErrorClass", style="solid"];
"astropy.extern.configobj.validate.ValidateError" -> "astropy.extern.configobj.validate.Validator" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="baseErrorClass", style="solid"];
"astropy.extern.configobj.validate.VdtMissingValue" -> "astropy.extern.configobj.configobj.ConfigObj" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_vdtMissingValue", style="solid"];
"astropy.extern.ply.lex.LexToken" -> "astropy.extern.ply.yacc.YaccSymbol" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"astropy.extern.ply.lex.LexToken" -> "astropy.extern.ply.yacc.YaccSymbol" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"astropy.extern.ply.lex.LexToken" -> "astropy.extern.ply.yacc.YaccSymbol" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"astropy.extern.ply.lex.Lexer" -> "astropy.extern.ply.lex.LexToken" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="lexer", style="solid"];
"astropy.extern.ply.lex.Lexer" -> "astropy.extern.ply.lex.LexToken" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="lexer", style="solid"];
"astropy.extern.ply.lex.Lexer" -> "astropy.extern.ply.yacc.YaccProduction" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="lexer", style="solid"];
"astropy.extern.ply.yacc.LRParser" -> "astropy.extern.ply.yacc.YaccProduction" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="parser", style="solid"];
"astropy.extern.ply.yacc.LRParser" -> "astropy.extern.ply.yacc.YaccProduction" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="parser", style="solid"];
"astropy.extern.ply.yacc.LRParser" -> "astropy.extern.ply.yacc.YaccProduction" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="parser", style="solid"];
"astropy.extern.ply.yacc.LRParser" -> "astropy.utils.parsing.ThreadSafeParser" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="parser", style="solid"];
"astropy.extern.ply.yacc.NullLogger" -> "astropy.extern.ply.yacc.LRGeneratedTable" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="log", style="solid"];
"astropy.io.ascii.core.NoType" -> "astropy.io.ascii.core.Column" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="type", style="solid"];
"astropy.io.fits.column.ColDefs" -> "astropy.io.fits.hdu.compressed.compbintable._CompBinTableHDU" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="columns", style="solid"];
"astropy.io.fits.column.ColDefs" -> "astropy.io.fits.hdu.table.BinTableHDU" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="columns", style="solid"];
"astropy.io.fits.column._VLF" -> "astropy.io.fits.column.Column" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="array", style="solid"];
"astropy.io.fits.file._File" -> "astropy.io.fits.hdu.hdulist.HDUList" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_file", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.io.fits.hdu.base._BaseHDU" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_header", style="solid"];
"astropy.io.fits.header.Header" -> "astropy.nddata.ccddata.CCDData" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="header", style="solid"];
"astropy.io.registry.core.UnifiedIORegistry" -> "astropy.io.registry.interface.UnifiedReadWrite" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_registry", style="solid"];
"astropy.io.registry.core.UnifiedIORegistry" -> "astropy.io.registry.tests.test_registries.TestUnifiedIORegistry" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_cls", style="solid"];
"astropy.io.registry.core.UnifiedInputRegistry" -> "astropy.io.registry.tests.test_registries.TestUnifiedInputRegistry" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_cls", style="solid"];
"astropy.io.registry.core.UnifiedOutputRegistry" -> "astropy.io.registry.tests.test_registries.TestUnifiedOutputRegistry" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_cls", style="solid"];
"astropy.io.registry.tests.test_registries.UnifiedIORegistryBaseSubClass" -> "astropy.io.registry.tests.test_registries.TestUnifiedIORegistryBase" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_cls", style="solid"];
"astropy.modeling.bounding_box.CompoundBoundingBox" -> "astropy.modeling.core.Model" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_user_bounding_box", style="solid"];
"astropy.modeling.bounding_box.CompoundBoundingBox" -> "astropy.modeling.functional_models.Const2D" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="bounding_box", style="solid"];
"astropy.modeling.bounding_box.CompoundBoundingBox" -> "astropy.modeling.functional_models.Gaussian1D" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="bounding_box", style="solid"];
"astropy.modeling.bounding_box.CompoundBoundingBox" -> "astropy.modeling.functional_models.Gaussian1D" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="bounding_box", style="solid"];
"astropy.modeling.bounding_box.CompoundBoundingBox" -> "astropy.modeling.functional_models.Gaussian1D" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="bounding_box", style="solid"];
"astropy.modeling.bounding_box.CompoundBoundingBox" -> "astropy.modeling.polynomial.Polynomial2D" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="bounding_box", style="solid"];
"astropy.modeling.bounding_box.ModelBoundingBox" -> "astropy.modeling.core.Model" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_user_bounding_box", style="solid"];
"astropy.modeling.bounding_box.ModelBoundingBox" -> "astropy.modeling.functional_models.Gaussian2D" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="bounding_box", style="solid"];
"astropy.modeling.bounding_box.ModelBoundingBox" -> "astropy.modeling.functional_models.Gaussian2D" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="bounding_box", style="solid"];
"astropy.modeling.bounding_box.ModelBoundingBox" -> "astropy.modeling.polynomial.Polynomial2D" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="bounding_box", style="solid"];
"astropy.modeling.bounding_box.ModelBoundingBox" -> "astropy.modeling.polynomial.Polynomial2D" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="bounding_box", style="solid"];
"astropy.modeling.polynomial.Polynomial1D" -> "astropy.modeling.polynomial.Polynomial1D" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="inverse", style="solid"];
"astropy.modeling.projections.AffineTransformation2D" -> "astropy.modeling.projections.AffineTransformation2D" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="inverse", style="solid"];
"astropy.modeling.spline._Spline" -> "astropy.modeling.parameters.Parameter" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"astropy.modeling.tests.test_bounding_box.Test_BoundingDomain.setup_method.BoundingDomain" -> "astropy.modeling.tests.test_bounding_box.Test_BoundingDomain" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="BoundingDomain", style="solid"];
"astropy.modeling.tests.test_spline.TestSpline.setup_class.Spline" -> "astropy.modeling.tests.test_spline.TestSpline" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="Spline", style="solid"];
"astropy.nddata.ccddata.CCDData" -> "astropy.nddata.nduncertainty.StdDevUncertainty" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="parent_nddata", style="solid"];
"astropy.nddata.ccddata.CCDData" -> "astropy.nddata.nduncertainty.StdDevUncertainty" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_parent_nddata", style="solid"];
"astropy.nddata.ccddata.CCDData" -> "astropy.nddata.nduncertainty.UnknownUncertainty" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="parent_nddata", style="solid"];
"astropy.nddata.compat.NDDataArray" -> "astropy.nddata.nduncertainty.UnknownUncertainty" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="parent_nddata", style="solid"];
"astropy.nddata.nddata.NDData" -> "astropy.nddata.nduncertainty.UnknownUncertainty" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="parent_nddata", style="solid"];
"astropy.nddata.nduncertainty.UnknownUncertainty" -> "astropy.nddata.nddata.NDData" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_uncertainty", style="solid"];
"astropy.nddata.tests.test_nddata.MinimalUncertainty" -> "astropy.nddata.nddata.NDData" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="uncertainty", style="solid"];
"astropy.table.bst.Node" -> "astropy.table.bst.Node" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="left", style="solid"];
"astropy.table.bst.Node" -> "astropy.table.bst.Node" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="right", style="solid"];
"astropy.table.tests.conftest.MaskedTable" -> "astropy.table.tests.conftest.table_types.TableTypes" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="Table", style="solid"];
"astropy.table.tests.conftest.MyColumn" -> "astropy.table.tests.conftest.table_types.TableTypes" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="Column", style="solid"];
"astropy.table.tests.conftest.MyTable" -> "astropy.table.tests.conftest.table_types.TableTypes" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="Table", style="solid"];
"astropy.time.core.Time" -> "astropy.coordinates.builtin_frames.fk5.FK5" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="equinox", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.io.votable.tree.Field" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.io.votable.tree.Info" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.nddata.nddata.NDData" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.units.core.CompositeUnit" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_decomposed_cache", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.units.core.CompositeUnit" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_decomposed_cache", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.units.core.Unit" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_represents", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.units.function.core.FunctionUnitBase" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_physical_unit", style="solid"];
"astropy.units.core.CompositeUnit" -> "astropy.units.function.core.FunctionUnitBase" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_function_unit", style="solid"];
"astropy.units.function.logarithmic.DecibelUnit" -> "astropy.units.core.CompositeUnit" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_function_unit_class", style="solid"];
"astropy.units.function.logarithmic.DexUnit" -> "astropy.units.function.mixin.IrreducibleFunctionUnit" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_function_unit_class", style="solid"];
"astropy.units.function.logarithmic.MagUnit" -> "astropy.units.core.CompositeUnit" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_function_unit_class", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.coordinates.representation.cartesian.CartesianDifferential" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_d_xyz", style="solid"];
"astropy.units.quantity.Quantity" -> "astropy.coordinates.representation.cartesian.CartesianRepresentation" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_xyz", style="solid"];
"astropy.units.structured.StructuredUnit" -> "astropy.units.quantity.Quantity" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_unit", style="solid"];
"astropy.units.tests.test_quantity.TestSpecificTypeQuantity.setup_method.Length" -> "astropy.units.tests.test_quantity.TestSpecificTypeQuantity" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="Length", style="solid"];
"astropy.units.tests.test_quantity.TestSpecificTypeQuantity.setup_method.Length2" -> "astropy.units.tests.test_quantity.TestSpecificTypeQuantity" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="Length2", style="solid"];
"astropy.units.tests.test_quantity.TestSpecificTypeQuantity.setup_method.Length3" -> "astropy.units.tests.test_quantity.TestSpecificTypeQuantity" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="Length3", style="solid"];
"astropy.units.tests.test_quantity.test_unit_class_override.MyQuantity" -> "astropy.units.core.CompositeUnit" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_quantity_class", style="solid"];
"astropy.units.tests.test_structured.TestStructuredSpecificTypeQuantity.setup_class.PositionVelocity" -> "astropy.units.tests.test_structured.TestStructuredSpecificTypeQuantity" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="PositionVelocity", style="solid"];
"astropy.utils.misc._DummyFile" -> "astropy.utils.console.ProgressBar" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_file", style="solid"];
"astropy.utils.misc._DummyFile" -> "astropy.utils.console.Spinner" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_file", style="solid"];
"astropy.visualization.interval.AsymmetricPercentileInterval" -> "astropy.visualization.mpl_normalize.SimpleNorm" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="interval", style="solid"];
"astropy.visualization.interval.ManualInterval" -> "astropy.visualization.basic_rgb.RGBImageMapping" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="intervals", style="solid"];
"astropy.visualization.interval.ManualInterval" -> "astropy.visualization.mpl_normalize.SimpleNorm" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="interval", style="solid"];
"astropy.visualization.interval.MinMaxInterval" -> "astropy.visualization.mpl_normalize.SimpleNorm" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="interval", style="solid"];
"astropy.visualization.interval.PercentileInterval" -> "astropy.visualization.mpl_normalize.SimpleNorm" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="interval", style="solid"];
"astropy.visualization.stretch.AsinhStretch" -> "astropy.visualization.mpl_normalize.SimpleNorm" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="stretch", style="solid"];
"astropy.visualization.stretch.BaseStretch" -> "astropy.visualization.mpl_normalize.ImageNormalize" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="stretch", style="solid"];
"astropy.visualization.stretch.LinearStretch" -> "astropy.visualization.basic_rgb.RGBImageMapping" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="stretch", style="solid"];
"astropy.visualization.stretch.LinearStretch" -> "astropy.visualization.mpl_normalize.SimpleNorm" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="stretch", style="solid"];
"astropy.visualization.stretch.LogStretch" -> "astropy.visualization.mpl_normalize.SimpleNorm" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="stretch", style="solid"];
"astropy.visualization.stretch.PowerStretch" -> "astropy.visualization.mpl_normalize.SimpleNorm" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="stretch", style="solid"];
"astropy.visualization.stretch.SinhStretch" -> "astropy.visualization.mpl_normalize.SimpleNorm" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="stretch", style="solid"];
"astropy.visualization.stretch.SqrtStretch" -> "astropy.visualization.mpl_normalize.SimpleNorm" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="stretch", style="solid"];
"astropy.visualization.wcsaxes.frame.RectangularFrame" -> "astropy.visualization.wcsaxes.core.WCSAxes" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="frame_class", style="solid"];
"astropy.visualization.wcsaxes.frame.RectangularFrame1D" -> "astropy.visualization.wcsaxes.core.WCSAxes" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="frame_class", style="solid"];
"astropy.visualization.wcsaxes.wcsapi.WCSPixel2WorldTransform" -> "astropy.visualization.wcsaxes.core.WCSAxes" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_transform_pixel2world", style="solid"];
"astropy.wcs.tests.test_utils.test_body_to_wcs_frame.IAUMARS2000BodycentricRepresentation" -> "astropy.wcs.tests.test_utils.test_body_to_wcs_frame.IAUMARS2000BodyFrame" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="representation_type", style="solid"];
"astropy.wcs.tests.test_utils.test_body_to_wcs_frame.IAUMARS2000GeodeticRepresentation" -> "astropy.wcs.tests.test_utils.test_body_to_wcs_frame.IAUMARS2000BodyFrame" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="representation_type", style="solid"];
"astropy.wcs.tests.test_utils.test_pixel_to_pixel_correlation_matrix_nonsquare.FakeWCS" -> "astropy.wcs.tests.test_utils.test_pixel_to_pixel_correlation_matrix_nonsquare.FakeWCS" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="low_level_wcs", style="solid"];
"astropy.wcs.tests.test_utils.test_pixel_to_pixel_correlation_matrix_nonsquare.FakeWCS" -> "astropy.wcs.tests.test_utils.test_pixel_to_pixel_correlation_matrix_nonsquare.FakeWCS" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="low_level_wcs", style="solid"];
"astropy.wcs.wcs.WCS" -> "astropy.nddata.tests.test_utils.TestCutout2D" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="wcs", style="solid"];
"astropy.wcs.wcs.WCS" -> "astropy.visualization.wcsaxes.core.WCSAxes" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="wcs", style="solid"];
}
